!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	C:/Users/mike/source/repos/MTL/MTL/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20211003.0/
ANSI	include/mtl/win/enc.h	/^	inline const codepage& ANSI() $/;"	f	namespace:mtl	typeref:typename:const codepage &
Add	include/mtl/obj/collection.h	/^        virtual HRESULT __stdcall Add(BSTR value)$/;"	f	class:mtl::bstr_collection	typeref:typename:HRESULT __stdcall
Add	include/mtl/obj/collection.h	/^        virtual HRESULT __stdcall Add(IDispatch* value)$/;"	f	class:mtl::disp_collection	typeref:typename:HRESULT __stdcall
Add	include/mtl/obj/collection.h	/^        virtual HRESULT __stdcall Add(IUnknown* value)$/;"	f	class:mtl::unknown_collection	typeref:typename:HRESULT __stdcall
Add	include/mtl/obj/collection.h	/^        virtual HRESULT __stdcall Add(VARIANT value)$/;"	f	class:mtl::variant_collection	typeref:typename:HRESULT __stdcall
Add	include/mtl/obj/collection.h	/^        virtual HRESULT __stdcall Add(long value)$/;"	f	class:mtl::long_collection	typeref:typename:HRESULT __stdcall
AddRef	include/mtl/obj/impl.h	/^		virtual ULONG __stdcall AddRef(void) override$/;"	f	class:mtl::implements	typeref:typename:ULONG __stdcall
AddRef	include/mtl/obj/obj.h	/^		virtual ULONG __stdcall AddRef(void) override$/;"	f	class:mtl::class_object	typeref:typename:ULONG __stdcall
AddRef	include/mtl/punk.h	/^            virtual ULONG __stdcall AddRef(void) override$/;"	f	class:mtl::details::protect_refcnt	typeref:typename:ULONG __stdcall
Advise	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall Advise(IAdviseSink* pAdvSink, DWORD* pdwConnection) override$/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
Advise	include/mtl/ole/cp.h	/^		virtual HRESULT __stdcall Advise(IUnknown* pUnkSink, DWORD* pdwCookie) override$/;"	f	class:mtl::connection_point	typeref:typename:HRESULT __stdcall
BUFSIZE	include/mtl/win32/io.h	/^            static const size_t BUFSIZE = 4096;$/;"	m	class:mtl::detail::WriteOverLap	typeref:typename:const size_t
BUFSIZE	include/mtl/win32/pipe.h	/^            static const int BUFSIZE = 4096;$/;"	m	class:mtl::detail::PipeReadOverlap	typeref:typename:const int
BUFSIZE	include/mtl/win32/pipe.h	/^            static const int BUFSIZE = 4096;$/;"	m	class:mtl::detail::PipeWriteOverlap	typeref:typename:const int
BUFSIZE	include/mtl/win32/pipe.h	/^        static const int BUFSIZE = 4096;$/;"	m	class:mtl::named_pipe	typeref:typename:const int
Binder	include/mtl/win/dlg.h	/^            Binder(dialog* dlg)$/;"	f	class:mtl::details::Binder
Binder	include/mtl/win/dlg.h	/^        class Binder$/;"	c	namespace:mtl::details
Binding	include/mtl/win/dlg.h	/^        class Binding$/;"	c	namespace:mtl::details
Bindings	include/mtl/win/dlg.h	/^            Bindings(Args& ... args)$/;"	f	class:mtl::details::Bindings
Bindings	include/mtl/win/dlg.h	/^        class Bindings : public Binding$/;"	c	namespace:mtl::details
BrowseObject	include/mtl/ole/shell.h	/^			virtual HRESULT __stdcall BrowseObject(PCUIDLIST_RELATIVE pidl, UINT wFlags) override$/;"	f	class:mtl::shell::folder_view	typeref:typename:HRESULT __stdcall
CanInPlaceActivate	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall CanInPlaceActivate()$/;"	f	class:mtl::client_site	typeref:typename:HRESULT __stdcall
Clear	include/mtl/obj/collection.h	/^        virtual HRESULT __stdcall Clear()$/;"	f	class:mtl::collection	typeref:typename:HRESULT __stdcall
Clone	include/mtl/obj/enum.h	/^		virtual HRESULT __stdcall Clone(IEnumUnknown** ppenum) override$/;"	f	class:mtl::enum_unknown	typeref:typename:HRESULT __stdcall
Clone	include/mtl/obj/enum.h	/^		virtual HRESULT __stdcall Clone(IEnumVARIANT** ppenum) override$/;"	f	class:mtl::enum_variant	typeref:typename:HRESULT __stdcall
Clone	include/mtl/ole/cp.h	/^		virtual HRESULT __stdcall Clone(IEnumConnectionPoints** ppenum) override$/;"	f	class:mtl::enum_connection_point	typeref:typename:HRESULT __stdcall
Close	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall Close(DWORD dwSaveOption) override$/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
CoRunLocalServer	include/mtl/obj/iso.h	/^    inline HRESULT CoRunLocalServer(const std::wstring& server, const CLSID& clsid, T** t, int c/;"	f	namespace:mtl	typeref:typename:HRESULT
Commit	include/mtl/persist/stgm.h	/^			HRESULT virtual __stdcall Commit(DWORD grfCommitFlags)$/;"	f	class:mtl::ole::dummy_storage	typeref:typename:HRESULT __stdcall
Commit	include/mtl/persist/stream.h	/^        virtual HRESULT __stdcall Commit(DWORD grfCommitFlags) override$/;"	f	class:mtl::dummy_storage	typeref:typename:HRESULT __stdcall
ContextSensitiveHelp	include/mtl/ole/control.h	/^			virtual HRESULT __stdcall ContextSensitiveHelp(BOOL fEnterMode)$/;"	f	class:mtl::control::ole_inplace_active_obj	typeref:typename:HRESULT __stdcall
ContextSensitiveHelp	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall ContextSensitiveHelp(BOOL fEnterMode) override$/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
ContextSensitiveHelp	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall ContextSensitiveHelp(BOOL fEnterMode)$/;"	f	class:mtl::client_site	typeref:typename:HRESULT __stdcall
ContextSensitiveHelp	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall ContextSensitiveHelp(BOOL fEnterMode)$/;"	f	class:mtl::inplace_frame	typeref:typename:HRESULT __stdcall
ContextSensitiveHelp	include/mtl/ole/shell.h	/^			virtual HRESULT __stdcall ContextSensitiveHelp(BOOL fEnterMode) override$/;"	f	class:mtl::shell::folder_view	typeref:typename:HRESULT __stdcall
CopyTo	include/mtl/persist/stgm.h	/^			HRESULT virtual __stdcall CopyTo(DWORD ciidExclude, IID const* rgiidExclude, SNB snbExclude, /;"	f	class:mtl::ole::dummy_storage	typeref:typename:HRESULT __stdcall
CopyTo	include/mtl/persist/stream.h	/^        virtual HRESULT __stdcall CopyTo(DWORD ciidExclude, const IID* rgiidExclude, SNB snbExcl/;"	f	class:mtl::dummy_storage	typeref:typename:HRESULT __stdcall
CreateInstance	include/mtl/obj/obj.h	/^		virtual HRESULT __stdcall CreateInstance(IUnknown* pUnkOuter, REFIID riid, void** ppvObject) o/;"	f	class:mtl::class_object	typeref:typename:HRESULT __stdcall
CreateStorage	include/mtl/persist/stgm.h	/^			HRESULT virtual __stdcall CreateStorage(const WCHAR* pwcsName, DWORD grfMode, DWORD reserved1/;"	f	class:mtl::ole::dummy_storage	typeref:typename:HRESULT __stdcall
CreateStorage	include/mtl/persist/stream.h	/^        virtual HRESULT __stdcall CreateStorage(const OLECHAR* pwcsName, DWORD grfMode, DWORD re/;"	f	class:mtl::dummy_storage	typeref:typename:HRESULT __stdcall
CreateStream	include/mtl/persist/stgm.h	/^			HRESULT virtual __stdcall CreateStream(const WCHAR* pwcsName, DWORD grfMode, DWORD reserved1,/;"	f	class:mtl::ole::dummy_storage	typeref:typename:HRESULT __stdcall
CreateStream	include/mtl/persist/stream.h	/^        virtual HRESULT __stdcall CreateStream(const OLECHAR* pwcsName, DWORD grfMode, DWORD res/;"	f	class:mtl::dummy_storage	typeref:typename:HRESULT __stdcall
DAdvise	include/mtl/ole/dataobj.h	/^		virtual HRESULT __stdcall DAdvise(FORMATETC* pformatetc, DWORD advf, IAdviseSink* pAdvSink, DW/;"	f	class:mtl::data_object	typeref:typename:HRESULT __stdcall
DLL_COCLASS_EXPORTS	include/mtl/obj/inproc.h	/^#define DLL_COCLASS_EXPORTS(/;"	d
DOS	include/mtl/win/enc.h	/^		enum eol_mode { UNIX, DOS } eol;$/;"	e	enum:mtl::file_encoding::eol_mode
DUnadvise	include/mtl/ole/dataobj.h	/^		virtual HRESULT __stdcall DUnadvise(DWORD dwConnection) override$/;"	f	class:mtl::data_object	typeref:typename:HRESULT __stdcall
Data	include/mtl/scintilla/sci.h	/^struct meta::Data<mtl::XmlStyle>$/;"	s	class:meta
Data	include/mtl/scintilla/sci.h	/^struct meta::Data<mtl::XmlStyleSet>$/;"	s	class:meta
Data	include/mtl/scintilla/sci.h	/^struct meta::Data<mtl::XmlStyleSets>$/;"	s	class:meta
DeactivateAndUndo	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall DeactivateAndUndo()$/;"	f	class:mtl::client_site	typeref:typename:HRESULT __stdcall
DestroyElement	include/mtl/persist/stgm.h	/^			HRESULT virtual __stdcall DestroyElement(const OLECHAR* pwcsName)$/;"	f	class:mtl::ole::dummy_storage	typeref:typename:HRESULT __stdcall
DestroyElement	include/mtl/persist/stream.h	/^        virtual HRESULT __stdcall DestroyElement(const OLECHAR* pwcsName) override$/;"	f	class:mtl::dummy_storage	typeref:typename:HRESULT __stdcall
DiscardUndoState	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall DiscardUndoState()$/;"	f	class:mtl::client_site	typeref:typename:HRESULT __stdcall
DllCanUnloadNow	include/mtl/obj/inproc.h	/^		HRESULT __stdcall DllCanUnloadNow(void) override$/;"	f	class:mtl::inproc_server	typeref:typename:HRESULT __stdcall
DllGetClassObject	include/mtl/obj/inproc.h	/^			static HRESULT __stdcall DllGetClassObject(const CLSID& rclsid, const IID& riid, void** ppv)$/;"	f	class:mtl::details::get_class_object	typeref:typename:HRESULT __stdcall
DllGetClassObject	include/mtl/obj/inproc.h	/^		HRESULT __stdcall DllGetClassObject(const CLSID& rclsid, const IID& riid, void** ppv) override$/;"	f	class:mtl::inproc_server	typeref:typename:HRESULT __stdcall
DllMain	include/mtl/obj/inproc.h	/^		BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved) override$/;"	f	class:mtl::inproc_server	typeref:typename:BOOL __stdcall
DllRegisterServer	include/mtl/obj/inproc.h	/^		virtual HRESULT __stdcall DllRegisterServer(void)$/;"	f	class:mtl::inproc_server	typeref:typename:HRESULT __stdcall
DllUnregisterServer	include/mtl/obj/inproc.h	/^		virtual HRESULT __stdcall DllUnregisterServer(void)$/;"	f	class:mtl::inproc_server	typeref:typename:HRESULT __stdcall
DoVerb	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall DoVerb(LONG iVerb, LPMSG lpmsg, IOleClientSite* pActiveSite, LONG li/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
DragEnter	include/mtl/ole/dataobj.h	/^		HRESULT virtual __stdcall DragEnter(IDataObject*, DWORD grfKeyState, POINTL, DWORD* pEffect)$/;"	f	class:mtl::drop_target_base	typeref:typename:HRESULT __stdcall
DragLeave	include/mtl/ole/dataobj.h	/^		HRESULT virtual __stdcall DragLeave()$/;"	f	class:mtl::drop_target_base	typeref:typename:HRESULT __stdcall
DragOver	include/mtl/ole/dataobj.h	/^		HRESULT virtual __stdcall DragOver(DWORD grfKeyState, POINTL, DWORD* pEffect)$/;"	f	class:mtl::drop_target_base	typeref:typename:HRESULT __stdcall
Draw	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall Draw(DWORD dwDrawAspect, LONG lindex, void* pvAspect, DVTARGETDEVICE/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
Drop	include/mtl/ole/dataobj.h	/^		HRESULT virtual __stdcall Drop(IDataObject* ido, DWORD grfKeyState, POINTL, DWORD* pEffect)$/;"	f	class:mtl::default_drop_target	typeref:typename:HRESULT __stdcall
Drop	include/mtl/ole/dataobj.h	/^		HRESULT virtual __stdcall Drop(IDataObject*, DWORD grfKeyState, POINTL, DWORD* pEffect)$/;"	f	class:mtl::drop_target_base	typeref:typename:HRESULT __stdcall
EAST	include/mtl/win/layout.h	/^			EAST,$/;"	e	enum:mtl::layout::style
ElementPtr	include/mtl/persist/xml.h	/^	using ElementPtr = punk<IXMLDOMElement>;$/;"	t	namespace:mtl	typeref:typename:punk<IXMLDOMElement>
Empty	include/mtl/obj/collection.h	/^        virtual  HRESULT __stdcall Empty(VARIANT_BOOL* vb)$/;"	f	class:mtl::collection	typeref:typename:HRESULT __stdcall
EnableModeless	include/mtl/ole/control.h	/^			virtual HRESULT __stdcall EnableModeless(BOOL fEnable)$/;"	f	class:mtl::control::ole_inplace_active_obj	typeref:typename:HRESULT __stdcall
EnableModeless	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall EnableModeless(BOOL fEnable)$/;"	f	class:mtl::inplace_frame	typeref:typename:HRESULT __stdcall
EnableModeless	include/mtl/script/script.h	/^		virtual HRESULT  __stdcall EnableModeless(BOOL fEnable)$/;"	f	class:mtl::active_script	typeref:typename:HRESULT __stdcall
EnableModelessSB	include/mtl/ole/shell.h	/^			virtual HRESULT __stdcall EnableModelessSB(BOOL fEnable) override$/;"	f	class:mtl::shell::folder_view	typeref:typename:HRESULT __stdcall
EnumAdvise	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall EnumAdvise(IEnumSTATDATA** ppenumAdvise) override$/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
EnumConnectionPoints	include/mtl/ole/cp.h	/^		virtual HRESULT __stdcall EnumConnectionPoints(IEnumConnectionPoints** ppEnum) override$/;"	f	class:mtl::connection_point_container	typeref:typename:HRESULT __stdcall
EnumConnections	include/mtl/ole/cp.h	/^		virtual HRESULT __stdcall EnumConnections(IEnumConnections** ppEnum) override$/;"	f	class:mtl::connection_point	typeref:typename:HRESULT __stdcall
EnumDAdvise	include/mtl/ole/dataobj.h	/^		virtual HRESULT __stdcall EnumDAdvise(IEnumSTATDATA** ppenumAdvise) override$/;"	f	class:mtl::data_object	typeref:typename:HRESULT __stdcall
EnumElements	include/mtl/persist/stgm.h	/^			HRESULT virtual __stdcall EnumElements(DWORD reserved1, void* reserved2, DWORD reserved3, IEn/;"	f	class:mtl::ole::dummy_storage	typeref:typename:HRESULT __stdcall
EnumElements	include/mtl/persist/stream.h	/^        virtual HRESULT __stdcall EnumElements(DWORD reserved1, void* reserved2, DWORD reserved3/;"	f	class:mtl::dummy_storage	typeref:typename:HRESULT __stdcall
EnumFormatEtc	include/mtl/ole/dataobj.h	/^		virtual HRESULT __stdcall EnumFormatEtc(DWORD dwDirection, IEnumFORMATETC** ppenumFormatEtc) o/;"	f	class:mtl::data_object	typeref:typename:HRESULT __stdcall
EnumVerbs	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall EnumVerbs(IEnumOLEVERB** ppEnumOleVerb) override$/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
Enumerator	include/mtl/win/wnd.h	/^        struct Enumerator $/;"	s	function:mtl::find_child
FILL	include/mtl/win/layout.h	/^			FILL,$/;"	e	enum:mtl::layout::style
FileSniffer	include/mtl/win/enc.h	/^			FileSniffer(const char* raw_bytes, size_t len)$/;"	f	class:mtl::details::FileSniffer
FileSniffer	include/mtl/win/enc.h	/^		class FileSniffer$/;"	c	namespace:mtl::details
FindConnectionPoint	include/mtl/ole/cp.h	/^		virtual HRESULT __stdcall FindConnectionPoint(REFIID riid, IConnectionPoint** ppCP) override$/;"	f	class:mtl::connection_point_container	typeref:typename:HRESULT __stdcall
Freeze	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall Freeze(DWORD dwDrawAspect, LONG lindex, void* pvAspect, DWORD* pdwFr/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
FreezeEvents	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall FreezeEvents(BOOL bFreeze) $/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
GetAdvise	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall GetAdvise(DWORD* pAspects, DWORD* pAdvf, IAdviseSink** ppAdvSink) ov/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
GetBorder	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall GetBorder(LPRECT lprectBorder)$/;"	f	class:mtl::inplace_frame	typeref:typename:HRESULT __stdcall
GetCanonicalFormatEtc	include/mtl/ole/dataobj.h	/^		virtual HRESULT __stdcall GetCanonicalFormatEtc(FORMATETC* pformatectIn, FORMATETC* pformatetc/;"	f	class:mtl::data_object	typeref:typename:HRESULT __stdcall
GetClassID	include/mtl/persist/persist.h	/^        virtual HRESULT __stdcall GetClassID(CLSID* pClassID) override$/;"	f	class:mtl::persist_file	typeref:typename:HRESULT __stdcall
GetClassID	include/mtl/persist/persist.h	/^        virtual HRESULT __stdcall GetClassID(CLSID* pClassID) override$/;"	f	class:mtl::persist_storage	typeref:typename:HRESULT __stdcall
GetClassID	include/mtl/persist/persist.h	/^        virtual HRESULT __stdcall GetClassID(CLSID* pClassID) override$/;"	f	class:mtl::persist_stream	typeref:typename:HRESULT __stdcall
GetClassID	include/mtl/persist/persist.h	/^        virtual HRESULT __stdcall GetClassID(CLSID* pClassID) override$/;"	f	class:mtl::persistent	typeref:typename:HRESULT __stdcall
GetClassInfo	include/mtl/disp/disp.h	/^	virtual HRESULT __stdcall GetClassInfo(ITypeInfo** ppTI) override$/;"	f	class:mtl::provide_class_info	typeref:typename:HRESULT __stdcall
GetClientSite	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall GetClientSite(IOleClientSite** ppClientSite) override$/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
GetClipboardData	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall GetClipboardData(DWORD dwReserved, IDataObject** ppDataObject) overr/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
GetColorSet	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall GetColorSet(DWORD dwDrawAspect, LONG lindex, void* pvAspect, DVTARGE/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
GetConnectionInterface	include/mtl/ole/cp.h	/^		virtual HRESULT __stdcall GetConnectionInterface(IID* pIID) override$/;"	f	class:mtl::connection_point_impl	typeref:typename:HRESULT __stdcall
GetConnectionInterface	include/mtl/ole/cp.h	/^		virtual HRESULT __stdcall GetConnectionInterface(IID* pIID)$/;"	f	class:mtl::connection_point	typeref:typename:HRESULT __stdcall
GetConnectionPointContainer	include/mtl/ole/cp.h	/^		virtual HRESULT __stdcall GetConnectionPointContainer(IConnectionPointContainer** ppCPC) overr/;"	f	class:mtl::connection_point	typeref:typename:HRESULT __stdcall
GetContainer	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall GetContainer(LPOLECONTAINER FAR* ppContainer)$/;"	f	class:mtl::client_site	typeref:typename:HRESULT __stdcall
GetControlInfo	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall GetControlInfo(CONTROLINFO* pCI)$/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
GetControlWindow	include/mtl/ole/shell.h	/^			virtual HRESULT __stdcall GetControlWindow(UINT id, HWND* phwnd) override$/;"	f	class:mtl::shell::folder_view	typeref:typename:HRESULT __stdcall
GetCurFile	include/mtl/persist/persist.h	/^        virtual HRESULT __stdcall GetCurFile(LPOLESTR* ppszFileName) override$/;"	f	class:mtl::persist_file	typeref:typename:HRESULT __stdcall
GetData	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall GetData(FORMATETC* pformatetcIn, STGMEDIUM* pmedium) override$/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
GetData	include/mtl/ole/dataobj.h	/^		virtual HRESULT __stdcall GetData(FORMATETC* pformatetcIn, STGMEDIUM* pmedium) override$/;"	f	class:mtl::data_object	typeref:typename:HRESULT __stdcall
GetDataHere	include/mtl/ole/dataobj.h	/^		virtual HRESULT __stdcall GetDataHere(FORMATETC* pformatetc, STGMEDIUM* pmedium) override$/;"	f	class:mtl::data_object	typeref:typename:HRESULT __stdcall
GetDefaultMenuText	include/mtl/ole/shell.h	/^			virtual HRESULT __stdcall GetDefaultMenuText(IShellView* ppshv, LPWSTR pszText, int cchMax) o/;"	f	class:mtl::shell::folder_view	typeref:typename:HRESULT __stdcall
GetDocVersionString	include/mtl/script/script.h	/^		virtual HRESULT  __stdcall GetDocVersionString(BSTR* pbstrVersion)$/;"	f	class:mtl::active_script	typeref:typename:HRESULT __stdcall
GetExtent	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall GetExtent(DWORD dwDrawAspect, LONG lindex, DVTARGETDEVICE* ptd, LPSI/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
GetExtent	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall GetExtent(DWORD dwDrawAspect, SIZEL* psizel) override$/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
GetGUID	include/mtl/disp/disp.h	/^	virtual HRESULT __stdcall GetGUID(DWORD dwGuidKind, GUID* pGUID) override$/;"	f	class:mtl::provide_class_info	typeref:typename:HRESULT __stdcall
GetIDsOfNames	include/mtl/disp/disp.h	/^		virtual HRESULT __stdcall GetIDsOfNames(REFIID riid, LPOLESTR* rgszNames, UINT cNames, LCID lc/;"	f	class:mtl::dispatch	typeref:typename:HRESULT __stdcall
GetItemInfo	include/mtl/script/script.h	/^		virtual HRESULT  __stdcall GetItemInfo(LPCOLESTR pstrName, DWORD dwReturnMask, IUnknown** ppiu/;"	f	class:mtl::active_script	typeref:typename:HRESULT __stdcall
GetLCID	include/mtl/script/script.h	/^		virtual HRESULT  __stdcall GetLCID(LCID* plcid)$/;"	f	class:mtl::active_script	typeref:typename:HRESULT __stdcall
GetMiscStatus	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall GetMiscStatus(DWORD dwAspect, DWORD* pdwStatus) override$/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
GetMoniker	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall GetMoniker(DWORD dwAssign, DWORD dwWhichMoniker, IMoniker** ppmk) ov/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
GetMoniker	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall GetMoniker(DWORD dwAssign, DWORD dwWhichMoniker, IMoniker** ppmk)$/;"	f	class:mtl::client_site	typeref:typename:HRESULT __stdcall
GetSizeMax	include/mtl/persist/persist.h	/^        virtual HRESULT __stdcall GetSizeMax(ULARGE_INTEGER* pcbSize) override$/;"	f	class:mtl::persist_stream	typeref:typename:HRESULT __stdcall
GetTypeInfo	include/mtl/disp/disp.h	/^		virtual HRESULT __stdcall GetTypeInfo(UINT iTInfo, LCID lcid, ITypeInfo** ppTInfo) override$/;"	f	class:mtl::dispatch	typeref:typename:HRESULT __stdcall
GetTypeInfoCount	include/mtl/disp/disp.h	/^		virtual HRESULT __stdcall GetTypeInfoCount(UINT* pctinfo) override$/;"	f	class:mtl::dispatch	typeref:typename:HRESULT __stdcall
GetUserClassID	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall GetUserClassID(CLSID* pClsid) override$/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
GetUserType	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall GetUserType(DWORD dwFormOfType, LPOLESTR* pszUserType) override$/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
GetViewFlags	include/mtl/ole/shell.h	/^			virtual HRESULT __stdcall GetViewFlags(DWORD* pdwFlags) override$/;"	f	class:mtl::shell::folder_view	typeref:typename:HRESULT __stdcall
GetViewStateStream	include/mtl/ole/shell.h	/^			virtual HRESULT __stdcall GetViewStateStream(DWORD grfMode, IStream** ppStrm) override$/;"	f	class:mtl::shell::folder_view	typeref:typename:HRESULT __stdcall
GetWindow	include/mtl/ole/control.h	/^			virtual HRESULT __stdcall GetWindow(HWND* phwnd) override$/;"	f	class:mtl::control::ole_inplace_active_obj	typeref:typename:HRESULT __stdcall
GetWindow	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall GetWindow(HWND* phwnd) override$/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
GetWindow	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall GetWindow(HWND FAR* lphwnd)$/;"	f	class:mtl::client_site	typeref:typename:HRESULT __stdcall
GetWindow	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall GetWindow(HWND FAR* lphwnd)$/;"	f	class:mtl::inplace_frame	typeref:typename:HRESULT __stdcall
GetWindow	include/mtl/ole/shell.h	/^			virtual HRESULT __stdcall GetWindow(HWND* phwnd) override$/;"	f	class:mtl::shell::folder_view	typeref:typename:HRESULT __stdcall
GetWindow	include/mtl/script/script.h	/^		virtual HRESULT  __stdcall GetWindow(HWND* phwnd)$/;"	f	class:mtl::active_script	typeref:typename:HRESULT __stdcall
GetWindowContext	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall GetWindowContext(LPOLEINPLACEFRAME FAR* lplpFrame, LPOLEINPLACEUIWIN/;"	f	class:mtl::client_site	typeref:typename:HRESULT __stdcall
GiveFeedback	include/mtl/ole/dataobj.h	/^		HRESULT virtual __stdcall GiveFeedback(DWORD dwEffect)$/;"	f	class:mtl::drop_src_base	typeref:typename:HRESULT __stdcall
HIMETRIC_PER_INCH	include/mtl/ole/control.h	/^	constexpr int HIMETRIC_PER_INCH = 2540;$/;"	v	namespace:mtl	typeref:typename:int
HR	include/mtl/punk.h	/^        HR()$/;"	f	class:mtl::HR
HR	include/mtl/punk.h	/^        HR(const HRESULT hr)$/;"	f	class:mtl::HR
HR	include/mtl/punk.h	/^    class HR$/;"	c	namespace:mtl
HRESULT2WCode	include/mtl/punk.h	/^        static WORD HRESULT2WCode(HRESULT hr)$/;"	f	class:mtl::HR	typeref:typename:WORD
HandsOffStorage	include/mtl/persist/persist.h	/^        virtual HRESULT __stdcall HandsOffStorage(void) override$/;"	f	class:mtl::persist_storage	typeref:typename:HRESULT __stdcall
INPROC_SERVER_EXPORTS	include/mtl/obj/inproc.h	/^#define INPROC_SERVER_EXPORTS(/;"	d
INPROC_SERVER_SELFREG	include/mtl/obj/inproc.h	/^#define INPROC_SERVER_SELFREG(/;"	d
InPlaceDeactivate	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall InPlaceDeactivate(void) override$/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
IncludeObject	include/mtl/ole/shell.h	/^			virtual HRESULT __stdcall IncludeObject(IShellView* ppshv, PCUITEMID_CHILD pidl) override$/;"	f	class:mtl::shell::folder_view	typeref:typename:HRESULT __stdcall
InitFromData	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall InitFromData(IDataObject* pDataObject, BOOL fCreation, DWORD dwReser/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
InitNew	include/mtl/persist/persist.h	/^        virtual HRESULT __stdcall InitNew(IStorage* pStg) override$/;"	f	class:mtl::persist_storage	typeref:typename:HRESULT __stdcall
InitNew	include/mtl/persist/persist.h	/^        virtual HRESULT __stdcall InitNew(void) override$/;"	f	class:mtl::persist_stream	typeref:typename:HRESULT __stdcall
InsertMenus	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall InsertMenus(HMENU hmenuShared, LPOLEMENUGROUPWIDTHS lpMenuWidths)$/;"	f	class:mtl::inplace_frame	typeref:typename:HRESULT __stdcall
InsertMenusSB	include/mtl/ole/shell.h	/^			virtual HRESULT __stdcall InsertMenusSB(HMENU hmenuShared, LPOLEMENUGROUPWIDTHS lpMenuWidths)/;"	f	class:mtl::shell::folder_view	typeref:typename:HRESULT __stdcall
InterfaceSupportsErrorInfo	include/mtl/disp/disp.h	/^	virtual HRESULT __stdcall InterfaceSupportsErrorInfo(REFIID riid) override$/;"	f	class:mtl::support_error_info	typeref:typename:HRESULT __stdcall
Invoke	include/mtl/disp/disp.h	/^		virtual HRESULT __stdcall Invoke(DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DIS/;"	f	class:mtl::dispatch	typeref:typename:HRESULT __stdcall
Invoke	include/mtl/edge/chrome.h	/^			HRESULT __stdcall Invoke(Args... args)$/;"	f	class:mtl::detail::callback	typeref:typename:HRESULT __stdcall
Invoke	include/mtl/edge/chrome.h	/^			HRESULT __stdcall Invoke(HRESULT hr, ICoreWebView2Controller* controller)$/;"	f	class:mtl::detail::webview_controller_callback	typeref:typename:HRESULT __stdcall
Invoke	include/mtl/edge/chrome.h	/^		HRESULT __stdcall Invoke(HRESULT, ICoreWebView2Environment* env)$/;"	f	class:mtl::chrome_edge	typeref:typename:HRESULT __stdcall
IsDirty	include/mtl/persist/persist.h	/^        virtual HRESULT __stdcall IsDirty(void) override$/;"	f	class:mtl::persist_file	typeref:typename:HRESULT __stdcall
IsDirty	include/mtl/persist/persist.h	/^        virtual HRESULT __stdcall IsDirty(void) override$/;"	f	class:mtl::persist_storage	typeref:typename:HRESULT __stdcall
IsDirty	include/mtl/persist/persist.h	/^        virtual HRESULT __stdcall IsDirty(void) override$/;"	f	class:mtl::persist_stream	typeref:typename:HRESULT __stdcall
IsDirty	include/mtl/persist/persist.h	/^        virtual HRESULT __stdcall IsDirty(void) override$/;"	f	class:mtl::persistent	typeref:typename:HRESULT __stdcall
IsUpToDate	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall IsUpToDate(void) override$/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
Item	include/mtl/obj/collection.h	/^        virtual HRESULT __stdcall Item(long index, BSTR* value)$/;"	f	class:mtl::bstr_collection	typeref:typename:HRESULT __stdcall
Item	include/mtl/obj/collection.h	/^        virtual HRESULT __stdcall Item(long index, IDispatch** value)$/;"	f	class:mtl::disp_collection	typeref:typename:HRESULT __stdcall
Item	include/mtl/obj/collection.h	/^        virtual HRESULT __stdcall Item(long index, IUnknown** value)$/;"	f	class:mtl::unknown_collection	typeref:typename:HRESULT __stdcall
Item	include/mtl/obj/collection.h	/^        virtual HRESULT __stdcall Item(long index, VARIANT* value)$/;"	f	class:mtl::variant_collection	typeref:typename:HRESULT __stdcall
Item	include/mtl/obj/collection.h	/^        virtual HRESULT __stdcall Item(long index, long* value)$/;"	f	class:mtl::long_collection	typeref:typename:HRESULT __stdcall
JSON	include/mtl/persist/json.h	/^	namespace JSON {$/;"	n	namespace:mtl
LOCAL_SERVER	include/mtl/obj/localserver.h	/^#define LOCAL_SERVER(/;"	d
LOCAL_SERVER_SELFREG	include/mtl/obj/localserver.h	/^#define LOCAL_SERVER_SELFREG(/;"	d
Load	include/mtl/persist/persist.h	/^        virtual HRESULT __stdcall Load(IStorage* pStg) override$/;"	f	class:mtl::persist_storage	typeref:typename:HRESULT __stdcall
Load	include/mtl/persist/persist.h	/^        virtual HRESULT __stdcall Load(IStream* pStm) override$/;"	f	class:mtl::persist_stream	typeref:typename:HRESULT __stdcall
Load	include/mtl/persist/persist.h	/^        virtual HRESULT __stdcall Load(LPCOLESTR pszFileName, DWORD dwMode) override$/;"	f	class:mtl::persist_file	typeref:typename:HRESULT __stdcall
LockServer	include/mtl/obj/obj.h	/^		virtual HRESULT __stdcall LockServer(BOOL fLock) override$/;"	f	class:mtl::class_object	typeref:typename:HRESULT __stdcall
MAP_LOGHIM_TO_PIX	include/mtl/ole/control.h	/^	inline int MAP_LOGHIM_TO_PIX(int x, int ppli)$/;"	f	namespace:mtl	typeref:typename:int
MAP_PIX_TO_LOGHIM	include/mtl/ole/control.h	/^	inline int MAP_PIX_TO_LOGHIM(int x, int ppli)$/;"	f	namespace:mtl	typeref:typename:int
MTA	include/mtl/punk.h	/^        MTA()$/;"	f	class:mtl::MTA
MTA	include/mtl/punk.h	/^        MTA(MTA&& rhs)$/;"	f	class:mtl::MTA
MTA	include/mtl/punk.h	/^    class MTA$/;"	c	namespace:mtl
MTL_ID	include/mtl/ole/img.h	/^#define MTL_ID(/;"	d
MoveElementTo	include/mtl/persist/stgm.h	/^			HRESULT virtual __stdcall MoveElementTo(const OLECHAR* pwcsName, IStorage* pstgDest, const OL/;"	f	class:mtl::ole::dummy_storage	typeref:typename:HRESULT __stdcall
MoveElementTo	include/mtl/persist/stream.h	/^        virtual HRESULT __stdcall MoveElementTo(const OLECHAR* pwcsName, IStorage* pstgDest, con/;"	f	class:mtl::dummy_storage	typeref:typename:HRESULT __stdcall
MsxmlDocument	include/mtl/persist/xml.h	/^		MsxmlDocument()$/;"	f	class:mtl::MsxmlDocument
MsxmlDocument	include/mtl/persist/xml.h	/^		MsxmlDocument(const CLSID& clsid)$/;"	f	class:mtl::MsxmlDocument
MsxmlDocument	include/mtl/persist/xml.h	/^		MsxmlDocument(const std::string& xml, const CLSID& clsid = CLSID_DOMDocument60)$/;"	f	class:mtl::MsxmlDocument
MsxmlDocument	include/mtl/persist/xml.h	/^		MsxmlDocument(const std::wstring& xml, const CLSID& clsid = CLSID_DOMDocument60)$/;"	f	class:mtl::MsxmlDocument
MsxmlDocument	include/mtl/persist/xml.h	/^	class MsxmlDocument$/;"	c	namespace:mtl
NOMINMAX	include/mtl/sdk.h	/^#define NOMINMAX$/;"	d
NONE	include/mtl/win/layout.h	/^			NONE,$/;"	e	enum:mtl::layout::style
NORTH	include/mtl/win/layout.h	/^			NORTH,$/;"	e	enum:mtl::layout::style
Next	include/mtl/obj/enum.h	/^		virtual HRESULT __stdcall Next(ULONG celt, IUnknown** rgelt, ULONG* pceltFetched) override$/;"	f	class:mtl::enum_unknown	typeref:typename:HRESULT __stdcall
Next	include/mtl/obj/enum.h	/^		virtual HRESULT __stdcall Next(ULONG celt, VARIANT* rgelt, ULONG* pceltFetched) override$/;"	f	class:mtl::enum_variant	typeref:typename:HRESULT __stdcall
Next	include/mtl/ole/cp.h	/^		virtual HRESULT __stdcall Next(ULONG celt, LPCONNECTIONPOINT* rgelt, ULONG* pceltFetched) over/;"	f	class:mtl::enum_connection_point	typeref:typename:HRESULT __stdcall
Notify	include/mtl/ole/shell.h	/^			virtual HRESULT __stdcall Notify(IShellView* ppshv, DWORD dwNotifyType) override$/;"	f	class:mtl::shell::folder_view	typeref:typename:HRESULT __stdcall
OLE	include/mtl/punk.h	/^        OLE()$/;"	f	class:mtl::OLE
OLE	include/mtl/punk.h	/^        OLE(OLE&& rhs)$/;"	f	class:mtl::OLE
OLE	include/mtl/punk.h	/^    class OLE$/;"	c	namespace:mtl
OleVerb	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall OleVerb(LONG iVerb,$/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
OleVerb_Hide	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall OleVerb_Hide(LONG iVerb, LPMSG lpmsg, IOleClientSite* pActiveSite, L/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
OleVerb_InplaceActivate	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall OleVerb_InplaceActivate(LONG iVerb, LPMSG lpmsg, IOleClientSite* pAc/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
OleVerb_Open	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall OleVerb_Open(LONG iVerb, LPMSG lpmsg, IOleClientSite* pActiveSite, L/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
OleVerb_Primary	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall OleVerb_Primary(LONG iVerb, LPMSG lpmsg, IOleClientSite* pActiveSite/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
OleVerb_Properties	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall OleVerb_Properties(LONG iVerb, LPMSG lpmsg, IOleClientSite* pActiveS/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
OleVerb_Show	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall OleVerb_Show(LONG iVerb, LPMSG lpmsg, IOleClientSite* pActiveSite, L/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
OleVerb_UIActivate	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall OleVerb_UIActivate(LONG iVerb, LPMSG lpmsg, IOleClientSite* pActiveS/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
OnAfterContextMenu	include/mtl/ole/explorer.h	/^		HRESULT virtual __stdcall  OnAfterContextMenu(IShellItem* \/*psi*\/, IContextMenu* \/*pcmIn*\//;"	f	class:mtl::explorer_tree	typeref:typename:HRESULT __stdcall
OnAfterExpand	include/mtl/ole/explorer.h	/^		HRESULT virtual __stdcall  OnAfterExpand(IShellItem* \/*psi*\/) { return S_OK; }$/;"	f	class:mtl::explorer_tree	typeref:typename:HRESULT __stdcall
OnAmbientPropertyChange	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall OnAmbientPropertyChange( DISPID dispID) $/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
OnBeforeContextMenu	include/mtl/ole/explorer.h	/^		HRESULT virtual __stdcall  OnBeforeContextMenu(IShellItem* \/*psi*\/, REFIID \/*riid*\/, void*/;"	f	class:mtl::explorer_tree	typeref:typename:HRESULT __stdcall
OnBeforeExpand	include/mtl/ole/explorer.h	/^		HRESULT virtual __stdcall  OnBeforeExpand(IShellItem* \/*psi*\/) { return S_OK; }$/;"	f	class:mtl::explorer_tree	typeref:typename:HRESULT __stdcall
OnBeforeItemDelete	include/mtl/ole/explorer.h	/^		HRESULT virtual __stdcall  OnBeforeItemDelete(IShellItem* \/*psi*\/) { return E_NOTIMPL; }$/;"	f	class:mtl::explorer_tree	typeref:typename:HRESULT __stdcall
OnBeforeStateImageChange	include/mtl/ole/explorer.h	/^		HRESULT virtual __stdcall  OnBeforeStateImageChange(IShellItem* \/*psi*\/) { return S_OK; }$/;"	f	class:mtl::explorer_tree	typeref:typename:HRESULT __stdcall
OnBeginLabelEdit	include/mtl/ole/explorer.h	/^		HRESULT virtual __stdcall  OnBeginLabelEdit(IShellItem* \/*psi*\/) { return S_OK; }$/;"	f	class:mtl::explorer_tree	typeref:typename:HRESULT __stdcall
OnDefaultCommand	include/mtl/ole/shell.h	/^			virtual HRESULT __stdcall OnDefaultCommand(IShellView* ppshv) override$/;"	f	class:mtl::shell::folder_view	typeref:typename:HRESULT __stdcall
OnDocWindowActivate	include/mtl/ole/control.h	/^			virtual HRESULT __stdcall OnDocWindowActivate(BOOL fActivate)$/;"	f	class:mtl::control::ole_inplace_active_obj	typeref:typename:HRESULT __stdcall
OnEndLabelEdit	include/mtl/ole/explorer.h	/^		HRESULT virtual __stdcall  OnEndLabelEdit(IShellItem* \/*psi*\/) { return S_OK; }$/;"	f	class:mtl::explorer_tree	typeref:typename:HRESULT __stdcall
OnEnterScript	include/mtl/script/script.h	/^		virtual HRESULT  __stdcall OnEnterScript(void)$/;"	f	class:mtl::active_script	typeref:typename:HRESULT __stdcall
OnFrameWindowActivate	include/mtl/ole/control.h	/^			virtual HRESULT __stdcall OnFrameWindowActivate(BOOL fActivate)$/;"	f	class:mtl::control::ole_inplace_active_obj	typeref:typename:HRESULT __stdcall
OnGetDefaultIconIndex	include/mtl/ole/explorer.h	/^		HRESULT virtual __stdcall  OnGetDefaultIconIndex(IShellItem* \/*psi*\/, int* \/*piDefaultIcon*/;"	f	class:mtl::explorer_tree	typeref:typename:HRESULT __stdcall
OnGetToolTip	include/mtl/ole/explorer.h	/^		HRESULT virtual __stdcall  OnGetToolTip(IShellItem* \/*psi*\/, LPWSTR \/*pszTip*\/, int \/*cch/;"	f	class:mtl::explorer_tree	typeref:typename:HRESULT __stdcall
OnInPlaceActivate	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall OnInPlaceActivate()$/;"	f	class:mtl::client_site	typeref:typename:HRESULT __stdcall
OnInPlaceDeactivate	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall OnInPlaceDeactivate()$/;"	f	class:mtl::client_site	typeref:typename:HRESULT __stdcall
OnItemAdded	include/mtl/ole/explorer.h	/^		HRESULT virtual __stdcall  OnItemAdded(IShellItem* \/*psi*\/, BOOL \/*fIsRoot*\/) { return E_N/;"	f	class:mtl::explorer_tree	typeref:typename:HRESULT __stdcall
OnItemClick	include/mtl/ole/explorer.h	/^		HRESULT virtual __stdcall  OnItemClick(IShellItem* psi, NSTCEHITTEST nstceHitTest, NSTCECLICKT/;"	f	class:mtl::explorer_tree	typeref:typename:HRESULT __stdcall
OnItemDeleted	include/mtl/ole/explorer.h	/^		HRESULT virtual __stdcall  OnItemDeleted(IShellItem* \/*psi*\/, BOOL \/*fIsRoot*\/) { return E/;"	f	class:mtl::explorer_tree	typeref:typename:HRESULT __stdcall
OnItemStateChanged	include/mtl/ole/explorer.h	/^		HRESULT virtual __stdcall  OnItemStateChanged(IShellItem* \/*psi*\/, NSTCITEMSTATE \/*nstcisMa/;"	f	class:mtl::explorer_tree	typeref:typename:HRESULT __stdcall
OnItemStateChanging	include/mtl/ole/explorer.h	/^		HRESULT virtual __stdcall  OnItemStateChanging(IShellItem* \/*psi*\/, NSTCITEMSTATE \/*nstcisM/;"	f	class:mtl::explorer_tree	typeref:typename:HRESULT __stdcall
OnKeyboardInput	include/mtl/ole/explorer.h	/^		HRESULT virtual __stdcall  OnKeyboardInput(UINT \/*uMsg*\/, WPARAM \/*wParam*\/, LPARAM \/*lPa/;"	f	class:mtl::explorer_tree	typeref:typename:HRESULT __stdcall
OnLeaveScript	include/mtl/script/script.h	/^		virtual HRESULT  __stdcall OnLeaveScript(void)$/;"	f	class:mtl::active_script	typeref:typename:HRESULT __stdcall
OnMnemonic	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall OnMnemonic(MSG* pMsg) $/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
OnPosRectChange	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall OnPosRectChange(LPCRECT lprcPosRect)$/;"	f	class:mtl::client_site	typeref:typename:HRESULT __stdcall
OnPropertyItemCommit	include/mtl/ole/explorer.h	/^		HRESULT virtual __stdcall  OnPropertyItemCommit(IShellItem* \/*psi*\/) { return S_FALSE; }$/;"	f	class:mtl::explorer_tree	typeref:typename:HRESULT __stdcall
OnScriptError	include/mtl/script/script.h	/^		virtual HRESULT  __stdcall OnScriptError(IActiveScriptError* pscripterror)$/;"	f	class:mtl::active_script	typeref:typename:HRESULT __stdcall
OnScriptTerminate	include/mtl/script/script.h	/^		virtual HRESULT  __stdcall OnScriptTerminate(const VARIANT* pvarResult, const EXCEPINFO* pexce/;"	f	class:mtl::active_script	typeref:typename:HRESULT __stdcall
OnSelectionChanged	include/mtl/ole/explorer.h	/^		HRESULT __stdcall OnSelectionChanged(IShellItemArray* psiaSelection) override$/;"	f	class:mtl::explorer_tree	typeref:typename:HRESULT __stdcall
OnShowWindow	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall OnShowWindow(BOOL fShow)$/;"	f	class:mtl::client_site	typeref:typename:HRESULT __stdcall
OnStateChange	include/mtl/ole/shell.h	/^			virtual HRESULT __stdcall OnStateChange(IShellView* ppshv, ULONG uChange) override$/;"	f	class:mtl::shell::folder_view	typeref:typename:HRESULT __stdcall
OnStateChange	include/mtl/script/script.h	/^		virtual HRESULT  __stdcall OnStateChange(SCRIPTSTATE ssScriptState)$/;"	f	class:mtl::active_script	typeref:typename:HRESULT __stdcall
OnUIActivate	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall OnUIActivate()$/;"	f	class:mtl::client_site	typeref:typename:HRESULT __stdcall
OnUIDeactivate	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall OnUIDeactivate(BOOL fUndoable)$/;"	f	class:mtl::client_site	typeref:typename:HRESULT __stdcall
OnViewWindowActive	include/mtl/ole/shell.h	/^			virtual HRESULT __stdcall OnViewWindowActive(IShellView* pshv) override$/;"	f	class:mtl::shell::folder_view	typeref:typename:HRESULT __stdcall
OpenStorage	include/mtl/persist/stgm.h	/^			HRESULT virtual __stdcall OpenStorage(const WCHAR* pwcsName, IStorage* pstgPriority, DWORD gr/;"	f	class:mtl::ole::dummy_storage	typeref:typename:HRESULT __stdcall
OpenStorage	include/mtl/persist/stream.h	/^        virtual HRESULT __stdcall OpenStorage(const OLECHAR* pwcsName, IStorage* pstgPriority, D/;"	f	class:mtl::dummy_storage	typeref:typename:HRESULT __stdcall
OpenStream	include/mtl/persist/stgm.h	/^			HRESULT virtual __stdcall OpenStream(const WCHAR* pwcsName, void* reserved1, DWORD grfMode, D/;"	f	class:mtl::ole::dummy_storage	typeref:typename:HRESULT __stdcall
OpenStream	include/mtl/persist/stream.h	/^        virtual HRESULT __stdcall OpenStream(const OLECHAR* pwcsName, void* reserved1, DWORD grf/;"	f	class:mtl::dummy_storage	typeref:typename:HRESULT __stdcall
ParseEx	include/mtl/persist/json.h	/^			ParseEx(const std::string& s)$/;"	f	class:mtl::JSON::ParseEx
ParseEx	include/mtl/persist/json.h	/^		class ParseEx : public std::exception$/;"	c	namespace:mtl::JSON
PipeReadOverlap	include/mtl/win32/pipe.h	/^            PipeReadOverlap()$/;"	f	class:mtl::detail::PipeReadOverlap
PipeReadOverlap	include/mtl/win32/pipe.h	/^        class PipeReadOverlap : public OVERLAPPED$/;"	c	namespace:mtl::detail
PipeWriteOverlap	include/mtl/win32/pipe.h	/^            PipeWriteOverlap()$/;"	f	class:mtl::detail::PipeWriteOverlap
PipeWriteOverlap	include/mtl/win32/pipe.h	/^        class PipeWriteOverlap : public OVERLAPPED$/;"	c	namespace:mtl::detail
Put	include/mtl/obj/collection.h	/^        virtual HRESULT __stdcall Put(long index, BSTR value)$/;"	f	class:mtl::bstr_collection	typeref:typename:HRESULT __stdcall
Put	include/mtl/obj/collection.h	/^        virtual HRESULT __stdcall Put(long index, IDispatch* value)$/;"	f	class:mtl::disp_collection	typeref:typename:HRESULT __stdcall
Put	include/mtl/obj/collection.h	/^        virtual HRESULT __stdcall Put(long index, IUnknown* value)$/;"	f	class:mtl::unknown_collection	typeref:typename:HRESULT __stdcall
Put	include/mtl/obj/collection.h	/^        virtual HRESULT __stdcall Put(long index, VARIANT value)$/;"	f	class:mtl::variant_collection	typeref:typename:HRESULT __stdcall
Put	include/mtl/obj/collection.h	/^        virtual HRESULT __stdcall Put(long index, long value)$/;"	f	class:mtl::long_collection	typeref:typename:HRESULT __stdcall
QueryActiveShellView	include/mtl/ole/shell.h	/^			virtual HRESULT __stdcall QueryActiveShellView(IShellView** ppshv) override$/;"	f	class:mtl::shell::folder_view	typeref:typename:HRESULT __stdcall
QueryContinueDrag	include/mtl/ole/dataobj.h	/^		HRESULT virtual __stdcall QueryContinueDrag(BOOL fEscapePressed, DWORD grfKeyState)$/;"	f	class:mtl::drop_src_base	typeref:typename:HRESULT __stdcall
QueryGetData	include/mtl/ole/dataobj.h	/^		virtual HRESULT __stdcall QueryGetData(FORMATETC* pformatetc) override$/;"	f	class:mtl::data_object	typeref:typename:HRESULT __stdcall
QueryInterface	include/mtl/disp/disp.h	/^			static HRESULT __stdcall QueryInterface(T* that, REFIID riid, void** ppvObject)$/;"	f	class:mtl::details::interfaces	typeref:typename:HRESULT __stdcall
QueryInterface	include/mtl/obj/collection.h	/^            static HRESULT __stdcall QueryInterface(T* that, REFIID riid, void** ppvObject)$/;"	f	class:mtl::details::interfaces	typeref:typename:HRESULT __stdcall
QueryInterface	include/mtl/obj/impl.h	/^			static HRESULT __stdcall QueryInterface(T* that, REFIID riid, void** ppvObject)$/;"	f	class:mtl::details::interfaces	typeref:typename:HRESULT __stdcall
QueryInterface	include/mtl/obj/impl.h	/^		virtual HRESULT __stdcall QueryInterface(REFIID riid, void** ppvObject)$/;"	f	class:mtl::aggregate	typeref:typename:HRESULT __stdcall
QueryInterface	include/mtl/obj/impl.h	/^		virtual HRESULT __stdcall QueryInterface(REFIID riid, void** ppvObject)$/;"	f	class:mtl::implements	typeref:typename:HRESULT __stdcall
QueryInterface	include/mtl/ole/async.h	/^            HRESULT __stdcall QueryInterface(REFIID riid, void** ppvObject) override$/;"	f	class:mtl::details::call_object	typeref:typename:HRESULT __stdcall
QueryInterface	include/mtl/ole/control.h	/^			static HRESULT __stdcall QueryInterface(T* that, REFIID riid, void** ppvObject)$/;"	f	class:mtl::details::interfaces	typeref:typename:HRESULT __stdcall
QueryInterface	include/mtl/ole/cp.h	/^			static HRESULT __stdcall QueryInterface(T* that, REFIID riid, void** ppvObject)$/;"	f	class:mtl::details::interfaces	typeref:typename:HRESULT __stdcall
QueryInterface	include/mtl/ole/dataobj.h	/^			static HRESULT __stdcall QueryInterface(T* that, REFIID riid, void** ppvObject)$/;"	f	class:mtl::details::interfaces	typeref:typename:HRESULT __stdcall
QueryInterface	include/mtl/persist/persist.h	/^            static HRESULT __stdcall QueryInterface(T* that, REFIID riid, void** ppvObject)$/;"	f	class:mtl::details::interfaces	typeref:typename:HRESULT __stdcall
QueryService	include/mtl/ole/explorer.h	/^		HRESULT __stdcall QueryService(REFGUID \/*guidService*\/, REFIID riid, void** ppv) override$/;"	f	class:mtl::explorer_tree	typeref:typename:HRESULT __stdcall
QueryService	include/mtl/ole/shell.h	/^			virtual HRESULT __stdcall QueryService(REFGUID guidService, REFIID riid, void** ppv) override$/;"	f	class:mtl::shell::folder_view	typeref:typename:HRESULT __stdcall
ReactivateAndUndo	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall ReactivateAndUndo(void) override$/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
ReadOverLap	include/mtl/win32/io.h	/^            ReadOverLap(HANDLE handle, unsigned long long size)$/;"	f	class:mtl::detail::ReadOverLap
ReadOverLap	include/mtl/win32/io.h	/^        class ReadOverLap : public OVERLAPPED$/;"	c	namespace:mtl::detail
Release	include/mtl/obj/impl.h	/^		virtual ULONG __stdcall Release(void) override$/;"	f	class:mtl::implements	typeref:typename:ULONG __stdcall
Release	include/mtl/obj/obj.h	/^		virtual ULONG __stdcall Release(void) override$/;"	f	class:mtl::class_object	typeref:typename:ULONG __stdcall
Release	include/mtl/punk.h	/^            virtual ULONG __stdcall Release(void) override$/;"	f	class:mtl::details::protect_refcnt	typeref:typename:ULONG __stdcall
RemoveMenus	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall RemoveMenus(HMENU hmenuShared)$/;"	f	class:mtl::inplace_frame	typeref:typename:HRESULT __stdcall
RemoveMenusSB	include/mtl/ole/shell.h	/^			virtual HRESULT __stdcall RemoveMenusSB(HMENU hmenuShared) override$/;"	f	class:mtl::shell::folder_view	typeref:typename:HRESULT __stdcall
RenameElement	include/mtl/persist/stgm.h	/^			HRESULT virtual __stdcall RenameElement(const WCHAR* pwcsOldName, const WCHAR* pwcsNewName)$/;"	f	class:mtl::ole::dummy_storage	typeref:typename:HRESULT __stdcall
RenameElement	include/mtl/persist/stream.h	/^        virtual HRESULT __stdcall RenameElement(const OLECHAR* pwcsOldName, const OLECHAR* pwcsN/;"	f	class:mtl::dummy_storage	typeref:typename:HRESULT __stdcall
RequestBorderSpace	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall RequestBorderSpace(LPCBORDERWIDTHS pborderwidths)$/;"	f	class:mtl::inplace_frame	typeref:typename:HRESULT __stdcall
RequestNewObjectLayout	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall RequestNewObjectLayout()$/;"	f	class:mtl::client_site	typeref:typename:HRESULT __stdcall
Reset	include/mtl/obj/enum.h	/^		virtual HRESULT __stdcall Reset(void) override$/;"	f	class:mtl::enum_unknown	typeref:typename:HRESULT __stdcall
Reset	include/mtl/obj/enum.h	/^		virtual HRESULT __stdcall Reset(void) override$/;"	f	class:mtl::enum_variant	typeref:typename:HRESULT __stdcall
Reset	include/mtl/ole/async.h	/^            virtual HRESULT __stdcall Reset(void) override$/;"	f	class:mtl::details::call_object	typeref:typename:HRESULT __stdcall
Reset	include/mtl/ole/cp.h	/^		virtual HRESULT __stdcall Reset(void) override$/;"	f	class:mtl::enum_connection_point	typeref:typename:HRESULT __stdcall
ResizeBorder	include/mtl/ole/control.h	/^			virtual HRESULT __stdcall ResizeBorder(LPCRECT prcBorder, IOleInPlaceUIWindow* pUIWindow, BOO/;"	f	class:mtl::control::ole_inplace_active_obj	typeref:typename:HRESULT __stdcall
Revert	include/mtl/persist/stgm.h	/^			HRESULT virtual __stdcall Revert()$/;"	f	class:mtl::ole::dummy_storage	typeref:typename:HRESULT __stdcall
Revert	include/mtl/persist/stream.h	/^        virtual HRESULT __stdcall Revert(void) override$/;"	f	class:mtl::dummy_storage	typeref:typename:HRESULT __stdcall
SCIDOC	include/mtl/scintilla/sci.h	/^	struct SCIDOC {};$/;"	s	class:mtl::scintilla_wnd
SOUTH	include/mtl/win/layout.h	/^			SOUTH,$/;"	e	enum:mtl::layout::style
STA	include/mtl/punk.h	/^        STA()$/;"	f	class:mtl::STA
STA	include/mtl/punk.h	/^        STA(STA&& rhs)$/;"	f	class:mtl::STA
STA	include/mtl/punk.h	/^    class STA$/;"	c	namespace:mtl
Save	include/mtl/persist/persist.h	/^        virtual HRESULT __stdcall Save(IStorage* pStgSave, BOOL fSameAsLoad) override$/;"	f	class:mtl::persist_storage	typeref:typename:HRESULT __stdcall
Save	include/mtl/persist/persist.h	/^        virtual HRESULT __stdcall Save(IStream* pStm, BOOL fClearDirty) override$/;"	f	class:mtl::persist_stream	typeref:typename:HRESULT __stdcall
Save	include/mtl/persist/persist.h	/^        virtual HRESULT __stdcall Save(IStream* pStm, BOOL fClearDirty) override$/;"	f	class:mtl::persistent	typeref:typename:HRESULT __stdcall
Save	include/mtl/persist/persist.h	/^        virtual HRESULT __stdcall Save(LPCOLESTR pszFileName, BOOL fRemember) override$/;"	f	class:mtl::persist_file	typeref:typename:HRESULT __stdcall
SaveCompleted	include/mtl/persist/persist.h	/^        virtual HRESULT __stdcall SaveCompleted(IStorage* pStgNew) override$/;"	f	class:mtl::persist_storage	typeref:typename:HRESULT __stdcall
SaveCompleted	include/mtl/persist/persist.h	/^        virtual HRESULT __stdcall SaveCompleted(LPCOLESTR pszFileName) override$/;"	f	class:mtl::persist_file	typeref:typename:HRESULT __stdcall
SaveObject	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall SaveObject()$/;"	f	class:mtl::client_site	typeref:typename:HRESULT __stdcall
SciDoc	include/mtl/scintilla/sci.h	/^		SciDoc()$/;"	f	class:mtl::scintilla_wnd::SciDoc
SciDoc	include/mtl/scintilla/sci.h	/^		SciDoc(HWND hWnd)$/;"	f	class:mtl::scintilla_wnd::SciDoc
SciDoc	include/mtl/scintilla/sci.h	/^		SciDoc(HWND hWnd, SCIDOC* doc)$/;"	f	class:mtl::scintilla_wnd::SciDoc
SciDoc	include/mtl/scintilla/sci.h	/^		SciDoc(SciDoc&& rhs)$/;"	f	class:mtl::scintilla_wnd::SciDoc
SciDoc	include/mtl/scintilla/sci.h	/^		SciDoc(const SciDoc& rhs)$/;"	f	class:mtl::scintilla_wnd::SciDoc
SciDoc	include/mtl/scintilla/sci.h	/^	class SciDoc$/;"	c	class:mtl::scintilla_wnd
Scroll	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall Scroll(SIZE scrollExtent)$/;"	f	class:mtl::client_site	typeref:typename:HRESULT __stdcall
SendControlMsg	include/mtl/ole/shell.h	/^			virtual HRESULT __stdcall SendControlMsg(UINT id, UINT uMsg, WPARAM wParam, LPARAM lParam, LR/;"	f	class:mtl::shell::folder_view	typeref:typename:HRESULT __stdcall
SetActiveObject	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall SetActiveObject(IOleInPlaceActiveObject* pActiveObject, LPCOLESTR ps/;"	f	class:mtl::inplace_frame	typeref:typename:HRESULT __stdcall
SetAdvise	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall SetAdvise(DWORD aspects, DWORD advf, IAdviseSink* pAdvSink) override$/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
SetBorderSpace	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall SetBorderSpace(LPCBORDERWIDTHS pborderwidths)$/;"	f	class:mtl::inplace_frame	typeref:typename:HRESULT __stdcall
SetClass	include/mtl/persist/stgm.h	/^			HRESULT virtual __stdcall SetClass(REFCLSID clsid)$/;"	f	class:mtl::ole::dummy_storage	typeref:typename:HRESULT __stdcall
SetClass	include/mtl/persist/stream.h	/^        virtual HRESULT __stdcall SetClass(REFCLSID clsid) override$/;"	f	class:mtl::dummy_storage	typeref:typename:HRESULT __stdcall
SetClientSite	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall SetClientSite(IOleClientSite* pClientSite) override$/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
SetColorScheme	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall SetColorScheme(LOGPALETTE* pLogpal) override$/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
SetData	include/mtl/ole/dataobj.h	/^			HRESULT __stdcall SetData(FORMATETC* pFormatetc, STGMEDIUM* pmedium, BOOL fRelease)$/;"	f	class:mtl::shell::data_object	typeref:typename:HRESULT __stdcall
SetData	include/mtl/ole/dataobj.h	/^		virtual HRESULT __stdcall SetData(FORMATETC* pformatetc, STGMEDIUM* pmedium, BOOL fRelease) ov/;"	f	class:mtl::data_object	typeref:typename:HRESULT __stdcall
SetElementTimes	include/mtl/persist/stgm.h	/^			HRESULT virtual __stdcall SetElementTimes(const WCHAR* pwcsName, FILETIME const* pctime, FILE/;"	f	class:mtl::ole::dummy_storage	typeref:typename:HRESULT __stdcall
SetElementTimes	include/mtl/persist/stream.h	/^        virtual HRESULT __stdcall SetElementTimes(const OLECHAR* pwcsName, const FILETIME* pctim/;"	f	class:mtl::dummy_storage	typeref:typename:HRESULT __stdcall
SetExtent	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall SetExtent(DWORD dwDrawAspect, SIZEL* psizel) override$/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
SetHostNames	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall SetHostNames(LPCOLESTR szContainerApp, LPCOLESTR szContainerObj) ove/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
SetMenu	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall SetMenu(HMENU hmenuShared, HOLEMENU holemenu, HWND hwndActiveObject)$/;"	f	class:mtl::inplace_frame	typeref:typename:HRESULT __stdcall
SetMenuSB	include/mtl/ole/shell.h	/^			virtual HRESULT __stdcall SetMenuSB(HMENU hmenuShared, HOLEMENU holemenuRes, HWND hwndActiveO/;"	f	class:mtl::shell::folder_view	typeref:typename:HRESULT __stdcall
SetMoniker	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall SetMoniker(DWORD dwWhichMoniker, IMoniker* pmk) override$/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
SetObjectRects	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall SetObjectRects(LPCRECT lprcPosRect, LPCRECT lprcClipRect) override$/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
SetStateBits	include/mtl/persist/stgm.h	/^			HRESULT virtual __stdcall SetStateBits(DWORD grfStateBits, DWORD grfMask)$/;"	f	class:mtl::ole::dummy_storage	typeref:typename:HRESULT __stdcall
SetStateBits	include/mtl/persist/stream.h	/^        virtual HRESULT __stdcall SetStateBits(DWORD grfStateBits, DWORD grfMask) override$/;"	f	class:mtl::dummy_storage	typeref:typename:HRESULT __stdcall
SetStatusText	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall SetStatusText(LPCOLESTR pszStatusText)$/;"	f	class:mtl::inplace_frame	typeref:typename:HRESULT __stdcall
SetStatusTextSB	include/mtl/ole/shell.h	/^			virtual HRESULT __stdcall SetStatusTextSB(LPCWSTR pszStatusText) override$/;"	f	class:mtl::shell::folder_view	typeref:typename:HRESULT __stdcall
SetToolbarItems	include/mtl/ole/shell.h	/^			virtual HRESULT __stdcall SetToolbarItems(LPTBBUTTONSB lpButtons, UINT nButtons, UINT uFlags)/;"	f	class:mtl::shell::folder_view	typeref:typename:HRESULT __stdcall
ShowContextMenu	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall ShowContextMenu(DWORD dwID, POINT* ppt, IUnknown* pcmdtReserved, IDi/;"	f	class:mtl::client_site	typeref:typename:HRESULT __stdcall
ShowObject	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall ShowObject()$/;"	f	class:mtl::client_site	typeref:typename:HRESULT __stdcall
Signal	include/mtl/ole/async.h	/^            virtual HRESULT __stdcall Signal(void) override$/;"	f	class:mtl::details::call_object	typeref:typename:HRESULT __stdcall
Skip	include/mtl/obj/enum.h	/^		virtual HRESULT __stdcall Skip(ULONG celt) override$/;"	f	class:mtl::enum_unknown	typeref:typename:HRESULT __stdcall
Skip	include/mtl/obj/enum.h	/^		virtual HRESULT __stdcall Skip(ULONG celt) override$/;"	f	class:mtl::enum_variant	typeref:typename:HRESULT __stdcall
Skip	include/mtl/ole/cp.h	/^		virtual HRESULT __stdcall Skip(ULONG celt) override$/;"	f	class:mtl::enum_connection_point	typeref:typename:HRESULT __stdcall
Stat	include/mtl/persist/stgm.h	/^			HRESULT virtual __stdcall Stat(STATSTG* pstatstg, DWORD grfStatFlag)$/;"	f	class:mtl::ole::dummy_storage	typeref:typename:HRESULT __stdcall
Stat	include/mtl/persist/stream.h	/^        virtual HRESULT __stdcall Stat(STATSTG* pstatstg, DWORD grfStatFlag) override$/;"	f	class:mtl::dummy_storage	typeref:typename:HRESULT __stdcall
TranslateAccelerator	include/mtl/ole/control.h	/^			virtual HRESULT __stdcall TranslateAccelerator(LPMSG lpmsg)$/;"	f	class:mtl::control::ole_inplace_active_obj	typeref:typename:HRESULT __stdcall
TranslateAccelerator	include/mtl/ole/host.h	/^		HRESULT virtual __stdcall TranslateAccelerator(LPMSG lpmsg, WORD wID)$/;"	f	class:mtl::inplace_frame	typeref:typename:HRESULT __stdcall
TranslateAcceleratorSB	include/mtl/ole/shell.h	/^			virtual HRESULT __stdcall TranslateAcceleratorSB(MSG* pmsg, WORD wID) override$/;"	f	class:mtl::shell::folder_view	typeref:typename:HRESULT __stdcall
UIDeactivate	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall UIDeactivate(void) override$/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
UNIX	include/mtl/win/enc.h	/^		enum eol_mode { UNIX, DOS } eol;$/;"	e	enum:mtl::file_encoding::eol_mode
UTF16	include/mtl/win/enc.h	/^	inline const codepage& UTF16()$/;"	f	namespace:mtl	typeref:typename:const codepage &
UTF16LE_BOM	include/mtl/win/enc.h	/^			static const  char* UTF16LE_BOM()$/;"	f	class:mtl::details::FileSniffer	typeref:typename:const char *
UTF7	include/mtl/win/enc.h	/^	inline const codepage& UTF7()$/;"	f	namespace:mtl	typeref:typename:const codepage &
UTF8	include/mtl/win/enc.h	/^	inline const codepage& UTF8()$/;"	f	namespace:mtl	typeref:typename:const codepage &
UTF8_BOM	include/mtl/win/enc.h	/^			static const  char* UTF8_BOM()$/;"	f	class:mtl::details::FileSniffer	typeref:typename:const char *
Unadvise	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall Unadvise(DWORD dwConnection) override$/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
Unadvise	include/mtl/ole/cp.h	/^		virtual HRESULT __stdcall Unadvise(DWORD dwCookie) override$/;"	f	class:mtl::connection_point	typeref:typename:HRESULT __stdcall
Unfreeze	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall Unfreeze(DWORD dwFreeze) override$/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
Update	include/mtl/ole/control.h	/^		virtual HRESULT __stdcall Update(void) override$/;"	f	class:mtl::control	typeref:typename:HRESULT __stdcall
Value	include/mtl/obj/collection.h	/^        virtual HRESULT __stdcall Value(long index, BSTR* value)$/;"	f	class:mtl::bstr_collection	typeref:typename:HRESULT __stdcall
Value	include/mtl/obj/collection.h	/^        virtual HRESULT __stdcall Value(long index, IDispatch** value)$/;"	f	class:mtl::disp_collection	typeref:typename:HRESULT __stdcall
Value	include/mtl/obj/collection.h	/^        virtual HRESULT __stdcall Value(long index, IUnknown** value)$/;"	f	class:mtl::unknown_collection	typeref:typename:HRESULT __stdcall
Value	include/mtl/obj/collection.h	/^        virtual HRESULT __stdcall Value(long index, VARIANT* value)$/;"	f	class:mtl::variant_collection	typeref:typename:HRESULT __stdcall
Value	include/mtl/obj/collection.h	/^        virtual HRESULT __stdcall Value(long index, long* value)$/;"	f	class:mtl::long_collection	typeref:typename:HRESULT __stdcall
WCODE_HRESULT_FIRST	include/mtl/punk.h	/^            WCODE_HRESULT_FIRST = MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF, 0x200),$/;"	e	enum:mtl::HR::__anonf7ec9d480103
WCODE_HRESULT_LAST	include/mtl/punk.h	/^            WCODE_HRESULT_LAST = MAKE_HRESULT(SEVERITY_ERROR, FACILITY_ITF + 1, 0) - 1$/;"	e	enum:mtl::HR::__anonf7ec9d480103
WEST	include/mtl/win/layout.h	/^			WEST$/;"	e	enum:mtl::layout::style
WM_LAYOUT	include/mtl/win/wnd.h	/^#define WM_LAYOUT /;"	d
WM_REFLECT	include/mtl/win/wnd.h	/^#define WM_REFLECT /;"	d
WM_SEARCH	include/mtl/win/wnd.h	/^#define WM_SEARCH /;"	d
WM_SEARCH_MSG	include/mtl/win/codlg.h	/^#define WM_SEARCH_MSG /;"	d
Wait	include/mtl/ole/async.h	/^            virtual HRESULT __stdcall Wait(DWORD dwFlags, DWORD dwMilliseconds) override$/;"	f	class:mtl::details::call_object	typeref:typename:HRESULT __stdcall
Win32CommonControls	include/mtl/win/ctrl.h	/^        Win32CommonControls()$/;"	f	class:mtl::Win32CommonControls
Win32CommonControls	include/mtl/win/ctrl.h	/^    class Win32CommonControls$/;"	c	namespace:mtl
WmLayout	include/mtl/win/wnd.h	/^    inline UINT WmLayout()$/;"	f	namespace:mtl	typeref:typename:UINT
WmReflect	include/mtl/win/wnd.h	/^    inline UINT WmReflect()$/;"	f	namespace:mtl	typeref:typename:UINT
WmSearch	include/mtl/win/wnd.h	/^    inline UINT WmSearch()$/;"	f	namespace:mtl	typeref:typename:UINT
WriteOverLap	include/mtl/win32/io.h	/^            WriteOverLap(HANDLE handle, const std::string& d)$/;"	f	class:mtl::detail::WriteOverLap
WriteOverLap	include/mtl/win32/io.h	/^        class WriteOverLap : public OVERLAPPED$/;"	c	namespace:mtl::detail
XmlStyle	include/mtl/scintilla/sci.h	/^	struct XmlStyle$/;"	s	namespace:mtl
XmlStyleSet	include/mtl/scintilla/sci.h	/^	struct XmlStyleSet$/;"	s	namespace:mtl
XmlStyleSets	include/mtl/scintilla/sci.h	/^	struct XmlStyleSets$/;"	s	namespace:mtl
_Enum	include/mtl/obj/collection.h	/^        virtual HRESULT __stdcall _Enum(IEnumVARIANT** enu)$/;"	f	class:mtl::collection	typeref:typename:HRESULT __stdcall
_MOL_DEF_GUARD_DEFINE_META_SERIALIZER_MSXML_XXX_DEF_GUARD_	include/mtl/persist/xml.h	/^#define _MOL_DEF_GUARD_DEFINE_META_SERIALIZER_MSXML_XXX_DEF_GUARD_$/;"	d
__anon27fbbcb60102	include/mtl/obj/localserver.h	/^			the_com_module().onUnLoad = [mainThreadId]() {$/;"	f	function:mtl::local_server::local_server	file:
__anon2a0cebb50102	include/mtl/win32/box.h	/^            {$/;"	f	function:mtl::thread_box::run	file:
__anon2a0cebb50202	include/mtl/win32/box.h	/^            {$/;"	f	function:mtl::thread_box::run	file:
__anon4493543c0102	include/mtl/win/ctrl.h	/^            {$/;"	f	function:mtl::tab_ctrl::enable_dragdrop	file:
__anon4493543c0202	include/mtl/win/ctrl.h	/^            {$/;"	f	function:mtl::tab_ctrl::enable_dragdrop	file:
__anon4493543c0302	include/mtl/win/ctrl.h	/^            {$/;"	f	function:mtl::tab_ctrl::enable_dragdrop	file:
__anon4493543c0402	include/mtl/win/ctrl.h	/^            {$/;"	f	function:mtl::tab_ctrl::enable_dragdrop	file:
__anon4493543c0502	include/mtl/win/ctrl.h	/^            {$/;"	f	function:mtl::tab_ctrl::enable_dragdrop	file:
__anon4493543c0602	include/mtl/win/ctrl.h	/^                {$/;"	f	function:mtl::tab_ctrl::handleOnMouseDown	file:
__anon4493543c0702	include/mtl/win/ctrl.h	/^            {$/;"	f	function:mtl::tab_ctrl::createWindow	file:
__anon502c64bd0102	include/mtl/persist/json.h	/^			{$/;"	f	function:meta::impl::toJson	file:
__anon502c64bd0202	include/mtl/persist/json.h	/^			{$/;"	f	function:meta::impl::toJson	file:
__anon502c64bd0302	include/mtl/persist/json.h	/^			{$/;"	f	function:meta::impl::fromJson	file:
__anon502c64bd0402	include/mtl/persist/json.h	/^			{$/;"	f	function:meta::toJson	file:
__anon502c64bd0502	include/mtl/persist/json.h	/^			{$/;"	f	function:meta::toJson	file:
__anon5f28db050102	include/mtl/win/layout.h	/^			{$/;"	f	function:mtl::splitter::splitter	file:
__anon8be287fa0102	include/mtl/win32/pipe.h	/^            {$/;"	f	function:mtl::elevator::read	file:
__anon8be287fa0202	include/mtl/win32/pipe.h	/^            {$/;"	f	function:mtl::elevator::write	file:
__anona650a5b40102	include/mtl/persist/xml.h	/^				{$/;"	f	function:mtl::impl::toXml	file:
__anona650a5b40202	include/mtl/persist/xml.h	/^				{$/;"	f	function:mtl::impl::toXml	file:
__anona650a5b40302	include/mtl/persist/xml.h	/^				{$/;"	f	function:mtl::impl::toXml	file:
__anona650a5b40402	include/mtl/persist/xml.h	/^				{$/;"	f	function:mtl::impl::toXml	file:
__anona650a5b40502	include/mtl/persist/xml.h	/^			{$/;"	f	function:mtl::impl::fromXml	file:
__anona650a5b40602	include/mtl/persist/xml.h	/^				{$/;"	f	function:mtl::impl::fromXml	file:
__anoneb0d973b0102	include/mtl/win/gdi.h	/^                colorThemeToken_ = ct->onUpdate([this]() { this->update(); });$/;"	f	function:mtl::menu::hook_color_theme	file:
__anonec3485d00102	include/mtl/win/wnd.h	/^                colorThemeToken_ = ct->onUpdate([this]() { this->on_color_theme_changed(); });$/;"	f	function:mtl::wnd::set_color_theme	file:
__anonf0550cac0102	include/mtl/edge/chrome.h	/^			{$/;"	f	function:mtl::html_wnd::navigate	file:
__anonf0550cac0202	include/mtl/edge/chrome.h	/^			{$/;"	f	function:mtl::html_wnd::on_create_webview	file:
__anonf0550cac0302	include/mtl/edge/chrome.h	/^			{$/;"	f	function:mtl::html_wnd::on_create_webview	file:
__anonf0550cac0402	include/mtl/edge/chrome.h	/^			{$/;"	f	function:mtl::html_wnd::on_create_webview	file:
__anonf0550cac0502	include/mtl/edge/chrome.h	/^			{$/;"	f	function:mtl::html_wnd::on_create_webview	file:
__anonf0550cac0602	include/mtl/edge/chrome.h	/^			{$/;"	f	function:mtl::html_wnd::on_create_webview	file:
__anonf7ec9d480103	include/mtl/punk.h	/^        enum {$/;"	g	class:mtl::HR
absolute	include/mtl/util/path.h	/^    path absolute()$/;"	f	class:mtl::path	typeref:typename:path
accel	include/mtl/win32/box.h	/^        accel()$/;"	f	struct:mtl::accel
accel	include/mtl/win32/box.h	/^        accel(char key, int cmd, int flags = 0 )$/;"	f	struct:mtl::accel
accel	include/mtl/win32/box.h	/^        accel(int vkey, int cmd, int flags = 0 )$/;"	f	struct:mtl::accel
accel	include/mtl/win32/box.h	/^    struct accel : public ACCEL$/;"	s	namespace:mtl
accel_	include/mtl/win32/box.h	/^        HACCEL accel_ = nullptr;$/;"	m	class:mtl::accelerators	typeref:typename:HACCEL
accelerators	include/mtl/win32/box.h	/^        accelerators()$/;"	f	class:mtl::accelerators
accelerators	include/mtl/win32/box.h	/^        accelerators(ACCEL* accels, int size)$/;"	f	class:mtl::accelerators
accelerators	include/mtl/win32/box.h	/^        accelerators(accelerators&& rhs)$/;"	f	class:mtl::accelerators
accelerators	include/mtl/win32/box.h	/^        accelerators(const accelerators& rhs)$/;"	f	class:mtl::accelerators
accelerators	include/mtl/win32/box.h	/^        accelerators(int id)$/;"	f	class:mtl::accelerators
accelerators	include/mtl/win32/box.h	/^        accelerators(std::vector<accel> accels)$/;"	f	class:mtl::accelerators
accelerators	include/mtl/win32/box.h	/^    class accelerators$/;"	c	namespace:mtl
access	include/mtl/win32/io.h	/^        DWORD access() const$/;"	f	class:mtl::file	typeref:typename:DWORD
accessData	include/mtl/disp/sf_array.h	/^			HRESULT accessData(void** ppData)$/;"	f	class:mtl::details::safearray_base	typeref:typename:HRESULT
access_flags	include/mtl/win32/io.h	/^        DWORD access_flags = GENERIC_READ;$/;"	m	class:mtl::file	typeref:typename:DWORD
active	include/mtl/win/mdi.h	/^        HWND active()$/;"	f	class:mtl::mdi_frame	typeref:typename:HWND
activeChild	include/mtl/win/ctrl.h	/^        HWND                                                       activeChild = nullptr;$/;"	m	class:mtl::tab_ctrl	typeref:typename:HWND
activeObject	include/mtl/ole/host.h	/^		punk<IOleInPlaceActiveObject> activeObject;$/;"	m	class:mtl::inplace_frame	typeref:typename:punk<IOleInPlaceActiveObject>
activeScript	include/mtl/script/script.h	/^		punk<IActiveScript>					activeScript;$/;"	m	class:mtl::active_script	typeref:typename:punk<IActiveScript>
active_	include/mtl/ole/control.h	/^		punk<ole_inplace_active_obj>    active_;$/;"	m	class:mtl::control	typeref:typename:punk<ole_inplace_active_obj>
active_script	include/mtl/script/script.h	/^		active_script()$/;"	f	class:mtl::active_script
active_script	include/mtl/script/script.h	/^		active_script(const std::wstring& engine)$/;"	f	class:mtl::active_script
active_script	include/mtl/script/script.h	/^		active_script(const std::wstring& engine, HWND hWnd)$/;"	f	class:mtl::active_script
active_script	include/mtl/script/script.h	/^	class active_script : public implements< active_script(IActiveScriptSite, IActiveScriptSiteWind/;"	c	namespace:mtl
add	include/mtl/ole/img.h	/^        void add( std::vector<item> new_items)$/;"	f	class:mtl::ui	typeref:typename:void
add	include/mtl/ole/img.h	/^        void add(const std::vector<item>& items, bool toplevel = true)$/;"	f	class:mtl::menu_builder	typeref:typename:void
add	include/mtl/ole/img.h	/^        void add(int id, const std::string& str)$/;"	f	class:mtl::ui	typeref:typename:void
add	include/mtl/ole/img.h	/^        void add(int id, const std::string& str, const std::wstring& label)$/;"	f	class:mtl::ui	typeref:typename:void
add	include/mtl/ole/img.h	/^        void add(int id, const std::string& str, const std::wstring& label, const std::wstring& /;"	f	class:mtl::ui	typeref:typename:void
add	include/mtl/win/ctrl.h	/^        LRESULT add(HWND notifyParent, T& ctrl)$/;"	f	class:mtl::tool_tip	typeref:typename:LRESULT
add	include/mtl/win/ctrl.h	/^        LRESULT add(T& ctrl, const std::wstring& txt)$/;"	f	class:mtl::tool_tip	typeref:typename:LRESULT
add	include/mtl/win/ctrl.h	/^        combo_box& add(const std::wstring& s, LPARAM param = 0 )$/;"	f	class:mtl::combo_box	typeref:typename:combo_box &
add	include/mtl/win/ctrl.h	/^        void add(int cmd, const std::wstring& label, const std::wstring& path, int index = -1)$/;"	f	class:mtl::combo_box_ex	typeref:typename:void
add	include/mtl/win/ctrl.h	/^        void add(tab&& item, HWND child, int index = -1)$/;"	f	class:mtl::tab_ctrl	typeref:typename:void
add	include/mtl/win/ctrl.h	/^        void add(tab&& item, int index = -1)$/;"	f	class:mtl::tab_ctrl	typeref:typename:void
add	include/mtl/win/gdi.h	/^        void add(std::shared_ptr<menu_item> item)$/;"	f	class:mtl::menu	typeref:typename:void
add	include/mtl/win/wnd.h	/^        void add(HWND hWnd)$/;"	f	class:mtl::modeless_dialogs	typeref:typename:void
addBar	include/mtl/win/ctrl.h	/^        void addBar(const wchar_t* label, int id, HWND child, int height = -1, int style = RBBS_/;"	f	class:mtl::rebar	typeref:typename:void
add_backslash	include/mtl/util/path.h	/^    const path add_backslash() const$/;"	f	class:mtl::path	typeref:typename:const path
add_bitmap	include/mtl/win/ctrl.h	/^        int add_bitmap(HBITMAP bmp, COLORREF col = RGB(0, 0, 0))$/;"	f	class:mtl::image_list	typeref:typename:int
add_bitmap	include/mtl/win/gdi.h	/^        void add_bitmap(int pos, HBITMAP bmp)$/;"	f	class:mtl::menu	typeref:typename:void
add_bitmaps	include/mtl/ole/img.h	/^        void add_bitmaps()$/;"	f	class:mtl::menu_builder	typeref:typename:void
add_button	include/mtl/win/ctrl.h	/^        tool_bar& add_button(int iCmd, const wchar_t* label = 0, BYTE style = 0, BYTE state = TB/;"	f	class:mtl::tool_bar	typeref:typename:tool_bar &
add_control	include/mtl/win/ctrl.h	/^        tool_bar& add_control(HWND child, RECT& r, int iCmd = 0)$/;"	f	class:mtl::tool_bar	typeref:typename:tool_bar &
add_dlg_item_text	include/mtl/win/dlg.h	/^        void add_dlg_item_text(int id, const std::vector<std::wstring>& v)$/;"	f	class:mtl::dialog	typeref:typename:void
add_dlg_item_text	include/mtl/win/dlg.h	/^        void add_dlg_item_text(int id, const std::wstring& s)$/;"	f	class:mtl::dialog	typeref:typename:void
add_extension	include/mtl/util/path.h	/^    const path add_extension(const std::wstring& extension) const$/;"	f	class:mtl::path	typeref:typename:const path
add_icon	include/mtl/win/ctrl.h	/^        int add_icon(HICON ico)$/;"	f	class:mtl::image_list	typeref:typename:int
add_named_object	include/mtl/script/script.h	/^		HRESULT add_named_object(IUnknown* punk, const std::wstring& obj, int state = SCRIPTITEM_ISVIS/;"	f	class:mtl::active_script	typeref:typename:HRESULT
add_scriptlet	include/mtl/script/script.h	/^		virtual HRESULT add_scriptlet(std::wstring& name, const std::wstring& handler, const std::wstr/;"	f	class:mtl::active_script	typeref:typename:HRESULT
add_separator	include/mtl/win/ctrl.h	/^        tool_bar& add_separator(int width, int iCmd = 0)$/;"	f	class:mtl::tool_bar	typeref:typename:tool_bar &
add_text_button	include/mtl/win/ctrl.h	/^        tool_bar& add_text_button(int iCmd, const wchar_t* label = 0, BYTE style = 0, BYTE state/;"	f	class:mtl::tool_bar	typeref:typename:tool_bar &
addref	include/mtl/punk.h	/^        I* addref()$/;"	f	class:mtl::punk	typeref:typename:I *
address_of	include/mtl/disp/bstr.h	/^		bstr* address_of()$/;"	f	class:mtl::bstr	typeref:typename:bstr *
address_of	include/mtl/disp/bstr.h	/^		const bstr* address_of() const$/;"	f	class:mtl::bstr	typeref:typename:const bstr *
address_of	include/mtl/ole/img.h	/^        const bitmap* address_of() const$/;"	f	class:mtl::bitmap	typeref:typename:const bitmap *
address_of	include/mtl/persist/stream.h	/^        stream* address_of()$/;"	f	class:mtl::stream	typeref:typename:stream *
address_of	include/mtl/punk.h	/^        punk<I>* address_of()$/;"	f	class:mtl::punk	typeref:typename:punk<I> *
address_of	include/mtl/win32/mem.h	/^        co_mem<T>* address_of()$/;"	f	class:mtl::co_mem	typeref:typename:co_mem<T> *
advance	include/mtl/win32/io.h	/^        void advance(unsigned long long p)$/;"	f	class:mtl::file	typeref:typename:void
adviseAdvf_	include/mtl/ole/control.h	/^		DWORD							adviseAdvf_;$/;"	m	class:mtl::control	typeref:typename:DWORD
adviseAspect_	include/mtl/ole/control.h	/^		DWORD							adviseAspect_;$/;"	m	class:mtl::control	typeref:typename:DWORD
adviseCookie_	include/mtl/ole/explorer.h	/^		DWORD										adviseCookie_;$/;"	m	class:mtl::explorer_tree	typeref:typename:DWORD
adviseHolder_	include/mtl/ole/control.h	/^		punk<IOleAdviseHolder>			adviseHolder_;$/;"	m	class:mtl::control	typeref:typename:punk<IOleAdviseHolder>
adviseSink_	include/mtl/ole/control.h	/^		punk<IAdviseSink>				adviseSink_;$/;"	m	class:mtl::control	typeref:typename:punk<IAdviseSink>
aggregatable	include/mtl/obj/impl.h	/^	class aggregatable$/;"	c	namespace:mtl
aggregate	include/mtl/obj/impl.h	/^		aggregate()$/;"	f	class:mtl::aggregate
aggregate	include/mtl/obj/impl.h	/^	class aggregate<AGG(IMPL)> : public IMPL$/;"	c	namespace:mtl
alloc	include/mtl/win32/mem.h	/^        void alloc(size_t s, int flags = GMEM_MOVEABLE | GMEM_NODISCARD)$/;"	f	class:mtl::global	typeref:typename:void
alloc	include/mtl/win32/uni.h	/^		void alloc(size_t n)$/;"	f	class:mtl::buffer	typeref:typename:void
alpha_blend	include/mtl/win/gdi.h	/^    inline void dc::alpha_blend(HBITMAP bmp, int x, int y, int w, int h, int alpha)$/;"	f	class:mtl::dc	typeref:typename:void
anchor	include/mtl/scintilla/sci.h	/^	int anchor()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:int
anchor	include/mtl/scintilla/sci.h	/^	scintilla_wnd& anchor(int pos)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
appDataPath	include/mtl/edge/chrome.h	/^		std::wstring appDataPath;$/;"	m	class:mtl::html_wnd	typeref:typename:std::wstring
app_files_path	include/mtl/ole/shell.h	/^	inline std::wstring app_files_path(const std::wstring& dir)$/;"	f	namespace:mtl	typeref:typename:std::wstring
append	include/mtl/util/path.h	/^    const path append(const std::wstring& ap) const$/;"	f	class:mtl::path	typeref:typename:const path
appendChild	include/mtl/persist/xml.h	/^		MsxmlDocument& appendChild(ElementPtr el)$/;"	f	class:mtl::MsxmlDocument	typeref:typename:MsxmlDocument &
appendChildrenOf	include/mtl/persist/xml.h	/^		punk<IXMLDOMDocument> appendChildrenOf(ElementPtr el)$/;"	f	class:mtl::MsxmlDocument	typeref:typename:punk<IXMLDOMDocument>
application	include/mtl/win/app.h	/^        application(HINSTANCE hInst)$/;"	f	class:mtl::application
application	include/mtl/win/app.h	/^    class application$/;"	c	namespace:mtl
args	include/mtl/win32/arg.h	/^        std::vector<std::wstring> args()$/;"	f	class:mtl::options	typeref:typename:std::vector<std::wstring>
args_	include/mtl/win32/arg.h	/^        std::vector<std::wstring> args_;$/;"	m	class:mtl::options	typeref:typename:std::vector<std::wstring>
as	include/mtl/punk.h	/^        punk<T> as() const$/;"	f	class:mtl::punk	typeref:typename:punk<T>
as_bstr	include/mtl/disp/bstr.h	/^	inline bstr bstr_view::as_bstr()$/;"	f	class:mtl::bstr_view	typeref:typename:bstr
as_string	include/mtl/win/clipboard.h	/^		static std::string as_string(UINT format)$/;"	f	class:mtl::clipboard	typeref:typename:std::string
as_wstring	include/mtl/win/clipboard.h	/^		static std::wstring as_wstring(UINT format)$/;"	f	class:mtl::clipboard	typeref:typename:std::wstring
asp_	include/mtl/script/script.h	/^		punk<IActiveScriptParse>			asp_;$/;"	m	class:mtl::active_script	typeref:typename:punk<IActiveScriptParse>
async	include/mtl/ole/async.h	/^            punk<I> async;$/;"	m	class:mtl::details::call_object	typeref:typename:punk<I>
async_com	include/mtl/ole/async.h	/^    details::async_com_holder<I> async_com(IUnknown* unk)$/;"	f	namespace:mtl	typeref:typename:details::async_com_holder<I>
async_com_holder	include/mtl/ole/async.h	/^            async_com_holder(call_object<I>* c)$/;"	f	class:mtl::details::async_com_holder
async_com_holder	include/mtl/ole/async.h	/^        class async_com_holder$/;"	c	namespace:mtl::details
async_content	include/mtl/win32/io.h	/^        DWORD async_content(const std::string& data, std::function<void(DWORD)> cb)$/;"	f	class:mtl::file	typeref:typename:DWORD
async_content	include/mtl/win32/io.h	/^        DWORD async_content(std::function<void(DWORD,std::string)> cb)$/;"	f	class:mtl::file	typeref:typename:DWORD
async_named_pipe	include/mtl/win32/pipe.h	/^        async_named_pipe()$/;"	f	class:mtl::async_named_pipe
async_named_pipe	include/mtl/win32/pipe.h	/^        async_named_pipe(HANDLE h)$/;"	f	class:mtl::async_named_pipe
async_named_pipe	include/mtl/win32/pipe.h	/^        async_named_pipe(async_named_pipe&& rhs) noexcept$/;"	f	class:mtl::async_named_pipe
async_named_pipe	include/mtl/win32/pipe.h	/^    class async_named_pipe$/;"	c	namespace:mtl
atom	include/mtl/win/wc.h	/^        ATOM atom = 0;$/;"	m	class:mtl::window_class	typeref:typename:ATOM
attach	include/mtl/disp/sf_array.h	/^			void attach(SAFEARRAY* a)$/;"	f	class:mtl::details::safearray_base	typeref:typename:void
attached_	include/mtl/win/gdi.h	/^        bool attached_ = true;$/;"	m	class:mtl::menu	typeref:typename:bool
attributes	include/mtl/win32/mem.h	/^        DWORD attributes() const$/;"	f	class:mtl::file_info	typeref:typename:DWORD
attributes_	include/mtl/ole/shell.h	/^			ULONG           attributes_;$/;"	m	class:mtl::shell::item	typeref:typename:ULONG
attributes_of	include/mtl/ole/shell.h	/^			ULONG attributes_of(LPITEMIDLIST pidl, ULONG attributes = SFGAO_FOLDER | SFGAO_STREAM | SFGAO/;"	f	class:mtl::shell::folder	typeref:typename:ULONG
automation	include/mtl/disp/aut.h	/^		automation(IDispatch* disp)$/;"	f	class:mtl::automation
automation	include/mtl/disp/aut.h	/^		automation(IDispatch* disp, DISPID id)$/;"	f	class:mtl::automation
automation	include/mtl/disp/aut.h	/^		automation(IDispatch* disp, const std::wstring& member)$/;"	f	class:mtl::automation
automation	include/mtl/disp/aut.h	/^	class automation : public DISPPARAMS$/;"	c	namespace:mtl
available_	include/mtl/win32/arg.h	/^        std::vector<std::wstring> available_;$/;"	m	class:mtl::options	typeref:typename:std::vector<std::wstring>
b	include/mtl/win/dlg.h	/^                auto& b = std::get<I>(t);$/;"	m	class:mtl::details::Bindings	typeref:typename:auto &
bTrack_	include/mtl/win/layout.h	/^		bool			bTrack_;$/;"	m	class:mtl::splitter	typeref:typename:bool
b_copy	include/mtl/disp/bstr.h	/^		explicit b_copy(const BSTR& s)$/;"	f	class:mtl::b_copy
b_copy	include/mtl/disp/bstr.h	/^	class b_copy$/;"	c	namespace:mtl
b_move	include/mtl/disp/bstr.h	/^		explicit b_move(BSTR& s)$/;"	f	class:mtl::b_move
b_move	include/mtl/disp/bstr.h	/^	class b_move$/;"	c	namespace:mtl
back	include/mtl/edge/chrome.h	/^		void back()$/;"	f	class:mtl::html_wnd	typeref:typename:void
backgroundColor	include/mtl/scintilla/sci.h	/^		std::string backgroundColor;$/;"	m	struct:mtl::XmlStyle	typeref:typename:std::string
base64_chars	include/mtl/util/base64.h	/^        inline const std::string& base64_chars()$/;"	f	namespace:mtl::details	typeref:typename:const std::string &
base64_decode	include/mtl/util/base64.h	/^    inline std::string base64_decode(std::string const& encoded_string) {$/;"	f	namespace:mtl	typeref:typename:std::string
base64_encode	include/mtl/util/base64.h	/^    inline std::string base64_encode(const std::string& src)$/;"	f	namespace:mtl	typeref:typename:std::string
base64_encode	include/mtl/util/base64.h	/^    inline std::string base64_encode(unsigned char const* bytes_to_encode, unsigned int in_len)$/;"	f	namespace:mtl	typeref:typename:std::string
bgBrush_	include/mtl/ole/explorer.h	/^		HBRUSH										bgBrush_;$/;"	m	class:mtl::explorer_tree	typeref:typename:HBRUSH
bgCol_	include/mtl/ole/explorer.h	/^		OLE_COLOR									bgCol_;$/;"	m	class:mtl::explorer_tree	typeref:typename:OLE_COLOR
bhfi_	include/mtl/win32/mem.h	/^        BY_HANDLE_FILE_INFORMATION bhfi_;$/;"	m	class:mtl::file_info	typeref:typename:BY_HANDLE_FILE_INFORMATION
bind	include/mtl/win/dlg.h	/^            typename std::enable_if<I == sizeof...(Tp), void>::type bind(dialog& dlg, std::tuple/;"	f	class:mtl::details::Bindings	typeref:typename:std::enable_if<I==sizeof...(Tp),void>::type
bind	include/mtl/win/dlg.h	/^            void bind()$/;"	f	class:mtl::details::Binder	typeref:typename:void
bind	include/mtl/win/dlg.h	/^            void bind(dialog& dlg) override$/;"	f	class:mtl::details::Bindings	typeref:typename:void
binding	include/mtl/win/dlg.h	/^        details::Binder binding;$/;"	m	class:mtl::dialog	typeref:typename:details::Binder
binding_	include/mtl/win/dlg.h	/^            std::unique_ptr<Binding> binding_;$/;"	m	class:mtl::details::Binder	typeref:typename:std::unique_ptr<Binding>
bit_blit	include/mtl/win/gdi.h	/^    inline void dc::bit_blit(HBITMAP bitmap, int x, int y, int flags )$/;"	f	class:mtl::dc	typeref:typename:void
bitmap	include/mtl/ole/img.h	/^        HBITMAP bitmap(int id)$/;"	f	class:mtl::ui	typeref:typename:HBITMAP
bitmap	include/mtl/ole/img.h	/^        HBITMAP bitmap(int id, int w, int h)$/;"	f	class:mtl::ui	typeref:typename:HBITMAP
bitmap	include/mtl/ole/img.h	/^        bitmap()$/;"	f	class:mtl::bitmap
bitmap	include/mtl/ole/img.h	/^        bitmap(HBITMAP b)$/;"	f	class:mtl::bitmap
bitmap	include/mtl/ole/img.h	/^        bitmap(bitmap&& rhs)$/;"	f	class:mtl::bitmap
bitmap	include/mtl/ole/img.h	/^    class bitmap$/;"	c	namespace:mtl
bitmap	include/mtl/win/gdi.h	/^        HBITMAP bitmap = nullptr;$/;"	m	class:mtl::menu_item	typeref:typename:HBITMAP
bitmap_cache	include/mtl/ole/img.h	/^        bitmap_cache()$/;"	f	class:mtl::bitmap_cache
bitmap_cache	include/mtl/ole/img.h	/^    class bitmap_cache$/;"	c	namespace:mtl
bitmapify	include/mtl/ole/img.h	/^        static void bitmapify(HMENU hmenu, int w, int h)$/;"	f	class:mtl::menu_builder	typeref:typename:void
bitmaps_	include/mtl/ole/img.h	/^        std::vector<bitmap> bitmaps_;$/;"	m	class:mtl::bitmap_cache	typeref:typename:std::vector<bitmap>
bkgBrush_	include/mtl/win/wnd.h	/^        HBRUSH bkgBrush_;$/;"	m	class:mtl::color_theme	typeref:typename:HBRUSH
bkgColor_	include/mtl/win/wnd.h	/^        COLORREF						bkgColor_ = RGB(0x55, 0x59, 0x64);$/;"	m	class:mtl::color_theme	typeref:typename:COLORREF
bkg_brush	include/mtl/win/wnd.h	/^        HBRUSH bkg_brush() { return bkgBrush_; }$/;"	f	class:mtl::color_theme	typeref:typename:HBRUSH
bkg_color	include/mtl/win/wnd.h	/^        COLORREF bkg_color() { return bkgColor_; }$/;"	f	class:mtl::color_theme	typeref:typename:COLORREF
bkg_color	include/mtl/win/wnd.h	/^        color_theme& bkg_color( COLORREF c)$/;"	f	class:mtl::color_theme	typeref:typename:color_theme &
bold	include/mtl/scintilla/sci.h	/^		std::string bold;$/;"	m	struct:mtl::XmlStyle	typeref:typename:std::string
bound	include/mtl/win/dlg.h	/^            std::tuple<Args&...> bound;$/;"	m	class:mtl::details::Bindings	typeref:typename:std::tuple<Args &...>
brace_highlight	include/mtl/scintilla/sci.h	/^	scintilla_wnd& brace_highlight(int pos1, int pos2)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
brace_match	include/mtl/scintilla/sci.h	/^	LRESULT brace_match(int pos)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:LRESULT
brush	include/mtl/win/gdi.h	/^        brush()$/;"	f	class:mtl::brush
brush	include/mtl/win/gdi.h	/^        brush(COLORREF col)$/;"	f	class:mtl::brush
brush	include/mtl/win/gdi.h	/^        brush(brush&& rhs)$/;"	f	class:mtl::brush
brush	include/mtl/win/gdi.h	/^    class brush$/;"	c	namespace:mtl
bstr	include/mtl/disp/bstr.h	/^		bstr()$/;"	f	class:mtl::bstr
bstr	include/mtl/disp/bstr.h	/^		bstr(bstr&& b) noexcept$/;"	f	class:mtl::bstr
bstr	include/mtl/disp/bstr.h	/^		bstr(const bstr& b)$/;"	f	class:mtl::bstr
bstr	include/mtl/disp/bstr.h	/^		explicit bstr(b_move&& b)$/;"	f	class:mtl::bstr
bstr	include/mtl/disp/bstr.h	/^		explicit bstr(const b_copy& b)$/;"	f	class:mtl::bstr
bstr	include/mtl/disp/bstr.h	/^		explicit bstr(const ole_char& b)$/;"	f	class:mtl::bstr
bstr	include/mtl/disp/bstr.h	/^		explicit bstr(const ole_char& b, size_t len)$/;"	f	class:mtl::bstr
bstr	include/mtl/disp/bstr.h	/^		explicit bstr(const std::string& str, int cp = CP_UTF8)$/;"	f	class:mtl::bstr
bstr	include/mtl/disp/bstr.h	/^		explicit bstr(const wchar_t (&b)[N])$/;"	f	class:mtl::bstr
bstr	include/mtl/disp/bstr.h	/^	class bstr$/;"	c	namespace:mtl
bstr_	include/mtl/disp/bstr.h	/^		BSTR	bstr_;$/;"	m	class:mtl::bstr	typeref:typename:BSTR
bstr_collection	include/mtl/obj/collection.h	/^    class bstr_collection: public collection<bstr,T,I,LIBID,MAJOR,MINOR>$/;"	c	namespace:mtl
bstr_view	include/mtl/disp/bstr.h	/^		bstr_view()$/;"	f	class:mtl::bstr_view
bstr_view	include/mtl/disp/bstr.h	/^		explicit bstr_view(BSTR b)$/;"	f	class:mtl::bstr_view
bstr_view	include/mtl/disp/bstr.h	/^	class bstr_view$/;"	c	namespace:mtl
buf	include/mtl/win32/io.h	/^            std::unique_ptr<cbuff> buf;$/;"	m	class:mtl::detail::ReadOverLap	typeref:typename:std::unique_ptr<cbuff>
buf	include/mtl/win32/pipe.h	/^            cbuff buf;$/;"	m	class:mtl::detail::PipeReadOverlap	typeref:typename:cbuff
buf	include/mtl/win32/uni.h	/^		std::vector<T> buf;$/;"	m	class:mtl::buffer	typeref:typename:std::vector<T>
buffer	include/mtl/win32/uni.h	/^		buffer()$/;"	f	class:mtl::buffer
buffer	include/mtl/win32/uni.h	/^		buffer(buffer&& rhs)$/;"	f	class:mtl::buffer
buffer	include/mtl/win32/uni.h	/^		buffer(const buffer& rhs)$/;"	f	class:mtl::buffer
buffer	include/mtl/win32/uni.h	/^		buffer(size_t n)$/;"	f	class:mtl::buffer
buffer	include/mtl/win32/uni.h	/^		buffer(size_t n, int value)$/;"	f	class:mtl::buffer
buffer	include/mtl/win32/uni.h	/^	class buffer$/;"	c	namespace:mtl
button	include/mtl/win/ctrl.h	/^    class button : public ctrl<button>$/;"	c	namespace:mtl
button_rect	include/mtl/win/ctrl.h	/^        RECT button_rect(int iCmd)$/;"	f	class:mtl::tool_bar	typeref:typename:RECT
button_style	include/mtl/win/ctrl.h	/^        BYTE button_style(int id)$/;"	f	class:mtl::tool_bar	typeref:typename:BYTE
button_style	include/mtl/win/ctrl.h	/^        BYTE button_style(int id, BYTE style)$/;"	f	class:mtl::tool_bar	typeref:typename:BYTE
call_object	include/mtl/ole/async.h	/^            call_object(IUnknown* unk)$/;"	f	class:mtl::details::call_object
call_object	include/mtl/ole/async.h	/^        class call_object : public implements<call_object<I>(ISynchronize)>$/;"	c	namespace:mtl::details
callback	include/mtl/edge/chrome.h	/^			using callback = std::function<void(Args...)>;$/;"	t	class:mtl::detail::simple_callback
callback	include/mtl/edge/chrome.h	/^		class callback : public simple_callback<callback<I, Args...>, I, Args...>$/;"	c	namespace:mtl::detail
callback	include/mtl/edge/chrome.h	/^		using callback = std::function<void(HRESULT, ICoreWebView2Controller*)>;$/;"	t	class:mtl::chrome_edge
callback	include/mtl/ole/async.h	/^            std::function<void(I*)> callback;$/;"	m	class:mtl::details::call_object	typeref:typename:std::function<void (I *)>
callback_maker	include/mtl/edge/chrome.h	/^		struct callback_maker<I, R(T::*)(Args...) const>$/;"	s	namespace:mtl::detail
callback_maker	include/mtl/edge/chrome.h	/^		struct callback_maker<I, R(T::*)(Args...)>$/;"	s	namespace:mtl::detail
callbacks_	include/mtl/edge/chrome.h	/^		std::list<closure> callbacks_;$/;"	m	class:mtl::chrome_edge	typeref:typename:std::list<closure>
can_unload	include/mtl/win32/module.h	/^		bool can_unload()$/;"	f	class:mtl::com_module	typeref:typename:bool
cancel	include/mtl/win/wnd.h	/^        void cancel()$/;"	f	class:mtl::timer	typeref:typename:void
canonicalize	include/mtl/util/path.h	/^    static std::wstring canonicalize( std::wstring p)$/;"	f	class:mtl::path	typeref:typename:std::wstring
cascade	include/mtl/win/mdi.h	/^        void cascade()$/;"	f	class:mtl::mdi_frame	typeref:typename:void
cb_	include/mtl/edge/chrome.h	/^			callback cb_;$/;"	m	class:mtl::detail::simple_callback	typeref:typename:callback
cbuff	include/mtl/win32/uni.h	/^	typedef buffer<char> cbuff;$/;"	t	namespace:mtl	typeref:typename:buffer<char>
ccs_	include/mtl/win/mdi.h	/^        CLIENTCREATESTRUCT ccs_;$/;"	m	class:mtl::mdi_frame	typeref:typename:CLIENTCREATESTRUCT
center	include/mtl/win/dlg.h	/^        void center()$/;"	f	class:mtl::dialog	typeref:typename:void
cf_	include/mtl/win/codlg.h	/^        CHOOSEFONT cf_;$/;"	m	class:mtl::pick_font	typeref:typename:CHOOSEFONT
changeType	include/mtl/disp/variant.h	/^		HRESULT changeType(VARTYPE VT)$/;"	f	class:mtl::variant	typeref:typename:HRESULT
check	include/mtl/win/ctrl.h	/^        LRESULT check(int cmd, bool set = true)$/;"	f	class:mtl::tool_bar	typeref:typename:LRESULT
check	include/mtl/win/ctrl.h	/^        void check(bool b = true)$/;"	f	class:mtl::button	typeref:typename:void
check	include/mtl/win/gdi.h	/^        void check(bool status)$/;"	f	class:mtl::menu_item	typeref:typename:void
checked	include/mtl/ole/img.h	/^            bool checked = false;$/;"	m	struct:mtl::menu_builder::item	typeref:typename:bool
checked	include/mtl/win/ctrl.h	/^        bool checked()$/;"	f	class:mtl::button	typeref:typename:bool
checked	include/mtl/win/gdi.h	/^        bool checked = false;$/;"	m	class:mtl::menu_item	typeref:typename:bool
choice	include/mtl/win/codlg.h	/^        DWORD choice(DWORD what)$/;"	f	class:mtl::file_dialog	typeref:typename:DWORD
choose	include/mtl/win/codlg.h	/^        bool choose(HWND owner)$/;"	f	class:mtl::pick_font	typeref:typename:bool
choose	include/mtl/win/codlg.h	/^        std::wstring choose(HWND hwnd)$/;"	f	class:mtl::pick_folder	typeref:typename:std::wstring
chromeEdge	include/mtl/edge/chrome.h	/^	inline static chrome_edge* chromeEdge(const std::wstring& path)$/;"	f	namespace:mtl	typeref:typename:chrome_edge *
chromeEnv_	include/mtl/edge/chrome.h	/^		punk<ICoreWebView2Environment> chromeEnv_;$/;"	m	class:mtl::chrome_edge	typeref:typename:punk<ICoreWebView2Environment>
chromeFolder	include/mtl/edge/chrome.h	/^		std::wstring chromeFolder;$/;"	m	class:mtl::chrome_edge	typeref:typename:std::wstring
chrome_edge	include/mtl/edge/chrome.h	/^		chrome_edge(const std::wstring& name)$/;"	f	class:mtl::chrome_edge
chrome_edge	include/mtl/edge/chrome.h	/^	class chrome_edge :$/;"	c	namespace:mtl
className	include/mtl/win/wnd.h	/^            std::wstring className;$/;"	m	struct:mtl::find_child::Enumerator	typeref:typename:std::wstring
classType	include/mtl/obj/impl.h	/^		using classType = T;$/;"	t	class:mtl::implements	typeref:typename:T
classType	include/mtl/obj/impl.h	/^		using classType = typename IMPL::classType;$/;"	t	class:mtl::aggregate	typeref:typename:IMPL::classType
class_info	include/mtl/disp/disp.h	/^	class class_info {};$/;"	c	namespace:mtl
class_name	include/mtl/win/dlg.h	/^        std::wstring class_name(int id)$/;"	f	class:mtl::dialog	typeref:typename:std::wstring
class_object	include/mtl/obj/obj.h	/^	class class_object : public implements<class_object<T>(IClassFactory)>$/;"	c	namespace:mtl
class_object	include/mtl/obj/obj.h	/^	class class_object<aggregatable<T>> : public class_object<T> \/\/ public implements<ClassObject/;"	c	namespace:mtl
class_object	include/mtl/obj/obj.h	/^	class class_object<localserver<T>> : public class_object<T>$/;"	c	namespace:mtl
clear	include/mtl/disp/variant.h	/^		void clear()$/;"	f	class:mtl::variant	typeref:typename:void
clear	include/mtl/disp/variant.h	/^		void clear()$/;"	f	class:mtl::variant_view	typeref:typename:void
clear	include/mtl/win/clipboard.h	/^		static void clear(HWND hWnd = 0)$/;"	f	class:mtl::clipboard	typeref:typename:void
clear	include/mtl/win/ctrl.h	/^        void clear()$/;"	f	class:mtl::tool_bar	typeref:typename:void
clear_all_markers	include/mtl/scintilla/sci.h	/^	scintilla_wnd& clear_all_markers()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
clear_annotation	include/mtl/scintilla/sci.h	/^	scintilla_wnd& clear_annotation(int i)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
clear_annotations	include/mtl/scintilla/sci.h	/^	scintilla_wnd& clear_annotations()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
clear_dlg_item_list	include/mtl/win/dlg.h	/^        void clear_dlg_item_list(int id)$/;"	f	class:mtl::dialog	typeref:typename:void
clear_highlite	include/mtl/win/ctrl.h	/^        void clear_highlite()$/;"	f	class:mtl::tab_ctrl	typeref:typename:void
clientRect_	include/mtl/ole/explorer.h	/^		RECT										clientRect_;$/;"	m	class:mtl::explorer_tree	typeref:typename:RECT
clientSite	include/mtl/ole/host.h	/^		punk<client_site>	clientSite;$/;"	m	class:mtl::ole_host	typeref:typename:punk<client_site>
clientSite_	include/mtl/ole/control.h	/^		punk<IOleClientSite>			clientSite_;$/;"	m	class:mtl::control	typeref:typename:punk<IOleClientSite>
client_rect	include/mtl/win/wnd.h	/^        RECT client_rect() const$/;"	f	class:mtl::wnd	typeref:typename:RECT
client_site	include/mtl/ole/host.h	/^	class client_site : public implements< client_site(IOleInPlaceSite, IOleClientSite, of<IOleInPl/;"	c	namespace:mtl
clipboard	include/mtl/win/clipboard.h	/^	class clipboard$/;"	c	namespace:mtl
clone	include/mtl/disp/bstr.h	/^		bstr clone() const$/;"	f	class:mtl::bstr	typeref:typename:bstr
close	include/mtl/script/script.h	/^		virtual HRESULT close()$/;"	f	class:mtl::active_script	typeref:typename:HRESULT
close	include/mtl/win/gdi.h	/^        HMETAFILE close() $/;"	f	class:mtl::meta_dc	typeref:typename:HMETAFILE
close	include/mtl/win32/io.h	/^        void close()$/;"	f	class:mtl::file	typeref:typename:void
close	include/mtl/win32/mem.h	/^        void close()$/;"	f	class:mtl::memory_mapped_file	typeref:typename:void
close	include/mtl/win32/pipe.h	/^        void close()$/;"	f	class:mtl::async_named_pipe	typeref:typename:void
close	include/mtl/win32/pipe.h	/^        void close()$/;"	f	class:mtl::named_pipe	typeref:typename:void
closure	include/mtl/edge/chrome.h	/^		using closure = std::pair<HWND, callback>;$/;"	t	class:mtl::chrome_edge	typeref:typename:std::pair<HWND,callback>
clsctx	include/mtl/punk.h	/^        int clsctx = CLSCTX_ALL;$/;"	m	struct:mtl::from_clsid	typeref:typename:int
clsctx	include/mtl/punk.h	/^        int clsctx = CLSCTX_ALL;$/;"	m	struct:mtl::from_object	typeref:typename:int
clsctx	include/mtl/punk.h	/^        int clsctx = CLSCTX_ALL;$/;"	m	struct:mtl::from_progid	typeref:typename:int
clsid	include/mtl/obj/marshall.h	/^		const CLSID& clsid = CLSID_NULL;$/;"	m	class:mtl::rotten	typeref:typename:const CLSID &
clsid	include/mtl/punk.h	/^        CLSID clsid;$/;"	m	struct:mtl::from_clsid	typeref:typename:CLSID
cmd2img_	include/mtl/win/ctrl.h	/^        std::map<size_t, size_t> cmd2img_;$/;"	m	class:mtl::tool_bar	typeref:typename:std::map<size_t,size_t>
cmd2pos_	include/mtl/win/ctrl.h	/^        std::map<int, int> cmd2pos_;$/;"	m	class:mtl::tool_bar	typeref:typename:std::map<int,int>
cnt_	include/mtl/win32/module.h	/^		std::atomic<long> cnt_;$/;"	m	class:mtl::com_module	typeref:typename:std::atomic<long>
co	include/mtl/ole/async.h	/^            call_object<I>* co;$/;"	m	class:mtl::details::async_com_holder	typeref:typename:call_object<I> *
co_mem	include/mtl/win32/mem.h	/^        co_mem()$/;"	f	class:mtl::co_mem
co_mem	include/mtl/win32/mem.h	/^        co_mem(co_mem<T>&& rhs)$/;"	f	class:mtl::co_mem
co_mem	include/mtl/win32/mem.h	/^        co_mem(const co_mem<T>&& rhs)$/;"	f	class:mtl::co_mem
co_mem	include/mtl/win32/mem.h	/^        explicit co_mem(size_t nElements)$/;"	f	class:mtl::co_mem
co_mem	include/mtl/win32/mem.h	/^    class co_mem$/;"	c	namespace:mtl
co_str	include/mtl/win32/mem.h	/^        co_str()$/;"	f	class:mtl::co_str
co_str	include/mtl/win32/mem.h	/^        co_str(co_str&& rhs)$/;"	f	class:mtl::co_str
co_str	include/mtl/win32/mem.h	/^        co_str(const co_str& rhs)$/;"	f	class:mtl::co_str
co_str	include/mtl/win32/mem.h	/^        explicit co_str(const std::wstring& s)$/;"	f	class:mtl::co_str
co_str	include/mtl/win32/mem.h	/^        explicit co_str(const wchar_t* s)$/;"	f	class:mtl::co_str
co_str	include/mtl/win32/mem.h	/^    class co_str$/;"	c	namespace:mtl
codePageEnumProc	include/mtl/win/enc.h	/^			static BOOL CALLBACK codePageEnumProc(LPTSTR lpCodePageString)$/;"	f	class:mtl::details::codepages_enumeration	typeref:typename:BOOL CALLBACK
code_	include/mtl/sdk.h	/^        T code_;$/;"	m	class:mtl::sink	typeref:typename:T
code_page	include/mtl/win/enc.h	/^		unsigned int code_page = CP_UTF8;$/;"	m	struct:mtl::file_encoding	typeref:typename:unsigned int
code_pages	include/mtl/win/enc.h	/^	inline codepages& code_pages()$/;"	f	namespace:mtl	typeref:typename:codepages &
codepage	include/mtl/win/enc.h	/^	using codepage = std::pair<int, std::wstring>;$/;"	t	namespace:mtl	typeref:typename:std::pair<int,std::wstring>
codepages	include/mtl/win/enc.h	/^	using codepages = std::map<int, codepage >;$/;"	t	namespace:mtl	typeref:typename:std::map<int,codepage>
codepages_enumeration	include/mtl/win/enc.h	/^			codepages_enumeration()$/;"	f	class:mtl::details::codepages_enumeration
codepages_enumeration	include/mtl/win/enc.h	/^		class codepages_enumeration$/;"	c	namespace:mtl::details
collection	include/mtl/obj/collection.h	/^    class collection : public dispatch<T,I,LIBID,MAJOR,MINOR>$/;"	c	namespace:mtl
colorTheme	include/mtl/win/wnd.h	/^        std::shared_ptr<color_theme> colorTheme;$/;"	m	class:mtl::wnd	typeref:typename:std::shared_ptr<color_theme>
colorThemeToken_	include/mtl/win/gdi.h	/^        std::wstring colorThemeToken_;$/;"	m	class:mtl::menu	typeref:typename:std::wstring
colorThemeToken_	include/mtl/win/wnd.h	/^        std::wstring colorThemeToken_;$/;"	m	class:mtl::wnd	typeref:typename:std::wstring
colorTheme_	include/mtl/win/gdi.h	/^        std::shared_ptr<color_theme> colorTheme_;$/;"	m	class:mtl::menu	typeref:typename:std::shared_ptr<color_theme>
color_theme	include/mtl/win/wnd.h	/^        color_theme(HFONT hFont, COLORREF text, COLORREF bkg, COLORREF selText, COLORREF selBkg)$/;"	f	class:mtl::color_theme
color_theme	include/mtl/win/wnd.h	/^    class color_theme$/;"	c	namespace:mtl
colorize	include/mtl/scintilla/sci.h	/^	scintilla_wnd& colorize(int start = 0, int end = -1)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
column_layout	include/mtl/win/layout.h	/^		column_layout()$/;"	f	class:mtl::column_layout
column_layout	include/mtl/win/layout.h	/^		column_layout(std::vector<widget>&& widgets)$/;"	f	class:mtl::column_layout
column_layout	include/mtl/win/layout.h	/^	class column_layout : public layout$/;"	c	namespace:mtl
com_dll	include/mtl/fwd.h	/^	class com_dll$/;"	c	namespace:mtl
com_module	include/mtl/win32/module.h	/^	class com_module$/;"	c	namespace:mtl
com_throw	include/mtl/disp/aut.h	/^	inline void com_throw(const std::wstring& err, REFGUID guid, const std::wstring& src)$/;"	f	namespace:mtl	typeref:typename:void
combo_box	include/mtl/win/ctrl.h	/^    class combo_box : public ctrl<combo_box>$/;"	c	namespace:mtl
combo_box_ex	include/mtl/win/ctrl.h	/^        combo_box_ex()$/;"	f	class:mtl::combo_box_ex
combo_box_ex	include/mtl/win/ctrl.h	/^    class combo_box_ex : public ctrl<combo_box_ex>$/;"	c	namespace:mtl
commit	include/mtl/persist/stream.h	/^        void commit()$/;"	f	class:mtl::storage	typeref:typename:void
commit	include/mtl/persist/stream.h	/^        void commit()$/;"	f	class:mtl::storage_view	typeref:typename:void
compatible_dc	include/mtl/win/gdi.h	/^        compatible_dc(HDC hdc = nullptr)$/;"	f	class:mtl::compatible_dc
compatible_dc	include/mtl/win/gdi.h	/^    class compatible_dc : public dc$/;"	c	namespace:mtl
concreteVariant	include/mtl/disp/variant.h	/^			concreteVariant()$/;"	f	class:mtl::details::concreteVariant
concreteVariant	include/mtl/disp/variant.h	/^		class concreteVariant : public variant$/;"	c	namespace:mtl::details
connect	include/mtl/win32/pipe.h	/^        bool connect(int milisecs = 3000)$/;"	f	class:mtl::async_named_pipe	typeref:typename:bool
connect	include/mtl/win32/pipe.h	/^        bool connect(int milisecs = 3000)$/;"	f	class:mtl::named_pipe	typeref:typename:bool
connection_point	include/mtl/ole/cp.h	/^		connection_point(IConnectionPointContainer* cpc)$/;"	f	class:mtl::connection_point
connection_point	include/mtl/ole/cp.h	/^	class connection_point: public implements< connection_point(IConnectionPoint)>$/;"	c	namespace:mtl
connection_point_container	include/mtl/ole/cp.h	/^		connection_point_container()$/;"	f	class:mtl::connection_point_container
connection_point_container	include/mtl/ole/cp.h	/^	class connection_point_container<T(Args...)> : public IConnectionPointContainer$/;"	c	namespace:mtl
connection_point_impl	include/mtl/ole/cp.h	/^		connection_point_impl()$/;"	f	class:mtl::connection_point_impl
connection_point_impl	include/mtl/ole/cp.h	/^		connection_point_impl(IConnectionPointContainer* cpc)$/;"	f	class:mtl::connection_point_impl
connection_point_impl	include/mtl/ole/cp.h	/^	class connection_point_impl : public connection_point$/;"	c	namespace:mtl
connection_points	include/mtl/ole/cp.h	/^		void connection_points()$/;"	f	class:mtl::connection_point_container	typeref:typename:void
container	include/mtl/ole/cp.h	/^		void container(IConnectionPointContainer* c)$/;"	f	class:mtl::connection_point	typeref:typename:void
containerApp_	include/mtl/ole/control.h	/^		std::wstring					containerApp_;$/;"	m	class:mtl::control	typeref:typename:std::wstring
containerObj_	include/mtl/ole/control.h	/^		std::wstring					containerObj_;$/;"	m	class:mtl::control	typeref:typename:std::wstring
content	include/mtl/win32/io.h	/^        bool content(const std::string& data)$/;"	f	class:mtl::file	typeref:typename:bool
content	include/mtl/win32/io.h	/^        std::string content()$/;"	f	class:mtl::file	typeref:typename:std::string
control	include/mtl/ole/control.h	/^		control()$/;"	f	class:mtl::control
control	include/mtl/ole/control.h	/^	class control : public IOleObject, public IOleControl, public IOleInPlaceObject,public data_obj/;"	c	namespace:mtl
convert_eol	include/mtl/scintilla/sci.h	/^	scintilla_wnd& convert_eol(int mode)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
cookie	include/mtl/obj/marshall.h	/^		DWORD cookie = 0;$/;"	m	class:mtl::rotten	typeref:typename:DWORD
cookie	include/mtl/obj/marshall.h	/^		DWORD cookie()$/;"	f	class:mtl::proxy	typeref:typename:DWORD
cookie_	include/mtl/obj/marshall.h	/^		DWORD cookie_ = 0;$/;"	m	class:mtl::proxy	typeref:typename:DWORD
cookies	include/mtl/ole/cp.h	/^	class cookies$/;"	c	namespace:mtl
cookies_	include/mtl/obj/localserver.h	/^		std::vector<DWORD> cookies_;$/;"	m	class:mtl::local_server	typeref:typename:std::vector<DWORD>
cookies_	include/mtl/ole/cp.h	/^		cookies cookies_;$/;"	m	class:mtl::connection_point	typeref:typename:cookies
cookies_	include/mtl/ole/cp.h	/^		std::list<DWORD> cookies_;$/;"	m	class:mtl::cookies	typeref:typename:std::list<DWORD>
copy	include/mtl/edge/chrome.h	/^		void copy()$/;"	f	class:mtl::html_wnd	typeref:typename:void
copy	include/mtl/ole/shell.h	/^			void copy()$/;"	f	class:mtl::shell::folder_view	typeref:typename:void
copy	include/mtl/ole/shell.h	/^		inline int  copy($/;"	f	namespace:mtl::shell	typeref:typename:int
copy	include/mtl/scintilla/sci.h	/^	scintilla_wnd& copy()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
copyTo	include/mtl/disp/variant.h	/^		void copyTo(VARIANT& v) const$/;"	f	class:mtl::variant_view	typeref:typename:void
copyTo	include/mtl/disp/variant.h	/^		void copyTo(VARIANT* v) const$/;"	f	class:mtl::variant_view	typeref:typename:void
copyTo	include/mtl/disp/variant.h	/^	inline void variant_view::copyTo(variant& v) const$/;"	f	class:mtl::variant_view	typeref:typename:void
copy_storage_temp	include/mtl/ole/host.h	/^	inline HRESULT copy_storage_temp(IStorage* src, IStorage** copy)$/;"	f	namespace:mtl	typeref:typename:HRESULT
copy_to	include/mtl/disp/bstr.h	/^		HRESULT copy_to(BSTR* dest) const$/;"	f	class:mtl::bstr	typeref:typename:HRESULT
copy_to	include/mtl/disp/bstr.h	/^		HRESULT copy_to(BSTR* dest) const$/;"	f	class:mtl::bstr_view	typeref:typename:HRESULT
copy_to	include/mtl/disp/sf_array.h	/^			HRESULT copy_to(SAFEARRAY** ppsaOut) const$/;"	f	class:mtl::details::safearray_base	typeref:typename:HRESULT
copy_to	include/mtl/disp/sf_array.h	/^			HRESULT copy_to(VARIANT& var) const$/;"	f	class:mtl::details::safearray_base	typeref:typename:HRESULT
copy_to	include/mtl/disp/variant.h	/^		void copy_to(VARIANT& v) const$/;"	f	class:mtl::variant	typeref:typename:void
copy_to	include/mtl/disp/variant.h	/^		void copy_to(VARIANT* v) const$/;"	f	class:mtl::variant	typeref:typename:void
copy_to	include/mtl/disp/variant.h	/^		void copy_to(variant& v) const$/;"	f	class:mtl::variant	typeref:typename:void
copy_to	include/mtl/persist/stgm.h	/^		HRESULT copy_to(STGMEDIUM* stm)$/;"	f	class:mtl::stg_medium	typeref:typename:HRESULT
count	include/mtl/win/ctrl.h	/^        int count()$/;"	f	class:mtl::combo_box	typeref:typename:int
count	include/mtl/win/ctrl.h	/^        int count()$/;"	f	class:mtl::combo_box_ex	typeref:typename:int
count	include/mtl/win/ctrl.h	/^        int count()$/;"	f	class:mtl::rebar	typeref:typename:int
count	include/mtl/win/ctrl.h	/^        int count()$/;"	f	class:mtl::tab_ctrl	typeref:typename:int
count	include/mtl/win/ctrl.h	/^        int count()$/;"	f	class:mtl::tool_bar	typeref:typename:int
count	include/mtl/win/gdi.h	/^        int count()$/;"	f	class:mtl::menu	typeref:typename:int
cpc_	include/mtl/ole/cp.h	/^		IConnectionPointContainer* cpc_;$/;"	m	class:mtl::connection_point	typeref:typename:IConnectionPointContainer *
cpi_	include/mtl/win/enc.h	/^			CPINFOEX cpi_;$/;"	m	class:mtl::details::codepages_enumeration	typeref:typename:CPINFOEX
cps_	include/mtl/ole/cp.h	/^		std::vector<punk<IConnectionPoint>> cps_;$/;"	m	class:mtl::connection_point_container	typeref:typename:std::vector<punk<IConnectionPoint>>
create	include/mtl/disp/sf_array.h	/^			void create(VARTYPE vt, UINT cdims, SAFEARRAYBOUND* sfb)$/;"	f	class:mtl::details::safearray_base	typeref:typename:void
create	include/mtl/disp/sf_array.h	/^			void create(VARTYPE vt, UINT cdims, const SAFEARRAYBOUND& sfb)$/;"	f	class:mtl::details::safearray_base	typeref:typename:void
create	include/mtl/disp/sf_array.h	/^			void create(VARTYPE vt, int i)$/;"	f	class:mtl::details::safearray_base	typeref:typename:void
create	include/mtl/disp/sf_array.h	/^		void create(const SAFEARRAYBOUND& sfb, UINT cDim = 1)$/;"	f	class:mtl::sf_array	typeref:typename:void
create	include/mtl/persist/stream.h	/^        bool create(DWORD mode = STGM_READWRITE | STGM_SHARE_EXCLUSIVE | STGM_CREATE)$/;"	f	class:mtl::storage	typeref:typename:bool
create	include/mtl/persist/stream.h	/^        bool create(const std::wstring& filename, DWORD mode = STGM_READWRITE | STGM_SHARE_EXCLU/;"	f	class:mtl::storage	typeref:typename:bool
create	include/mtl/persist/xml.h	/^		void create(const CLSID& clsid = CLSID_DOMDocument60)$/;"	f	class:mtl::MsxmlDocument	typeref:typename:void
create	include/mtl/win/ctrl.h	/^        image_list& create(int w, int h, int style = ILC_COLOR32 | ILC_MASK, int n = 1, int max /;"	f	class:mtl::image_list	typeref:typename:image_list &
create	include/mtl/win/gdi.h	/^        HFONT create()$/;"	f	class:mtl::font_desc	typeref:typename:HFONT
create	include/mtl/win/gdi.h	/^        void create()$/;"	f	class:mtl::menu	typeref:typename:void
create	include/mtl/win/gdi.h	/^        void create()$/;"	f	class:mtl::meta_dc	typeref:typename:void
create	include/mtl/win/mdi.h	/^        virtual HWND create(size_t id, HWND parent, RECT& r, int style = WS_CHILD | WS_VISIBLE |/;"	f	class:mtl::mdi_child	typeref:typename:HWND
create	include/mtl/win/mdi.h	/^        virtual HWND create(size_t id, const wchar_t* title, HWND parent, RECT& r, int style = W/;"	f	class:mtl::mdi_child	typeref:typename:HWND
create	include/mtl/win/mdi.h	/^    HWND mdi_child::create($/;"	f	class:mtl::mdi_child	typeref:typename:HWND
create	include/mtl/win/wnd.h	/^        virtual HWND create(const wchar_t* title, int style = WS_OVERLAPPEDWINDOW, int exStyle =/;"	f	class:mtl::wnd	typeref:typename:HWND
create	include/mtl/win/wnd.h	/^        virtual HWND create(size_t id, HWND parent, RECT& r, int style = WS_CHILD | WS_VISIBLE  /;"	f	class:mtl::wnd	typeref:typename:HWND
create	include/mtl/win/wnd.h	/^        virtual HWND create(size_t id, const wchar_t* title, HWND parent, RECT& r, int style = W/;"	f	class:mtl::wnd	typeref:typename:HWND
create	include/mtl/win/wnd.h	/^        virtual HWND create(size_t id,HWND parent, const wchar_t* title = 0)$/;"	f	class:mtl::wnd	typeref:typename:HWND
create	include/mtl/win32/box.h	/^        bool create( ACCEL* accels, int size )$/;"	f	class:mtl::accelerators	typeref:typename:bool
create	include/mtl/win32/box.h	/^        bool create( std::vector<accel> accels )$/;"	f	class:mtl::accelerators	typeref:typename:bool
create	include/mtl/win32/pipe.h	/^        static named_pipe create(const std::wstring& pipename)$/;"	f	class:mtl::named_pipe	typeref:typename:named_pipe
create	include/mtl/win32/pipe.h	/^        static std::shared_ptr<async_named_pipe> create(const std::wstring& pipename)$/;"	f	class:mtl::async_named_pipe	typeref:typename:std::shared_ptr<async_named_pipe>
createElement	include/mtl/persist/xml.h	/^		inline ElementPtr createElement(const meta::EntityName& n, ElementPtr to)$/;"	f	namespace:mtl::impl	typeref:typename:ElementPtr
createWindow	include/mtl/win/ctrl.h	/^        virtual HWND createWindow(const wchar_t* title, HWND parent, RECT& r, int style, int exS/;"	f	class:mtl::tab_ctrl	typeref:typename:HWND
create_bitmap_from_source	include/mtl/ole/img.h	/^        inline HBITMAP create_bitmap_from_source(IWICBitmapSource* ipBitmap)$/;"	f	namespace:mtl::detail	typeref:typename:HBITMAP
create_dir	include/mtl/ole/shell.h	/^		inline bool create_dir(const std::wstring& dirname)$/;"	f	namespace:mtl::shell	typeref:typename:bool
create_document	include/mtl/scintilla/sci.h	/^	SciDoc create_document()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:SciDoc
create_document	include/mtl/win/mdi.h	/^    HWND mdi_frame::create_document(std::wstring title, mdi_child* child, UINT styles , UINT exS/;"	f	class:mtl::mdi_frame	typeref:typename:HWND
create_embedded_object	include/mtl/ole/host.h	/^		HRESULT create_embedded_object(REFCLSID clsid, IStorage* store)$/;"	f	class:mtl::ole_host	typeref:typename:HRESULT
create_flags	include/mtl/win32/io.h	/^        DWORD create_flags = FILE_ATTRIBUTE_NORMAL;$/;"	m	class:mtl::file	typeref:typename:DWORD
create_instance	include/mtl/edge/chrome.h	/^			static punk<I> create_instance(simple_callback<callback<I, Args...>, I, Args...>::callback cb/;"	f	class:mtl::detail::callback	typeref:typename:punk<I>
create_instance	include/mtl/edge/chrome.h	/^			static punk<ICoreWebView2CreateCoreWebView2ControllerCompletedHandler> create_instance(HWND h/;"	f	class:mtl::detail::webview_controller_callback	typeref:typename:punk<ICoreWebView2CreateCoreWebView2ControllerCompletedHandler>
create_instance	include/mtl/edge/chrome.h	/^		static punk<chrome_edge> create_instance(const std::wstring& name)$/;"	f	class:mtl::chrome_edge	typeref:typename:punk<chrome_edge>
create_instance	include/mtl/ole/host.h	/^		static punk<client_site> create_instance(HWND w, IOleInPlaceFrame* f)$/;"	f	class:mtl::client_site	typeref:typename:punk<client_site>
create_instance	include/mtl/ole/host.h	/^		static punk<inplace_frame> create_instance(HWND w)$/;"	f	class:mtl::inplace_frame	typeref:typename:punk<inplace_frame>
create_object	include/mtl/punk.h	/^        HRESULT create_object( int clsctx = CLSCTX_ALL)$/;"	f	class:mtl::punk	typeref:typename:HRESULT
create_object	include/mtl/punk.h	/^        HRESULT create_object(CLSID classId, int clsctx = CLSCTX_ALL)$/;"	f	class:mtl::punk	typeref:typename:HRESULT
create_object	include/mtl/punk.h	/^        HRESULT create_object(const std::wstring& progid, int clsctx = CLSCTX_ALL)$/;"	f	class:mtl::punk	typeref:typename:HRESULT
create_popup	include/mtl/win/gdi.h	/^        void create_popup()$/;"	f	class:mtl::menu	typeref:typename:void
create_stg	include/mtl/persist/stream.h	/^        punk<IStorage> create_stg(const std::wstring& name, DWORD mode = STGM_READWRITE | STGM_S/;"	f	class:mtl::storage	typeref:typename:punk<IStorage>
create_stg	include/mtl/persist/stream.h	/^        punk<IStorage> create_stg(const std::wstring& name, DWORD mode = STGM_READWRITE | STGM_S/;"	f	class:mtl::storage_view	typeref:typename:punk<IStorage>
create_stream	include/mtl/persist/stream.h	/^        punk<IStream> create_stream(const std::wstring& name, DWORD mode = STGM_READWRITE | STGM/;"	f	class:mtl::storage	typeref:typename:punk<IStream>
create_stream	include/mtl/persist/stream.h	/^        punk<IStream> create_stream(const std::wstring& name, DWORD mode = STGM_READWRITE | STGM/;"	f	class:mtl::storage_view	typeref:typename:punk<IStream>
create_webview	include/mtl/edge/chrome.h	/^		void create_webview(HWND hWnd, std::function<void(HRESULT, ICoreWebView2Controller*)> cb)$/;"	f	class:mtl::chrome_edge	typeref:typename:void
create_window	include/mtl/edge/chrome.h	/^		virtual HWND create_window(const wchar_t* title, HWND parent, RECT& r, int style, int exStyle,/;"	f	class:mtl::html_wnd	typeref:typename:HWND
create_window	include/mtl/win/ctrl.h	/^        virtual HWND create_window(const wchar_t* title, HWND parent, RECT& r, int style, int ex/;"	f	class:mtl::ctrl	typeref:typename:HWND
create_window	include/mtl/win/ctrl.h	/^        virtual HWND create_window(const wchar_t* title, HWND parent, RECT& r, int style, int ex/;"	f	class:mtl::rebar	typeref:typename:HWND
create_window	include/mtl/win/ctrl.h	/^        virtual HWND create_window(const wchar_t* title, HWND parent, RECT& r, int style, int ex/;"	f	class:mtl::tool_bar	typeref:typename:HWND
create_window	include/mtl/win/ctrl.h	/^        virtual HWND create_window(const wchar_t* title, HWND parent, RECT& r, int style, int ex/;"	f	class:mtl::tool_tip	typeref:typename:HWND
create_window	include/mtl/win/dlg.h	/^        virtual HWND create_window(const wchar_t* title, HWND parent, RECT& r, int style, int ex/;"	f	class:mtl::dialog	typeref:typename:HWND
create_window	include/mtl/win/wnd.h	/^        virtual HWND create_window(const wchar_t* title, HWND parent, RECT& r, int style, int ex/;"	f	class:mtl::window	typeref:typename:HWND
created	include/mtl/win32/mem.h	/^        std::wstring created() const$/;"	f	class:mtl::file_info	typeref:typename:std::wstring
creation_time	include/mtl/win32/mem.h	/^        const FILETIME& creation_time() const$/;"	f	class:mtl::file_info	typeref:typename:const FILETIME &
ctrl	include/mtl/win/ctrl.h	/^    class ctrl : public wnd$/;"	c	namespace:mtl
ctrl_	include/mtl/ole/control.h	/^			control<T>* ctrl_;$/;"	m	class:mtl::control::ole_inplace_active_obj	typeref:typename:control<T> *
currentItem_	include/mtl/ole/explorer.h	/^		punk<IShellItem>							currentItem_;$/;"	m	class:mtl::explorer_tree	typeref:typename:punk<IShellItem>
currentPath_	include/mtl/ole/explorer.h	/^		std::wstring								currentPath_;$/;"	m	class:mtl::explorer_tree	typeref:typename:std::wstring
current_working_directory	include/mtl/win32/module.h	/^	inline std::wstring current_working_directory()$/;"	f	namespace:mtl	typeref:typename:std::wstring
customize	include/mtl/win/codlg.h	/^        T&  customize(F fun)$/;"	f	class:mtl::file_dialog	typeref:typename:T &
cut	include/mtl/edge/chrome.h	/^		void cut()$/;"	f	class:mtl::html_wnd	typeref:typename:void
cut	include/mtl/ole/shell.h	/^			void cut()$/;"	f	class:mtl::shell::folder_view	typeref:typename:void
cut	include/mtl/scintilla/sci.h	/^	scintilla_wnd& cut()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
cut_	include/mtl/ole/dataobj.h	/^			bool							cut_;$/;"	m	class:mtl::shell::data_object	typeref:typename:bool
data	include/mtl/disp/bstr.h	/^		BSTR data() const$/;"	f	class:mtl::b_move	typeref:typename:BSTR
data	include/mtl/disp/bstr.h	/^		BSTR data() const$/;"	f	class:mtl::bstr	typeref:typename:BSTR
data	include/mtl/disp/bstr.h	/^		BSTR data() const$/;"	f	class:mtl::bstr_view	typeref:typename:BSTR
data	include/mtl/disp/bstr.h	/^		const BSTR data() const$/;"	f	class:mtl::b_copy	typeref:typename:const BSTR
data	include/mtl/disp/bstr.h	/^		const wchar_t* data() const$/;"	f	class:mtl::ole_char	typeref:typename:const wchar_t *
data	include/mtl/win32/io.h	/^            std::string data;$/;"	m	class:mtl::detail::WriteOverLap	typeref:typename:std::string
data	include/mtl/win32/mem.h	/^        T* data()$/;"	f	class:mtl::co_mem	typeref:typename:T *
data	include/mtl/win32/pipe.h	/^            std::ostringstream data;$/;"	m	class:mtl::detail::PipeReadOverlap	typeref:typename:std::ostringstream
data	include/mtl/win32/pipe.h	/^            std::string data;$/;"	m	class:mtl::detail::PipeWriteOverlap	typeref:typename:std::string
dataAdviseHolder_	include/mtl/ole/control.h	/^		punk<IDataAdviseHolder>			dataAdviseHolder_;$/;"	m	class:mtl::control	typeref:typename:punk<IDataAdviseHolder>
dataObject	include/mtl/ole/dataobj.h	/^		IDataObject* dataObject = nullptr;$/;"	m	class:mtl::dataobj_view	typeref:typename:IDataObject *
data_	include/mtl/disp/sf_array.h	/^		T* data_;$/;"	m	class:mtl::sf_array_view	typeref:typename:T *
data_	include/mtl/obj/collection.h	/^        std::vector<C> data_;$/;"	m	class:mtl::collection	typeref:typename:std::vector<C>
data_	include/mtl/win32/mem.h	/^        T* data_;$/;"	m	class:mtl::co_mem	typeref:typename:T *
data_obj	include/mtl/ole/dataobj.h	/^	inline punk<IDataObject> data_obj(CLIPFORMAT cf, void* p, size_t s)$/;"	f	namespace:mtl	typeref:typename:punk<IDataObject>
data_obj	include/mtl/ole/dataobj.h	/^	inline punk<IDataObject> data_obj(format_etc& fe, void* p, size_t s)$/;"	f	namespace:mtl	typeref:typename:punk<IDataObject>
data_obj	include/mtl/ole/dataobj.h	/^	punk<IDataObject> data_obj(CLIPFORMAT cf, const T& t)$/;"	f	namespace:mtl	typeref:typename:punk<IDataObject>
data_obj	include/mtl/ole/dataobj.h	/^	punk<IDataObject> data_obj(format_etc& fe, const T& t)$/;"	f	namespace:mtl	typeref:typename:punk<IDataObject>
data_object	include/mtl/ole/dataobj.h	/^			data_object(std::vector<std::wstring>& v, bool cut = false)$/;"	f	class:mtl::shell::data_object
data_object	include/mtl/ole/dataobj.h	/^		class data_object : public implements<data_object(::mtl::data_object)>$/;"	c	namespace:mtl::shell
data_object	include/mtl/ole/dataobj.h	/^	class data_object : public IDataObject$/;"	c	namespace:mtl
data_transfer_object	include/mtl/ole/dataobj.h	/^		data_transfer_object( format_etc& fe, void* d, size_t s)$/;"	f	class:mtl::data_transfer_object
data_transfer_object	include/mtl/ole/dataobj.h	/^		data_transfer_object()$/;"	f	class:mtl::data_transfer_object
data_transfer_object	include/mtl/ole/dataobj.h	/^		data_transfer_object(format_etc& fe, const std::string& s)$/;"	f	class:mtl::data_transfer_object
data_transfer_object	include/mtl/ole/dataobj.h	/^		data_transfer_object(format_etc& fe, const std::wstring& s)$/;"	f	class:mtl::data_transfer_object
data_transfer_object	include/mtl/ole/dataobj.h	/^		data_transfer_object(format_etc& fe, stg_medium& stgm)$/;"	f	class:mtl::data_transfer_object
data_transfer_object	include/mtl/ole/dataobj.h	/^	class data_transfer_object : public implements<data_transfer_object(data_object)>$/;"	c	namespace:mtl
dataobj_view	include/mtl/ole/dataobj.h	/^		dataobj_view(IDataObject* dataObj)$/;"	f	class:mtl::dataobj_view
dataobj_view	include/mtl/ole/dataobj.h	/^	class dataobj_view$/;"	c	namespace:mtl
dc	include/mtl/win/gdi.h	/^        dc() : hdc_(0) $/;"	f	class:mtl::dc
dc	include/mtl/win/gdi.h	/^        dc(HDC hdc) : hdc_(hdc) $/;"	f	class:mtl::dc
dc	include/mtl/win/gdi.h	/^    class dc$/;"	c	namespace:mtl
declass	include/mtl/win/ctrl.h	/^        void declass()$/;"	f	class:mtl::ctrl	typeref:typename:void
decoration	include/mtl/win/gdi.h	/^        std::wstring decoration()$/;"	f	class:mtl::font_desc	typeref:typename:std::wstring
default_drop_source	include/mtl/ole/dataobj.h	/^	class default_drop_source : public drop_src_base<default_drop_source>$/;"	c	namespace:mtl
default_drop_target	include/mtl/ole/dataobj.h	/^		default_drop_target(format_etc f, DWORD ef = DROPEFFECT_COPY)$/;"	f	class:mtl::default_drop_target
default_drop_target	include/mtl/ole/dataobj.h	/^	class default_drop_target : public drop_target_base<default_drop_target>$/;"	c	namespace:mtl
default_layout	include/mtl/win/layout.h	/^		default_layout()$/;"	f	class:mtl::default_layout
default_layout	include/mtl/win/layout.h	/^		default_layout(std::vector<widget>&& widgets)$/;"	f	class:mtl::default_layout
default_layout	include/mtl/win/layout.h	/^	class default_layout : public layout$/;"	c	namespace:mtl
derives	include/mtl/disp/disp.h	/^		class derives<T(class_info, Args...)> : public provide_class_info<T>, public derives<T(Args.../;"	c	namespace:mtl::details
derives	include/mtl/disp/disp.h	/^		class derives<T(dual<I,LIBID,MAJOR,MINOR>, Args...)> : public dispatch<T, I, LIBID, MAJOR, MIN/;"	c	namespace:mtl::details
derives	include/mtl/disp/disp.h	/^		class derives<T(dual<I>, Args...)> : public dispatch<T,I>, public derives<T(Args...)>$/;"	c	namespace:mtl::details
derives	include/mtl/disp/disp.h	/^		class derives<T(error_info<I>, Args...)> : public support_error_info<I>, public derives<T(Args/;"	c	namespace:mtl::details
derives	include/mtl/obj/impl.h	/^		class derives<C(of<T, I>, Args...)> : public derives<C(Args...)>$/;"	c	namespace:mtl::details
derives	include/mtl/obj/impl.h	/^		class derives<T()>$/;"	c	namespace:mtl::details
derives	include/mtl/obj/impl.h	/^		class derives<T(I, Args...)> : public I, public derives<T(Args...)>$/;"	c	namespace:mtl::details
derives	include/mtl/persist/persist.h	/^        class derives<T(persistable, Args...)> : public persistent<T>, public derives<T(Args...)/;"	c	namespace:mtl::details
derives	include/mtl/persist/persist.h	/^        class derives<T(serializable, Args...)> : public ::mtl::persist_file<T>, public derives</;"	c	namespace:mtl::details
derives	include/mtl/persist/persist.h	/^        class derives<T(storable, Args...)> : public persist_storage<T>, public derives<T(Args../;"	c	namespace:mtl::details
derives	include/mtl/persist/persist.h	/^        class derives<T(streamable, Args...)> : public ::mtl::persist_stream<T>, public derives</;"	c	namespace:mtl::details
desc	include/mtl/scintilla/sci.h	/^		std::string desc;$/;"	m	struct:mtl::XmlStyle	typeref:typename:std::string
description	include/mtl/win/clipboard.h	/^			const wchar_t* description;$/;"	m	struct:mtl::clipboard::format	typeref:typename:const wchar_t *
desk_	include/mtl/ole/shell.h	/^			punk<IShellFolder>				desk_;$/;"	m	class:mtl::shell::folder	typeref:typename:punk<IShellFolder>
desktop	include/mtl/ole/shell.h	/^	inline shell::folder desktop()$/;"	f	namespace:mtl	typeref:typename:shell::folder
destroy	include/mtl/disp/sf_array.h	/^			void destroy()$/;"	f	class:mtl::details::safearray_base	typeref:typename:void
destroy	include/mtl/win/mdi.h	/^        virtual void destroy() override$/;"	f	class:mtl::mdi_child	typeref:typename:void
destroy	include/mtl/win/wnd.h	/^        virtual void destroy()$/;"	f	class:mtl::wnd	typeref:typename:void
destroy_child	include/mtl/win/mdi.h	/^        void destroy_child(HWND wnd)$/;"	f	class:mtl::mdi_frame	typeref:typename:void
detach	include/mtl/disp/sf_array.h	/^			void detach()$/;"	f	class:mtl::details::safearray_base	typeref:typename:void
detach	include/mtl/ole/img.h	/^        HBITMAP detach()$/;"	f	class:mtl::bitmap	typeref:typename:HBITMAP
detach	include/mtl/win/gdi.h	/^        void detach()       { hdc_ = nullptr; }$/;"	f	class:mtl::dc	typeref:typename:void
detach	include/mtl/win/gdi.h	/^        void detach()$/;"	f	class:mtl::menu	typeref:typename:void
detach	include/mtl/win32/box.h	/^        HACCEL detach()$/;"	f	class:mtl::accelerators	typeref:typename:HACCEL
detach	include/mtl/win32/io.h	/^        void detach()$/;"	f	class:mtl::file	typeref:typename:void
detach	include/mtl/win32/mem.h	/^        void detach()$/;"	f	class:mtl::global	typeref:typename:void
detach	include/mtl/win32/pipe.h	/^        HANDLE detach()$/;"	f	class:mtl::async_named_pipe	typeref:typename:HANDLE
detach	include/mtl/win32/pipe.h	/^        HANDLE detach()$/;"	f	class:mtl::named_pipe	typeref:typename:HANDLE
detail	include/mtl/edge/chrome.h	/^	namespace detail {$/;"	n	namespace:mtl
detail	include/mtl/fwd.h	/^	namespace detail {$/;"	n	namespace:mtl
detail	include/mtl/ole/img.h	/^    namespace detail {$/;"	n	namespace:mtl
detail	include/mtl/win32/io.h	/^    namespace detail {$/;"	n	namespace:mtl
detail	include/mtl/win32/pipe.h	/^    namespace detail {$/;"	n	namespace:mtl
details	include/mtl/disp/disp.h	/^	namespace details$/;"	n	namespace:mtl
details	include/mtl/disp/sf_array.h	/^	namespace details {$/;"	n	namespace:mtl
details	include/mtl/disp/variant.h	/^	namespace details {$/;"	n	namespace:mtl
details	include/mtl/obj/collection.h	/^    namespace details$/;"	n	namespace:mtl
details	include/mtl/obj/impl.h	/^	namespace details {$/;"	n	namespace:mtl
details	include/mtl/obj/inproc.h	/^	namespace details {$/;"	n	namespace:mtl
details	include/mtl/obj/localserver.h	/^	namespace details {$/;"	n	namespace:mtl
details	include/mtl/ole/async.h	/^    namespace details {$/;"	n	namespace:mtl
details	include/mtl/ole/control.h	/^	namespace details$/;"	n	namespace:mtl
details	include/mtl/ole/cp.h	/^	namespace details$/;"	n	namespace:mtl
details	include/mtl/ole/dataobj.h	/^	namespace details {$/;"	n	namespace:mtl
details	include/mtl/ole/shell.h	/^		namespace details {$/;"	n	namespace:mtl::shell
details	include/mtl/persist/persist.h	/^    namespace details$/;"	n	namespace:mtl
details	include/mtl/punk.h	/^    namespace details {$/;"	n	namespace:mtl
details	include/mtl/util/base64.h	/^    namespace details {$/;"	n	namespace:mtl
details	include/mtl/win/dlg.h	/^    namespace details {$/;"	n	namespace:mtl
details	include/mtl/win/enc.h	/^	namespace details {$/;"	n	namespace:mtl
details	include/mtl/win/mdi.h	/^    namespace details {$/;"	n	namespace:mtl
dialog	include/mtl/win/dlg.h	/^        dialog()$/;"	f	class:mtl::dialog
dialog	include/mtl/win/dlg.h	/^    class dialog : public wnd$/;"	c	namespace:mtl
dialogProcedure	include/mtl/win/dlg.h	/^        static BOOL CALLBACK dialogProcedure(HWND hwnd, UINT message, WPARAM wParam, LPARAM lPar/;"	f	class:mtl::dialog	typeref:typename:BOOL CALLBACK
dialogProcedure	include/mtl/win/dlg.h	/^        static LRESULT CALLBACK dialogProcedure(HWND hwnd, UINT message, WPARAM wParam, LPARAM l/;"	f	class:mtl::dialog	typeref:typename:LRESULT CALLBACK
dialog_item	include/mtl/win/wnd.h	/^        HWND dialog_item(int id)$/;"	f	class:mtl::wnd	typeref:typename:HWND
dialog_item_int	include/mtl/win/wnd.h	/^        int dialog_item_int(int id, BOOL signedInt = true)$/;"	f	class:mtl::wnd	typeref:typename:int
dialog_item_text	include/mtl/win/wnd.h	/^        std::wstring dialog_item_text(int id)$/;"	f	class:mtl::wnd	typeref:typename:std::wstring
dialogs_	include/mtl/win/wnd.h	/^        std::set<HWND> dialogs_;$/;"	m	class:mtl::modeless_dialogs	typeref:typename:std::set<HWND>
dimension	include/mtl/disp/sf_array.h	/^			UINT dimension() const$/;"	f	class:mtl::details::safearray_base	typeref:typename:UINT
disableDragDrop	include/mtl/edge/chrome.h	/^		bool disableDragDrop = true;$/;"	m	class:mtl::html_wnd	typeref:typename:bool
disconnect	include/mtl/win32/pipe.h	/^        void disconnect()$/;"	f	class:mtl::async_named_pipe	typeref:typename:void
disconnect	include/mtl/win32/pipe.h	/^        void disconnect()$/;"	f	class:mtl::named_pipe	typeref:typename:void
disp_	include/mtl/disp/aut.h	/^		punk<IDispatch> disp_;$/;"	m	class:mtl::automation	typeref:typename:punk<IDispatch>
disp_collection	include/mtl/obj/collection.h	/^    class disp_collection : public collection<punk<IDispatch>,T,I,LIBID,MAJOR,MINOR >$/;"	c	namespace:mtl
dispatch	include/mtl/disp/disp.h	/^		dispatch()$/;"	f	class:mtl::dispatch
dispatch	include/mtl/disp/disp.h	/^	class dispatch : public I$/;"	c	namespace:mtl
dispatch_object	include/mtl/obj/impl.h	/^	class dispatch_object$/;"	c	namespace:mtl
displayFiles_	include/mtl/ole/explorer.h	/^		bool										displayFiles_;$/;"	m	class:mtl::explorer_tree	typeref:typename:bool
displayFiles_	include/mtl/ole/shell.h	/^			bool displayFiles_ = true;$/;"	m	class:mtl::shell::folder_view	typeref:typename:bool
display_files	include/mtl/ole/shell.h	/^			bool display_files()				{ return displayFiles_; }$/;"	f	class:mtl::shell::folder_view	typeref:typename:bool
display_files	include/mtl/ole/shell.h	/^			void display_files(bool b)			{ displayFiles_ = b;  }$/;"	f	class:mtl::shell::folder_view	typeref:typename:void
display_name	include/mtl/ole/shell.h	/^			std::wstring display_name(DWORD flags = SHGDN_FORPARSING)$/;"	f	class:mtl::shell::folder	typeref:typename:std::wstring
display_name	include/mtl/ole/shell.h	/^			std::wstring display_name(LPITEMIDLIST pidl, DWORD flags = SHGDN_FORPARSING)$/;"	f	class:mtl::shell::folder	typeref:typename:std::wstring
display_name	include/mtl/ole/shell.h	/^			std::wstring display_name(shell::folder& parent, DWORD flags = SHGDN_FORPARSING)$/;"	f	class:mtl::shell::folder	typeref:typename:std::wstring
display_name	include/mtl/ole/shell.h	/^			std::wstring display_name(shell::item& shit, DWORD flags = SHGDN_FORPARSING)$/;"	f	class:mtl::shell::folder	typeref:typename:std::wstring
display_rect	include/mtl/win/ctrl.h	/^        RECT display_rect()$/;"	f	class:mtl::tab_ctrl	typeref:typename:RECT
dispose	include/mtl/edge/chrome.h	/^			void dispose()$/;"	f	class:mtl::detail::simple_callback	typeref:typename:void
dispose	include/mtl/edge/chrome.h	/^		void dispose()$/;"	f	class:mtl::chrome_edge	typeref:typename:void
dispose	include/mtl/ole/host.h	/^		void dispose()$/;"	f	class:mtl::ole_host	typeref:typename:void
dispose	include/mtl/win32/mem.h	/^        void dispose()$/;"	f	class:mtl::global	typeref:typename:void
dlg	include/mtl/win/dlg.h	/^        dialog* dlg = nullptr;$/;"	m	class:mtl::dlg_selection	typeref:typename:dialog *
dlg	include/mtl/win/dlg.h	/^        dialog* dlg = nullptr;$/;"	m	class:mtl::dlg_value	typeref:typename:dialog *
dlg_	include/mtl/win/codlg.h	/^        HWND dlg_;$/;"	m	class:mtl::open_dlg	typeref:typename:HWND
dlg_	include/mtl/win/dlg.h	/^            dialog& dlg_;$/;"	m	class:mtl::details::Binder	typeref:typename:dialog &
dlg_bind	include/mtl/win/dlg.h	/^        void dlg_bind(dlg_selection<ID, int>& s)$/;"	f	namespace:mtl::details	typeref:typename:void
dlg_bind	include/mtl/win/dlg.h	/^        void dlg_bind(dlg_selection<ID, std::vector<int>>& s)$/;"	f	namespace:mtl::details	typeref:typename:void
dlg_bind	include/mtl/win/dlg.h	/^        void dlg_bind(dlg_selection<ID, std::vector<std::wstring>>& s)$/;"	f	namespace:mtl::details	typeref:typename:void
dlg_bind	include/mtl/win/dlg.h	/^        void dlg_bind(dlg_selection<ID, std::wstring>& s)$/;"	f	namespace:mtl::details	typeref:typename:void
dlg_bind	include/mtl/win/dlg.h	/^        void dlg_bind(dlg_value<ID, bool>& b)$/;"	f	namespace:mtl::details	typeref:typename:void
dlg_bind	include/mtl/win/dlg.h	/^        void dlg_bind(dlg_value<ID, int>& b)$/;"	f	namespace:mtl::details	typeref:typename:void
dlg_bind	include/mtl/win/dlg.h	/^        void dlg_bind(dlg_value<ID, std::vector<std::wstring>>& b)$/;"	f	namespace:mtl::details	typeref:typename:void
dlg_bind	include/mtl/win/dlg.h	/^        void dlg_bind(dlg_value<ID, std::wstring>& b)$/;"	f	namespace:mtl::details	typeref:typename:void
dlg_selection	include/mtl/win/dlg.h	/^        dlg_selection()$/;"	f	class:mtl::dlg_selection
dlg_selection	include/mtl/win/dlg.h	/^        dlg_selection(const T& t)$/;"	f	class:mtl::dlg_selection
dlg_selection	include/mtl/win/dlg.h	/^    class dlg_selection$/;"	c	namespace:mtl
dlg_sync	include/mtl/win/dlg.h	/^        void dlg_sync(dlg_selection<ID, int>& s)$/;"	f	namespace:mtl::details	typeref:typename:void
dlg_sync	include/mtl/win/dlg.h	/^        void dlg_sync(dlg_selection<ID, std::vector<int>>& s)$/;"	f	namespace:mtl::details	typeref:typename:void
dlg_sync	include/mtl/win/dlg.h	/^        void dlg_sync(dlg_selection<ID, std::vector<std::wstring>>& s)$/;"	f	namespace:mtl::details	typeref:typename:void
dlg_sync	include/mtl/win/dlg.h	/^        void dlg_sync(dlg_selection<ID, std::wstring>& s)$/;"	f	namespace:mtl::details	typeref:typename:void
dlg_sync	include/mtl/win/dlg.h	/^        void dlg_sync(dlg_value<ID, bool>& b)$/;"	f	namespace:mtl::details	typeref:typename:void
dlg_sync	include/mtl/win/dlg.h	/^        void dlg_sync(dlg_value<ID, int>& b)$/;"	f	namespace:mtl::details	typeref:typename:void
dlg_sync	include/mtl/win/dlg.h	/^        void dlg_sync(dlg_value<ID, std::vector<std::wstring>>& b)$/;"	f	namespace:mtl::details	typeref:typename:void
dlg_sync	include/mtl/win/dlg.h	/^        void dlg_sync(dlg_value<ID, std::wstring>& b)$/;"	f	namespace:mtl::details	typeref:typename:void
dlg_value	include/mtl/win/dlg.h	/^        dlg_value()$/;"	f	class:mtl::dlg_value
dlg_value	include/mtl/win/dlg.h	/^        dlg_value(const T& t)$/;"	f	class:mtl::dlg_value
dlg_value	include/mtl/win/dlg.h	/^    class dlg_value$/;"	c	namespace:mtl
do_drag_drop	include/mtl/ole/dataobj.h	/^	bool do_drag_drop( $/;"	f	namespace:mtl	typeref:typename:bool
do_drag_drop	include/mtl/ole/dataobj.h	/^	bool do_drag_drop($/;"	f	namespace:mtl	typeref:typename:bool
do_layout	include/mtl/win/layout.h	/^	inline void column_layout::do_layout(RECT& padded, RECT& p)$/;"	f	class:mtl::column_layout	typeref:typename:void
do_layout	include/mtl/win/layout.h	/^	inline void layout::do_layout(RECT& r, RECT& p)$/;"	f	class:mtl::layout	typeref:typename:void
do_layout	include/mtl/win/layout.h	/^	inline void row_layout::do_layout(RECT& padded, RECT& p)$/;"	f	class:mtl::row_layout	typeref:typename:void
do_layout	include/mtl/win/layout.h	/^	inline void splitter_layout::do_layout(RECT& r, RECT& p)$/;"	f	class:mtl::splitter_layout	typeref:typename:void
doc_	include/mtl/persist/xml.h	/^		punk<IXMLDOMDocument> doc_;$/;"	m	class:mtl::MsxmlDocument	typeref:typename:punk<IXMLDOMDocument>
documentRoot	include/mtl/persist/xml.h	/^		ElementPtr documentRoot()$/;"	f	class:mtl::MsxmlDocument	typeref:typename:ElementPtr
documentTitleChangedToken_	include/mtl/edge/chrome.h	/^		EventRegistrationToken		documentTitleChangedToken_;$/;"	m	class:mtl::html_wnd	typeref:typename:EventRegistrationToken
done	include/mtl/win32/monitor.h	/^		bool done = false;$/;"	m	class:mtl::monitor	typeref:typename:bool
dos2unix	include/mtl/win/enc.h	/^	inline std::string dos2unix(const std::string& in)$/;"	f	namespace:mtl	typeref:typename:std::string
doubleClickTimeout_	include/mtl/ole/explorer.h	/^		DWORD										doubleClickTimeout_;$/;"	m	class:mtl::explorer_tree	typeref:typename:DWORD
dragTabFormat	include/mtl/win/ctrl.h	/^        CLIPFORMAT			                                       dragTabFormat;$/;"	m	class:mtl::tab_ctrl	typeref:typename:CLIPFORMAT
draw	include/mtl/win/ctrl.h	/^        void draw(HDC hdc, int index, int x, int y, int options = ILD_TRANSPARENT)$/;"	f	class:mtl::image_list	typeref:typename:void
draw_text	include/mtl/win/gdi.h	/^        void draw_text(const wchar_t* txt, RECT& r, int flags = DT_LEFT)$/;"	f	class:mtl::dc	typeref:typename:void
dropFiles	include/mtl/ole/dataobj.h	/^		std::vector<std::wstring> dropFiles()$/;"	f	class:mtl::dataobj_view	typeref:typename:std::vector<std::wstring>
dropTarget	include/mtl/win/ctrl.h	/^        punk<default_drop_target>                                  dropTarget;$/;"	m	class:mtl::tab_ctrl	typeref:typename:punk<default_drop_target>
drop_source	include/mtl/ole/dataobj.h	/^	inline punk<IDropSource> drop_source()$/;"	f	namespace:mtl	typeref:typename:punk<IDropSource>
drop_src_base	include/mtl/ole/dataobj.h	/^	class drop_src_base : public implements<T(IDropSource)>$/;"	c	namespace:mtl
drop_target	include/mtl/ole/dataobj.h	/^	inline punk<default_drop_target> drop_target(CLIPFORMAT cf)$/;"	f	namespace:mtl	typeref:typename:punk<default_drop_target>
drop_target	include/mtl/ole/dataobj.h	/^	inline punk<default_drop_target> drop_target(format_etc fe)$/;"	f	namespace:mtl	typeref:typename:punk<default_drop_target>
drop_target_base	include/mtl/ole/dataobj.h	/^	class drop_target_base : public implements<T(IDropTarget)>$/;"	c	namespace:mtl
dual	include/mtl/disp/disp.h	/^	class dual$/;"	c	namespace:mtl
dummy_storage	include/mtl/persist/stgm.h	/^		class dummy_storage : public IStorage$/;"	c	namespace:mtl::ole
dummy_storage	include/mtl/persist/stream.h	/^    class dummy_storage : public implements<stack_object<dummy_storage>(IStorage)>$/;"	c	namespace:mtl
edit_ctrl	include/mtl/win/ctrl.h	/^    class edit_ctrl : public ctrl<edit_ctrl>$/;"	c	namespace:mtl
effect	include/mtl/ole/dataobj.h	/^		DWORD effect = 0;$/;"	m	class:mtl::default_drop_target	typeref:typename:DWORD
ei_	include/mtl/script/script.h	/^		EXCEPINFO							ei_;$/;"	m	class:mtl::active_script	typeref:typename:EXCEPINFO
elevator	include/mtl/win32/pipe.h	/^        elevator($/;"	f	class:mtl::elevator
elevator	include/mtl/win32/pipe.h	/^    class elevator$/;"	c	namespace:mtl
empty	include/mtl/win32/box.h	/^        bool empty() const$/;"	f	class:mtl::thread_box	typeref:typename:bool
enable_dragdrop	include/mtl/win/ctrl.h	/^        void enable_dragdrop()$/;"	f	class:mtl::tab_ctrl	typeref:typename:void
enable_icon	include/mtl/win/ctrl.h	/^        void enable_icon(HICON icon, int w = 16, int h = -1)$/;"	f	class:mtl::tab_ctrl	typeref:typename:void
enabled	include/mtl/ole/img.h	/^            bool enabled = true;$/;"	m	struct:mtl::menu_builder::item	typeref:typename:bool
enabled	include/mtl/win/gdi.h	/^        bool enabled = true;$/;"	m	class:mtl::menu_item	typeref:typename:bool
enabled	include/mtl/win/wnd.h	/^        bool enabled() { return enabled_; }$/;"	f	class:mtl::color_theme	typeref:typename:bool
enabled	include/mtl/win/wnd.h	/^        color_theme& enabled(bool e)$/;"	f	class:mtl::color_theme	typeref:typename:color_theme &
enabled_	include/mtl/win/wnd.h	/^        bool                            enabled_ = true;$/;"	m	class:mtl::color_theme	typeref:typename:bool
encode_str	include/mtl/win/enc.h	/^	inline std::string encode_str(const std::wstring& str, file_encoding& fe)$/;"	f	namespace:mtl	typeref:typename:std::string
encode_utf8	include/mtl/win/enc.h	/^	inline std::string encode_utf8(const std::string& utf8, file_encoding& fe)$/;"	f	namespace:mtl	typeref:typename:std::string
end	include/mtl/win/dlg.h	/^        LRESULT end(int n)$/;"	f	class:mtl::dialog	typeref:typename:LRESULT
engine_	include/mtl/script/script.h	/^		std::wstring						engine_;$/;"	m	class:mtl::active_script	typeref:typename:std::wstring
engine_from_filename	include/mtl/script/script.h	/^std::wstring engine_from_filename(const std::wstring& filename)$/;"	f	namespace:mtl	typeref:typename:std::wstring
enumIdl_	include/mtl/ole/shell.h	/^			punk<IEnumIDList>				enumIdl_;$/;"	m	class:mtl::shell::enumerator	typeref:typename:punk<IEnumIDList>
enumIdl_	include/mtl/ole/shell.h	/^			punk<IEnumIDList>				enumIdl_;$/;"	m	class:mtl::shell::folder	typeref:typename:punk<IEnumIDList>
enum_connection_point	include/mtl/ole/cp.h	/^		enum_connection_point(const std::vector<punk<IConnectionPoint>>& v)$/;"	f	class:mtl::enum_connection_point
enum_connection_point	include/mtl/ole/cp.h	/^	class enum_connection_point : public implements<enum_connection_point(IEnumConnectionPoints)>$/;"	c	namespace:mtl
enum_unknown	include/mtl/obj/enum.h	/^		enum_unknown(const std::vector<punk<IUnknown>>& v)$/;"	f	class:mtl::enum_unknown
enum_unknown	include/mtl/obj/enum.h	/^	class enum_unknown : public implements<enum_unknown(IEnumUnknown)>$/;"	c	namespace:mtl
enum_variant	include/mtl/obj/enum.h	/^		enum_variant(const std::vector<T>& v)$/;"	f	class:mtl::enum_variant
enum_variant	include/mtl/obj/enum.h	/^		enum_variant(const std::vector<variant>& v)$/;"	f	class:mtl::enum_variant
enum_variant	include/mtl/obj/enum.h	/^	class enum_variant : public implements<enum_variant(IEnumVARIANT)>$/;"	c	namespace:mtl
enumerate	include/mtl/obj/marshall.h	/^		std::vector<std::wstring> enumerate()$/;"	f	class:mtl::rot	typeref:typename:std::vector<std::wstring>
enumerate	include/mtl/obj/marshall.h	/^		std::vector<std::wstring> enumerate(const CLSID& clsid)$/;"	f	class:mtl::rot	typeref:typename:std::vector<std::wstring>
enumerate	include/mtl/ole/shell.h	/^			enumerator enumerate(HWND owner = NULL, SHCONTF flags = SHCONTF_FOLDERS | SHCONTF_NONFOLDERS /;"	f	class:mtl::shell::folder	typeref:typename:enumerator
enumerate	include/mtl/win/clipboard.h	/^		static std::vector<format> enumerate()$/;"	f	class:mtl::clipboard	typeref:typename:std::vector<format>
enumerator	include/mtl/ole/shell.h	/^			enumerator()$/;"	f	class:mtl::shell::enumerator
enumerator	include/mtl/ole/shell.h	/^		class enumerator $/;"	c	namespace:mtl::shell
eol	include/mtl/scintilla/sci.h	/^		std::string eol;$/;"	m	struct:mtl::XmlStyle	typeref:typename:std::string
eol	include/mtl/win/enc.h	/^		enum eol_mode { UNIX, DOS } eol;$/;"	m	struct:mtl::file_encoding	typeref:enum:mtl::file_encoding::eol_mode
eol_mode	include/mtl/win/enc.h	/^		enum eol_mode { UNIX, DOS } eol;$/;"	g	struct:mtl::file_encoding
erase	include/mtl/ole/shell.h	/^			void erase()$/;"	f	class:mtl::shell::folder_view	typeref:typename:void
error_info	include/mtl/disp/disp.h	/^	class error_info {};$/;"	c	namespace:mtl
error_info	include/mtl/script/script.h	/^		EXCEPINFO& error_info()$/;"	f	class:mtl::active_script	typeref:typename:EXCEPINFO &
error_msg	include/mtl/sdk.h	/^    inline std::wstring error_msg(DWORD e)$/;"	f	namespace:mtl	typeref:typename:std::wstring
escape_json_str	include/mtl/edge/chrome.h	/^	inline std::wstring escape_json_str(const std::wstring& in)$/;"	f	namespace:mtl	typeref:typename:std::wstring
event	include/mtl/sdk.h	/^    class event<T(Args...)>$/;"	c	namespace:mtl
event	include/mtl/sdk.h	/^    class event<void(Args...)>$/;"	c	namespace:mtl
event_	include/mtl/win32/box.h	/^        HANDLE event_;$/;"	m	class:mtl::thread_box	typeref:typename:HANDLE
exToJson	include/mtl/persist/json.h	/^	inline json exToJson(const std::exception& ex)$/;"	f	namespace:meta	typeref:typename:json
ex_style	include/mtl/win/wnd.h	/^        virtual LONG ex_style() const$/;"	f	class:mtl::wnd	typeref:typename:LONG
exec	include/mtl/script/script.h	/^		virtual HRESULT exec()$/;"	f	class:mtl::active_script	typeref:typename:HRESULT
execute	include/mtl/ole/shell.h	/^			void execute()$/;"	f	class:mtl::shell::folder_view	typeref:typename:void
execute	include/mtl/ole/shell.h	/^		inline BOOL execute(const std::wstring& path, const std::wstring& verb = L"open", int nShow = /;"	f	namespace:mtl::shell	typeref:typename:BOOL
execute_args	include/mtl/ole/shell.h	/^		inline BOOL execute_args($/;"	f	namespace:mtl::shell	typeref:typename:BOOL
executor_	include/mtl/win32/pipe.h	/^        std::wstring executor_;$/;"	m	class:mtl::elevator	typeref:typename:std::wstring
exists	include/mtl/util/path.h	/^    bool exists() const$/;"	f	class:mtl::path	typeref:typename:bool
explorer_tree	include/mtl/ole/explorer.h	/^		explorer_tree()$/;"	f	class:mtl::explorer_tree
explorer_tree	include/mtl/ole/explorer.h	/^	class explorer_tree : public window<explorer_tree>, public implements<stack_object<explorer_tre/;"	c	namespace:mtl
ext	include/mtl/util/path.h	/^	std::wstring ext() const$/;"	f	class:mtl::path	typeref:typename:std::wstring
ext_text_out	include/mtl/win/gdi.h	/^        BOOL ext_text_out(int x, int y, std::wstring t, RECT& r, UINT options = ETO_CLIPPED | ET/;"	f	class:mtl::dc	typeref:typename:BOOL
extension_	include/mtl/win/codlg.h	/^        std::wstring			extension_;$/;"	m	class:mtl::open_dlg	typeref:typename:std::wstring
fd_	include/mtl/win/codlg.h	/^        punk<IFileDialog> fd_;$/;"	m	class:mtl::file_dialog	typeref:typename:punk<IFileDialog>
fe	include/mtl/ole/dataobj.h	/^		format_etc fe;$/;"	m	class:mtl::default_drop_target	typeref:typename:format_etc
fi_	include/mtl/win32/io.h	/^        mtl::file_info fi_;$/;"	m	class:mtl::file	typeref:typename:mtl::file_info
file	include/mtl/win32/io.h	/^        file($/;"	f	class:mtl::file
file	include/mtl/win32/io.h	/^        file(const file& rhs)$/;"	f	class:mtl::file
file	include/mtl/win32/io.h	/^        file(file&& rhs)$/;"	f	class:mtl::file
file	include/mtl/win32/io.h	/^    class file$/;"	c	namespace:mtl
fileHandle	include/mtl/win32/monitor.h	/^		HANDLE fileHandle = nullptr;$/;"	m	class:mtl::monitor	typeref:typename:HANDLE
file_	include/mtl/win32/mem.h	/^        HANDLE				file_;$/;"	m	class:mtl::memory_mapped_file	typeref:typename:HANDLE
file_dialog	include/mtl/win/codlg.h	/^        file_dialog(int options = 0)$/;"	f	class:mtl::file_dialog
file_dialog	include/mtl/win/codlg.h	/^    class file_dialog$/;"	c	namespace:mtl
file_encoding	include/mtl/win/enc.h	/^	struct file_encoding$/;"	s	namespace:mtl
file_icon	include/mtl/ole/shell.h	/^		inline HICON file_icon(const std::wstring& filepath)$/;"	f	namespace:mtl::shell	typeref:typename:HICON
file_info	include/mtl/win32/mem.h	/^    class file_info : public BY_HANDLE_FILE_INFORMATION$/;"	c	namespace:mtl
file_open_dialog	include/mtl/win/codlg.h	/^        file_open_dialog(int options = 0)$/;"	f	class:mtl::file_open_dialog
file_open_dialog	include/mtl/win/codlg.h	/^    class file_open_dialog : public file_dialog< file_open_dialog>$/;"	c	namespace:mtl
file_save_dialog	include/mtl/win/codlg.h	/^        file_save_dialog(int options = 0)$/;"	f	class:mtl::file_save_dialog
file_save_dialog	include/mtl/win/codlg.h	/^    class file_save_dialog : public file_dialog<file_save_dialog>$/;"	c	namespace:mtl
file_size	include/mtl/win32/mem.h	/^        static std::wstring file_size(DWORD hi, DWORD lo)$/;"	f	class:mtl::file_info	typeref:typename:std::wstring
file_size	include/mtl/win32/mem.h	/^        static std::wstring file_size(LARGE_INTEGER li)$/;"	f	class:mtl::file_info	typeref:typename:std::wstring
file_size	include/mtl/win32/mem.h	/^        std::wstring file_size() const$/;"	f	class:mtl::file_info	typeref:typename:std::wstring
file_size_high	include/mtl/win32/mem.h	/^        DWORD file_size_high() const$/;"	f	class:mtl::file_info	typeref:typename:DWORD
file_size_low	include/mtl/win32/mem.h	/^        DWORD file_size_low() const$/;"	f	class:mtl::file_info	typeref:typename:DWORD
file_time_to_sys_time	include/mtl/win32/mem.h	/^        static SYSTEMTIME file_time_to_sys_time(const FILETIME& FileTime)$/;"	f	class:mtl::file_info	typeref:typename:SYSTEMTIME
file_time_to_time_t	include/mtl/win32/io.h	/^    inline time_t file_time_to_time_t(const FILETIME& ft )$/;"	f	namespace:mtl	typeref:typename:time_t
filename	include/mtl/util/path.h	/^    std::wstring filename() const$/;"	f	class:mtl::path	typeref:typename:std::wstring
filename	include/mtl/win/codlg.h	/^        const std::wstring filename(int i = 0)$/;"	f	class:mtl::open_dlg	typeref:typename:const std::wstring
filename	include/mtl/win/codlg.h	/^        void  filename(const std::wstring& s)$/;"	f	class:mtl::open_dlg	typeref:typename:void
filename_	include/mtl/persist/persist.h	/^        std::wstring filename_;$/;"	m	class:mtl::persist_file	typeref:typename:std::wstring
filename_	include/mtl/win/codlg.h	/^        std::wstring			filename_;$/;"	m	class:mtl::open_dlg	typeref:typename:std::wstring
filenames_	include/mtl/win/codlg.h	/^        std::vector<std::wstring> filenames_;$/;"	m	class:mtl::open_dlg	typeref:typename:std::vector<std::wstring>
filetitle_	include/mtl/win/codlg.h	/^        std::wstring			filetitle_;$/;"	m	class:mtl::open_dlg	typeref:typename:std::wstring
fill_rect	include/mtl/win/gdi.h	/^        int fill_rect(const RECT& r, HBRUSH hbr)     { return ::FillRect(hdc_, &r, hbr); }$/;"	f	class:mtl::dc	typeref:typename:int
filter	include/mtl/win/codlg.h	/^        T& filter(const std::vector<std::pair<std::wstring,std::wstring>>& filter)$/;"	f	class:mtl::file_dialog	typeref:typename:T &
filter	include/mtl/win/codlg.h	/^        static const wchar_t* filter()$/;"	f	class:mtl::open_dlg	typeref:typename:const wchar_t *
filter_	include/mtl/win/codlg.h	/^        std::vector<std::pair<std::wstring, std::wstring>> filter_;$/;"	m	class:mtl::file_dialog	typeref:typename:std::vector<std::pair<std::wstring,std::wstring>>
find	include/mtl/win/codlg.h	/^        HWND find(HWND parent, DWORD flags = FR_DOWN, const wchar_t* what = 0)$/;"	f	class:mtl::search_dlg	typeref:typename:HWND
find_child	include/mtl/win/wnd.h	/^    inline HWND find_child(HWND parent, const std::wstring& s)$/;"	f	namespace:mtl	typeref:typename:HWND
find_text	include/mtl/scintilla/sci.h	/^	LRESULT find_text(int searchFlags, Sci_TextToFind* ttf)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:LRESULT
fire	include/mtl/ole/cp.h	/^		void fire(DISPID id, Args ... args)$/;"	f	class:mtl::connection_point	typeref:typename:void
fire	include/mtl/ole/cp.h	/^		void fire(DISPID id, Args ... args)$/;"	f	class:mtl::connection_point_container	typeref:typename:void
fire	include/mtl/sdk.h	/^        void fire(Args ... args)$/;"	f	class:mtl::event	typeref:typename:void
fire	include/mtl/sdk.h	/^        void fire(T id, Args ... args)$/;"	f	class:mtl::event	typeref:typename:void
firstChild	include/mtl/persist/xml.h	/^		inline punk<IXMLDOMElement> firstChild(punk<IXMLDOMElement> parent)$/;"	f	namespace:mtl::impl	typeref:typename:punk<IXMLDOMElement>
flag_	include/mtl/win32/mem.h	/^        DWORD				flag_;$/;"	m	class:mtl::memory_mapped_file	typeref:typename:DWORD
flags	include/mtl/obj/marshall.h	/^		DWORD flags = ROTFLAGS_REGISTRATIONKEEPSALIVE;$/;"	m	class:mtl::rotten	typeref:typename:DWORD
flags	include/mtl/win32/io.h	/^        DWORD flags() const$/;"	f	class:mtl::file	typeref:typename:DWORD
flatten	include/mtl/persist/json.h	/^		inline const std::string flatten(json value)$/;"	f	namespace:mtl::JSON	typeref:typename:const std::string
flush	include/mtl/win32/mem.h	/^        void flush()$/;"	f	class:mtl::memory_mapped_file	typeref:typename:void
fni	include/mtl/win32/monitor.h	/^		FILE_NOTIFY_INFORMATION* fni = nullptr;;$/;"	m	class:mtl::monitor	typeref:typename:FILE_NOTIFY_INFORMATION *
folder	include/mtl/ole/shell.h	/^			folder()$/;"	f	class:mtl::shell::folder
folder	include/mtl/ole/shell.h	/^			folder(IShellFolder* sf)$/;"	f	class:mtl::shell::folder
folder	include/mtl/ole/shell.h	/^			folder(LPITEMIDLIST pidl, folder parent = desktop())$/;"	f	class:mtl::shell::folder
folder	include/mtl/ole/shell.h	/^			folder(const std::wstring& path, DWORD attributes = SFGAO_FOLDER | SFGAO_STREAM | SFGAO_FILES/;"	f	class:mtl::shell::folder
folder	include/mtl/ole/shell.h	/^		class folder$/;"	c	namespace:mtl::shell
folder_view	include/mtl/ole/shell.h	/^			folder_view()$/;"	f	class:mtl::shell::folder_view
folder_view	include/mtl/ole/shell.h	/^		class folder_view : public window<folder_view>,$/;"	c	namespace:mtl::shell
font	include/mtl/scintilla/sci.h	/^		std::string font;$/;"	m	struct:mtl::XmlStyle	typeref:typename:std::string
font	include/mtl/win/codlg.h	/^        LOGFONT* font()$/;"	f	class:mtl::pick_font	typeref:typename:LOGFONT *
font	include/mtl/win/gdi.h	/^        LOGFONT* font()$/;"	f	class:mtl::font_desc	typeref:typename:LOGFONT *
font	include/mtl/win/gdi.h	/^        font()$/;"	f	class:mtl::font
font	include/mtl/win/gdi.h	/^        font(HFONT font)$/;"	f	class:mtl::font
font	include/mtl/win/gdi.h	/^        font(font&& rhs)$/;"	f	class:mtl::font
font	include/mtl/win/gdi.h	/^    class font$/;"	c	namespace:mtl
font	include/mtl/win/wnd.h	/^        HFONT font() { return font_; }$/;"	f	class:mtl::color_theme	typeref:typename:HFONT
font	include/mtl/win/wnd.h	/^        color_theme& font(HFONT f)$/;"	f	class:mtl::color_theme	typeref:typename:color_theme &
fontSize	include/mtl/scintilla/sci.h	/^		int fontSize;$/;"	m	struct:mtl::XmlStyle	typeref:typename:int
font_	include/mtl/win/gdi.h	/^        HFONT font_ = nullptr;$/;"	m	class:mtl::font	typeref:typename:HFONT
font_	include/mtl/win/wnd.h	/^        HFONT   						font_;$/;"	m	class:mtl::color_theme	typeref:typename:HFONT
font_desc	include/mtl/win/gdi.h	/^        font_desc()$/;"	f	class:mtl::font_desc
font_desc	include/mtl/win/gdi.h	/^        font_desc(HFONT hfont)$/;"	f	class:mtl::font_desc
font_desc	include/mtl/win/gdi.h	/^        font_desc(LOGFONT* font)$/;"	f	class:mtl::font_desc
font_desc	include/mtl/win/gdi.h	/^        font_desc(const font_desc& rhs)$/;"	f	class:mtl::font_desc
font_desc	include/mtl/win/gdi.h	/^        font_desc(const std::wstring& font, int size)$/;"	f	class:mtl::font_desc
font_desc	include/mtl/win/gdi.h	/^        font_desc(font_desc&& rhs)$/;"	f	class:mtl::font_desc
font_desc	include/mtl/win/gdi.h	/^    class font_desc$/;"	c	namespace:mtl
forEach	include/mtl/win/ctrl.h	/^        void forEach(std::function<void(tab& tci)> visitor)$/;"	f	class:mtl::tab_ctrl	typeref:typename:void
forEach	include/mtl/win/gdi.h	/^        void forEach(std::function<void(menu_item&)> visitor)$/;"	f	class:mtl::menu	typeref:typename:void
forEachChildElement	include/mtl/persist/xml.h	/^		inline void forEachChildElement( std::function<void(punk<IXMLDOMElement>)> cb, punk<IXMLDOMEle/;"	f	namespace:mtl::impl	typeref:typename:void
foreCol_	include/mtl/ole/explorer.h	/^		OLE_COLOR									foreCol_;$/;"	m	class:mtl::explorer_tree	typeref:typename:OLE_COLOR
foreColor	include/mtl/scintilla/sci.h	/^		std::string foreColor;$/;"	m	struct:mtl::XmlStyle	typeref:typename:std::string
format	include/mtl/persist/stgm.h	/^		virtual UINT format() override$/;"	f	struct:mtl::format_etc_dropeffect	typeref:typename:UINT
format	include/mtl/persist/stgm.h	/^		virtual UINT format() override$/;"	f	struct:mtl::format_etc_pref_dropeffect	typeref:typename:UINT
format	include/mtl/persist/stgm.h	/^		virtual UINT format()$/;"	f	struct:mtl::format_etc	typeref:typename:UINT
format	include/mtl/win/clipboard.h	/^			format(int id, const wchar_t* desc)$/;"	f	struct:mtl::clipboard::format
format	include/mtl/win/clipboard.h	/^		struct format$/;"	s	class:mtl::clipboard
format_description	include/mtl/win/clipboard.h	/^		static std::map<int, const wchar_t*>& format_description()$/;"	f	class:mtl::clipboard	typeref:typename:std::map<int,const wchar_t * > &
format_etc	include/mtl/persist/stgm.h	/^		format_etc($/;"	f	struct:mtl::format_etc
format_etc	include/mtl/persist/stgm.h	/^		format_etc(const FORMATETC& rhs)$/;"	f	struct:mtl::format_etc
format_etc	include/mtl/persist/stgm.h	/^	struct format_etc : public FORMATETC$/;"	s	namespace:mtl
format_etc_dropeffect	include/mtl/persist/stgm.h	/^		format_etc_dropeffect() : format_etc(format(), NULL, DVASPECT_CONTENT, -1, TYMED_HGLOBAL) {}$/;"	f	struct:mtl::format_etc_dropeffect
format_etc_dropeffect	include/mtl/persist/stgm.h	/^	struct format_etc_dropeffect : public format_etc$/;"	s	namespace:mtl
format_etc_dropfile	include/mtl/persist/stgm.h	/^		format_etc_dropfile() : format_etc(CF_HDROP, NULL, DVASPECT_CONTENT, -1, TYMED_HGLOBAL) {}$/;"	f	struct:mtl::format_etc_dropfile
format_etc_dropfile	include/mtl/persist/stgm.h	/^	struct format_etc_dropfile : public format_etc$/;"	s	namespace:mtl
format_etc_pref_dropeffect	include/mtl/persist/stgm.h	/^		format_etc_pref_dropeffect() : format_etc(format(), NULL, DVASPECT_CONTENT, -1, TYMED_HGLOBAL)/;"	f	struct:mtl::format_etc_pref_dropeffect
format_etc_pref_dropeffect	include/mtl/persist/stgm.h	/^	struct format_etc_pref_dropeffect : public format_etc$/;"	s	namespace:mtl
format_etc_text	include/mtl/persist/stgm.h	/^		format_etc_text() : format_etc(CF_TEXT, NULL, DVASPECT_CONTENT, -1, TYMED_HGLOBAL) {}$/;"	f	struct:mtl::format_etc_text
format_etc_text	include/mtl/persist/stgm.h	/^	struct format_etc_text : public format_etc$/;"	s	namespace:mtl
format_etc_unicodetext	include/mtl/persist/stgm.h	/^		format_etc_unicodetext() : format_etc(CF_UNICODETEXT, NULL, DVASPECT_CONTENT, -1, TYMED_HGLOBA/;"	f	struct:mtl::format_etc_unicodetext
format_etc_unicodetext	include/mtl/persist/stgm.h	/^	struct format_etc_unicodetext : public format_etc$/;"	s	namespace:mtl
format_id	include/mtl/win/clipboard.h	/^			int format_id;$/;"	m	struct:mtl::clipboard::format	typeref:typename:int
formats_	include/mtl/ole/dataobj.h	/^		std::map<format_etc, stg_medium> formats_;$/;"	m	class:mtl::data_object	typeref:typename:std::map<format_etc,stg_medium>
forward	include/mtl/edge/chrome.h	/^		void forward()$/;"	f	class:mtl::html_wnd	typeref:typename:void
frame	include/mtl/ole/host.h	/^		punk<inplace_frame>	frame;$/;"	m	class:mtl::ole_host	typeref:typename:punk<inplace_frame>
frame_	include/mtl/ole/control.h	/^		punk<IOleInPlaceFrame>			frame_;$/;"	m	class:mtl::control	typeref:typename:punk<IOleInPlaceFrame>
frame_	include/mtl/ole/host.h	/^		punk<IOleInPlaceFrame> frame_;$/;"	m	class:mtl::client_site	typeref:typename:punk<IOleInPlaceFrame>
frame_rect	include/mtl/win/gdi.h	/^        int frame_rect(const RECT& r, HBRUSH hbr)    { return ::FrameRect(hdc_, &r, hbr); }$/;"	f	class:mtl::dc	typeref:typename:int
free	include/mtl/win/wnd.h	/^        void free()$/;"	f	class:mtl::color_theme	typeref:typename:void
free	include/mtl/win32/box.h	/^        void free()$/;"	f	class:mtl::accelerators	typeref:typename:void
free_cookies_	include/mtl/ole/cp.h	/^		std::list<DWORD> free_cookies_;$/;"	m	class:mtl::cookies	typeref:typename:std::list<DWORD>
fromJson	include/mtl/persist/json.h	/^		inline void fromJson(const char* name, const json& from, bool& t)$/;"	f	namespace:meta::impl	typeref:typename:void
fromJson	include/mtl/persist/json.h	/^		inline void fromJson(const char* name, const json& from, char& t)$/;"	f	namespace:meta::impl	typeref:typename:void
fromJson	include/mtl/persist/json.h	/^		inline void fromJson(const char* name, const json& from, double& t)$/;"	f	namespace:meta::impl	typeref:typename:void
fromJson	include/mtl/persist/json.h	/^		inline void fromJson(const char* name, const json& from, float& t)$/;"	f	namespace:meta::impl	typeref:typename:void
fromJson	include/mtl/persist/json.h	/^		inline void fromJson(const char* name, const json& from, int& t)$/;"	f	namespace:meta::impl	typeref:typename:void
fromJson	include/mtl/persist/json.h	/^		inline void fromJson(const char* name, const json& from, json& to)$/;"	f	namespace:meta::impl	typeref:typename:void
fromJson	include/mtl/persist/json.h	/^		inline void fromJson(const char* name, const json& from, long long& t)$/;"	f	namespace:meta::impl	typeref:typename:void
fromJson	include/mtl/persist/json.h	/^		inline void fromJson(const char* name, const json& from, std::string& t)$/;"	f	namespace:meta::impl	typeref:typename:void
fromJson	include/mtl/persist/json.h	/^		inline void fromJson(const char* name, const json& from, unsigned char& t)$/;"	f	namespace:meta::impl	typeref:typename:void
fromJson	include/mtl/persist/json.h	/^		inline void fromJson(const char* name, const json& from, unsigned int& t)$/;"	f	namespace:meta::impl	typeref:typename:void
fromJson	include/mtl/persist/json.h	/^		inline void fromJson(const char* name, const json& from, unsigned long long& t)$/;"	f	namespace:meta::impl	typeref:typename:void
fromJson	include/mtl/persist/json.h	/^		void fromJson(const char* name, const json& from, T& t)$/;"	f	namespace:meta::impl	typeref:typename:void
fromJson	include/mtl/persist/json.h	/^		void fromJson(const char* name, const json& from, std::vector<T>& v)$/;"	f	namespace:meta::impl	typeref:typename:void
fromJson	include/mtl/persist/json.h	/^	void fromJson(const json& from, T& t)$/;"	f	namespace:meta	typeref:typename:void
fromJson	include/mtl/persist/json.h	/^	void fromJson(const std::string& from, T& t)$/;"	f	namespace:meta	typeref:typename:void
fromXml	include/mtl/persist/expat.h	/^        inline void fromXml(const meta::EntityName& name, patex::xml::ElementPtr from, ::mtl::bs/;"	f	namespace:meta::impl	typeref:typename:void
fromXml	include/mtl/persist/expat.h	/^        inline void fromXml(const meta::EntityName& name, patex::xml::ElementPtr from, ::mtl::pu/;"	f	namespace:meta::impl	typeref:typename:void
fromXml	include/mtl/persist/expat.h	/^        inline void fromXml(const meta::EntityName& name, patex::xml::ElementPtr from, ::mtl::va/;"	f	namespace:meta::impl	typeref:typename:void
fromXml	include/mtl/persist/xml.h	/^		inline std::string fromXml(const meta::EntityName& name, ElementPtr from)$/;"	f	namespace:mtl::impl	typeref:typename:std::string
fromXml	include/mtl/persist/xml.h	/^		inline void fromXml(const meta::EntityName& name, ElementPtr from, bstr& to)$/;"	f	namespace:mtl::impl	typeref:typename:void
fromXml	include/mtl/persist/xml.h	/^		inline void fromXml(const meta::EntityName& name, ElementPtr from, std::string& to)$/;"	f	namespace:mtl::impl	typeref:typename:void
fromXml	include/mtl/persist/xml.h	/^		inline void fromXml(const meta::EntityName& name, ElementPtr from, variant& to)$/;"	f	namespace:mtl::impl	typeref:typename:void
fromXml	include/mtl/persist/xml.h	/^		void fromXml(const meta::EntityName& name, ElementPtr from, T& to, typename std::enable_if<std/;"	f	namespace:mtl::impl	typeref:typename:void
fromXml	include/mtl/persist/xml.h	/^		void fromXml(const meta::EntityName& name, ElementPtr from, punk<T>& to)$/;"	f	namespace:mtl::impl	typeref:typename:void
fromXml	include/mtl/persist/xml.h	/^		void fromXml(const meta::EntityName& name, ElementPtr from, std::vector<T>& to)$/;"	f	namespace:mtl::impl	typeref:typename:void
fromXml	include/mtl/persist/xml.h	/^	void fromXml(ElementPtr from, T& to, typename std::enable_if<std::is_class<T>::value>::type* = /;"	f	namespace:mtl	typeref:typename:void
fromXml	include/mtl/persist/xml.h	/^	void fromXml(ElementPtr from, std::vector<T>& to, typename std::enable_if<std::is_class<T>::val/;"	f	namespace:mtl	typeref:typename:void
fromXml	include/mtl/persist/xml.h	/^	void fromXml(const std::string& xml, T& t)$/;"	f	namespace:mtl	typeref:typename:void
fromXml	include/mtl/persist/xml.h	/^	void fromXml(punk<IXMLDOMDocument> doc, T& t)$/;"	f	namespace:mtl	typeref:typename:void
from_clsid	include/mtl/punk.h	/^        from_clsid(const CLSID& cls, int ctx = CLSCTX_ALL)$/;"	f	struct:mtl::from_clsid
from_clsid	include/mtl/punk.h	/^    struct from_clsid$/;"	s	namespace:mtl
from_object	include/mtl/punk.h	/^        from_object(int ctx = CLSCTX_ALL)$/;"	f	struct:mtl::from_object
from_object	include/mtl/punk.h	/^    struct from_object$/;"	s	namespace:mtl
from_olechar	include/mtl/disp/bstr.h	/^	inline bstr from_olechar(const std::wstring& str)$/;"	f	namespace:mtl	typeref:typename:bstr
from_olechar	include/mtl/disp/bstr.h	/^	inline bstr from_olechar(wchar_t* str, size_t len = -1)$/;"	f	namespace:mtl	typeref:typename:bstr
from_progid	include/mtl/punk.h	/^        from_progid(const std::string& progid, int ctx = CLSCTX_ALL)$/;"	f	struct:mtl::from_progid
from_progid	include/mtl/punk.h	/^    struct from_progid$/;"	s	namespace:mtl
frp_	include/mtl/win/codlg.h	/^        FINDREPLACE frp_;$/;"	m	class:mtl::search_dlg	typeref:typename:FINDREPLACE
fsize	include/mtl/win32/io.h	/^            unsigned long long fsize = 0;$/;"	m	class:mtl::detail::ReadOverLap	typeref:typename:unsigned long long
fsize	include/mtl/win32/io.h	/^        unsigned long long fsize = 0;$/;"	m	class:mtl::file	typeref:typename:unsigned long long
fsize_	include/mtl/win32/mem.h	/^        unsigned long long	fsize_;$/;"	m	class:mtl::memory_mapped_file	typeref:typename:unsigned long long
get	include/mtl/disp/aut.h	/^		variant get(DISPID id = -1)$/;"	f	class:mtl::automation	typeref:typename:variant
get	include/mtl/ole/cp.h	/^		DWORD get()$/;"	f	class:mtl::cookies	typeref:typename:DWORD
get	include/mtl/ole/img.h	/^        HBITMAP get(const wchar_t* path)$/;"	f	class:mtl::bitmap_cache	typeref:typename:HBITMAP
get	include/mtl/ole/img.h	/^        HBITMAP get(const wchar_t* path, int w, int h)$/;"	f	class:mtl::bitmap_cache	typeref:typename:HBITMAP
get	include/mtl/ole/img.h	/^        HBITMAP get(int id)$/;"	f	class:mtl::bitmap_cache	typeref:typename:HBITMAP
get	include/mtl/ole/img.h	/^        HBITMAP get(int id, int w, int h)$/;"	f	class:mtl::bitmap_cache	typeref:typename:HBITMAP
get	include/mtl/win/clipboard.h	/^		static HANDLE get(UINT format)$/;"	f	class:mtl::clipboard	typeref:typename:HANDLE
get	include/mtl/win32/box.h	/^        std::vector<accel> get()$/;"	f	class:mtl::accelerators	typeref:typename:std::vector<accel>
get	include/mtl/win32/mem.h	/^            T get()$/;"	f	class:mtl::global::lock	typeref:typename:T
getBar	include/mtl/win/ctrl.h	/^        void getBar(int idx, REBARBANDINFO* rbi)$/;"	f	class:mtl::rebar	typeref:typename:void
getBitmapIndex	include/mtl/win/ctrl.h	/^        size_t getBitmapIndex(int id)$/;"	f	class:mtl::tool_bar	typeref:typename:size_t
getChildElement	include/mtl/persist/xml.h	/^		inline punk<IXMLDOMElement> getChildElement(punk<IXMLDOMElement> parent, const char* name, con/;"	f	namespace:mtl::impl	typeref:typename:punk<IXMLDOMElement>
getChildElementText	include/mtl/persist/xml.h	/^		inline std::string getChildElementText(punk<IXMLDOMElement> parent, const char* name, const ch/;"	f	namespace:mtl::impl	typeref:typename:std::string
getElemsize	include/mtl/disp/sf_array.h	/^			UINT getElemsize() const$/;"	f	class:mtl::details::safearray_base	typeref:typename:UINT
getEncoding	include/mtl/win/enc.h	/^			file_encoding  getEncoding( const std::string& str,  const std::string& h)$/;"	f	class:mtl::details::FileSniffer	typeref:typename:file_encoding
getIID	include/mtl/disp/sf_array.h	/^			HRESULT getIID(GUID* pguid) const$/;"	f	class:mtl::details::safearray_base	typeref:typename:HRESULT
getLBound	include/mtl/disp/sf_array.h	/^			HRESULT getLBound(long* pLbound, long dim = 1) const$/;"	f	class:mtl::details::safearray_base	typeref:typename:HRESULT
getObject	include/mtl/obj/marshall.h	/^		static mtl::punk<IUnknown> getObject(const std::wstring& id)$/;"	f	class:mtl::rot	typeref:typename:mtl::punk<IUnknown>
getPageSize	include/mtl/win32/mem.h	/^        static unsigned long getPageSize()$/;"	f	class:mtl::memory_mapped_file	typeref:typename:unsigned long
getScriptEngine	include/mtl/script/script.h	/^		HRESULT getScriptEngine(const std::wstring& engine, IActiveScript** ppas)$/;"	f	class:mtl::active_script	typeref:typename:HRESULT
getSelection	include/mtl/ole/explorer.h	/^		std::wstring getSelection()$/;"	f	class:mtl::explorer_tree	typeref:typename:std::wstring
getTabCtrlItem	include/mtl/win/ctrl.h	/^        tab* getTabCtrlItem(int i)$/;"	f	class:mtl::tab_ctrl	typeref:typename:tab *
getUBound	include/mtl/disp/sf_array.h	/^			HRESULT getUBound(long* pLbound, long dim = 1) const$/;"	f	class:mtl::details::safearray_base	typeref:typename:HRESULT
getVartype	include/mtl/disp/sf_array.h	/^			HRESULT getVartype(VARTYPE* pvt) const$/;"	f	class:mtl::details::safearray_base	typeref:typename:HRESULT
get_Count	include/mtl/obj/collection.h	/^        virtual  HRESULT __stdcall get_Count(long* cnt)$/;"	f	class:mtl::collection	typeref:typename:HRESULT __stdcall
get_Length	include/mtl/obj/collection.h	/^        virtual  HRESULT __stdcall get_Length(long* cnt)$/;"	f	class:mtl::collection	typeref:typename:HRESULT __stdcall
get_Size	include/mtl/obj/collection.h	/^        virtual  HRESULT __stdcall get_Size(long* cnt)$/;"	f	class:mtl::collection	typeref:typename:HRESULT __stdcall
get_backspace_unindents	include/mtl/scintilla/sci.h	/^	bool get_backspace_unindents()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:bool
get_button	include/mtl/win/ctrl.h	/^        void get_button(int idx, TBBUTTON* tb)$/;"	f	class:mtl::tool_bar	typeref:typename:void
get_button_by_cmd	include/mtl/win/ctrl.h	/^        void get_button_by_cmd(int iCmd, TBBUTTON* tb)$/;"	f	class:mtl::tool_bar	typeref:typename:void
get_caret_width	include/mtl/scintilla/sci.h	/^	int get_caret_width()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:int
get_char_at	include/mtl/scintilla/sci.h	/^	char get_char_at(int pos)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:char
get_class_object	include/mtl/obj/inproc.h	/^		class get_class_object<void()>$/;"	c	namespace:mtl::details
get_class_object	include/mtl/obj/inproc.h	/^		class get_class_object<void(T, Args...)>$/;"	c	namespace:mtl::details
get_dlg_item	include/mtl/win/dlg.h	/^        HWND get_dlg_item(int id)$/;"	f	class:mtl::dialog	typeref:typename:HWND
get_dlg_item_checked	include/mtl/win/dlg.h	/^        bool  get_dlg_item_checked(int id)$/;"	f	class:mtl::dialog	typeref:typename:bool
get_dlg_item_count	include/mtl/win/dlg.h	/^        int get_dlg_item_count(int id)$/;"	f	class:mtl::dialog	typeref:typename:int
get_dlg_item_index	include/mtl/win/dlg.h	/^        int get_dlg_item_index(int id)$/;"	f	class:mtl::dialog	typeref:typename:int
get_dlg_item_int	include/mtl/win/dlg.h	/^        int get_dlg_item_int(int id)$/;"	f	class:mtl::dialog	typeref:typename:int
get_dlg_item_multi_select_index	include/mtl/win/dlg.h	/^        std::vector<int> get_dlg_item_multi_select_index(int id)$/;"	f	class:mtl::dialog	typeref:typename:std::vector<int>
get_dlg_item_multi_select_text	include/mtl/win/dlg.h	/^        std::vector<std::wstring> get_dlg_item_multi_select_text(int id)$/;"	f	class:mtl::dialog	typeref:typename:std::vector<std::wstring>
get_dlg_item_text	include/mtl/win/dlg.h	/^        std::wstring get_dlg_item_text(int id)$/;"	f	class:mtl::dialog	typeref:typename:std::wstring
get_dlg_item_text	include/mtl/win/dlg.h	/^        std::wstring get_dlg_item_text(int id, int index)$/;"	f	class:mtl::dialog	typeref:typename:std::wstring
get_document	include/mtl/scintilla/sci.h	/^	SciDoc get_document()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:SciDoc
get_eol_mode	include/mtl/scintilla/sci.h	/^	int get_eol_mode()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:int
get_first_visible_line	include/mtl/scintilla/sci.h	/^	int get_first_visible_line()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:int
get_focus	include/mtl/scintilla/sci.h	/^	LRESULT get_focus()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:LRESULT
get_icon	include/mtl/win/wnd.h	/^        HICON get_icon(int type = 0)$/;"	f	class:mtl::wnd	typeref:typename:HICON
get_indent	include/mtl/scintilla/sci.h	/^	int get_indent()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:int
get_interface	include/mtl/obj/marshall.h	/^		HRESULT get_interface(DWORD cookie, T** t)$/;"	f	class:mtl::git	typeref:typename:HRESULT
get_length	include/mtl/scintilla/sci.h	/^	int get_length()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:int
get_lexer	include/mtl/scintilla/sci.h	/^	int get_lexer()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:int
get_line_count	include/mtl/scintilla/sci.h	/^	int get_line_count()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:int
get_line_indent	include/mtl/scintilla/sci.h	/^	int get_line_indent(int l)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:int
get_line_length	include/mtl/scintilla/sci.h	/^	int get_line_length(int line)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:int
get_lines_on_screen	include/mtl/scintilla/sci.h	/^	int get_lines_on_screen()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:int
get_margin_type	include/mtl/scintilla/sci.h	/^	int get_margin_type(int margin)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:int
get_margin_width	include/mtl/scintilla/sci.h	/^	int get_margin_width(int margin)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:int
get_markers	include/mtl/scintilla/sci.h	/^	std::set<int> get_markers()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:std::set<int>
get_menu	include/mtl/win/wnd.h	/^        virtual HMENU get_menu() const$/;"	f	class:mtl::wnd	typeref:typename:HMENU
get_modified	include/mtl/scintilla/sci.h	/^	bool get_modified()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:bool
get_object	include/mtl/obj/marshall.h	/^		static mtl::punk<IUnknown> get_object(const CLSID& clsid, const std::wstring& id)$/;"	f	class:mtl::rot	typeref:typename:mtl::punk<IUnknown>
get_overtype	include/mtl/scintilla/sci.h	/^	bool get_overtype()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:bool
get_path	include/mtl/util/path.h	/^	const path get_path() const$/;"	f	class:mtl::path	typeref:typename:const path
get_read_only	include/mtl/scintilla/sci.h	/^	bool get_read_only(bool b)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:bool
get_script_dispatch	include/mtl/script/script.h	/^		virtual HRESULT get_script_dispatch(const std::wstring& script, IDispatch** ppdisp)$/;"	f	class:mtl::active_script	typeref:typename:HRESULT
get_scroll_max	include/mtl/win/wnd.h	/^        unsigned int  get_scroll_max(int sb = SB_VERT)$/;"	f	class:mtl::scroll_wnd	typeref:typename:unsigned int
get_scroll_pos	include/mtl/win/wnd.h	/^        unsigned int  get_scroll_pos(int sb = SB_VERT)$/;"	f	class:mtl::scroll_wnd	typeref:typename:unsigned int
get_scroll_width	include/mtl/scintilla/sci.h	/^	int get_scroll_width()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:int
get_selection_end	include/mtl/scintilla/sci.h	/^	int get_selection_end()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:int
get_selection_start	include/mtl/scintilla/sci.h	/^	int get_selection_start()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:int
get_self_module	include/mtl/win32/module.h	/^	inline HMODULE get_self_module()$/;"	f	namespace:mtl	typeref:typename:HMODULE
get_tab_indents	include/mtl/scintilla/sci.h	/^	bool get_tab_indents()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:bool
get_tab_width	include/mtl/scintilla/sci.h	/^	int get_tab_width()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:int
get_text	include/mtl/scintilla/sci.h	/^	std::string get_text()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:std::string
get_text	include/mtl/win/wnd.h	/^        std::wstring get_text()$/;"	f	class:mtl::wnd	typeref:typename:std::wstring
get_use_tabs	include/mtl/scintilla/sci.h	/^	bool get_use_tabs()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:bool
get_view_eol	include/mtl/scintilla/sci.h	/^	bool get_view_eol()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:bool
get_view_submenu	include/mtl/win/mdi.h	/^        HMENU get_view_submenu(HMENU menu, int pos = -1)$/;"	f	namespace:mtl::details	typeref:typename:HMENU
get_zoom	include/mtl/scintilla/sci.h	/^	int get_zoom()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:int
git	include/mtl/obj/marshall.h	/^		git()$/;"	f	class:mtl::git
git	include/mtl/obj/marshall.h	/^	class git$/;"	c	namespace:mtl
git_	include/mtl/obj/marshall.h	/^		punk<IGlobalInterfaceTable> git_;$/;"	m	class:mtl::git	typeref:typename:punk<IGlobalInterfaceTable>
global	include/mtl/win32/mem.h	/^        global()$/;"	f	class:mtl::global
global	include/mtl/win32/mem.h	/^        global(HGLOBAL glob)$/;"	f	class:mtl::global
global	include/mtl/win32/mem.h	/^        global(const std::string& s, int flags = GMEM_MOVEABLE | GMEM_NODISCARD)$/;"	f	class:mtl::global
global	include/mtl/win32/mem.h	/^        global(const std::wstring& s, int flags = GMEM_MOVEABLE | GMEM_NODISCARD)$/;"	f	class:mtl::global
global	include/mtl/win32/mem.h	/^        global(void* t, size_t s, int flags = GMEM_MOVEABLE | GMEM_NODISCARD)$/;"	f	class:mtl::global
global	include/mtl/win32/mem.h	/^    class global$/;"	c	namespace:mtl
global_	include/mtl/win32/mem.h	/^            HGLOBAL global_;$/;"	m	class:mtl::global::lock	typeref:typename:HGLOBAL
global_	include/mtl/win32/mem.h	/^        HGLOBAL global_ = nullptr;$/;"	m	class:mtl::global	typeref:typename:HGLOBAL
goto_line	include/mtl/scintilla/sci.h	/^	scintilla_wnd& goto_line(int line)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
gui	include/mtl/ole/img.h	/^    inline ui& gui()$/;"	f	namespace:mtl	typeref:typename:ui &
guid_to_string	include/mtl/sdk.h	/^    inline std::wstring guid_to_string(const GUID& guid)$/;"	f	namespace:mtl	typeref:typename:std::wstring
h	include/mtl/win/ctrl.h	/^        int h = 0;$/;"	m	class:mtl::combo_box_ex	typeref:typename:int
h	include/mtl/win/ctrl.h	/^        int h = 32;$/;"	m	class:mtl::tool_bar	typeref:typename:int
hAccelTable_	include/mtl/win/app.h	/^        HACCEL hAccelTable_ = nullptr;$/;"	m	class:mtl::application	typeref:typename:HACCEL
hBitmap_	include/mtl/ole/img.h	/^        HBITMAP hBitmap_ = nullptr;$/;"	m	class:mtl::bitmap	typeref:typename:HBITMAP
hIcon	include/mtl/win/gdi.h	/^        HICON hIcon = nullptr;$/;"	m	class:mtl::icon	typeref:typename:HICON
hMenu_	include/mtl/win/gdi.h	/^        HMENU hMenu_ = nullptr;$/;"	m	class:mtl::menu	typeref:typename:HMENU
hPadding	include/mtl/win/ctrl.h	/^        int hPadding = 5;$/;"	m	class:mtl::tool_bar	typeref:typename:int
hWnd	include/mtl/win/ctrl.h	/^            HWND hWnd = nullptr;$/;"	m	class:mtl::tab_ctrl::tab	typeref:typename:HWND
hWnd	include/mtl/win/layout.h	/^		HWND hWnd = nullptr;$/;"	m	struct:mtl::widget	typeref:typename:HWND
hWnd	include/mtl/win32/box.h	/^        HWND hWnd = nullptr;$/;"	m	class:mtl::thread_box	typeref:typename:HWND
hWnd_	include/mtl/edge/chrome.h	/^			HWND hWnd_;$/;"	m	class:mtl::detail::webview_controller_callback	typeref:typename:HWND
hWnd_	include/mtl/ole/host.h	/^		HWND hWnd_;$/;"	m	class:mtl::client_site	typeref:typename:HWND
hWnd_	include/mtl/ole/host.h	/^		HWND hWnd_;$/;"	m	class:mtl::inplace_frame	typeref:typename:HWND
hWnd_	include/mtl/scintilla/sci.h	/^		HWND hWnd_ = nullptr;$/;"	m	class:mtl::scintilla_wnd::SciDoc	typeref:typename:HWND
hWnd_	include/mtl/script/script.h	/^		HWND								hWnd_;$/;"	m	class:mtl::active_script	typeref:typename:HWND
hWnd_	include/mtl/win/codlg.h	/^        HWND hWnd_ = nullptr;$/;"	m	class:mtl::search_dlg	typeref:typename:HWND
hWnd_	include/mtl/win/gdi.h	/^        HWND			hWnd_;$/;"	m	class:mtl::paint_dc	typeref:typename:HWND
hWnd_	include/mtl/win/gdi.h	/^        HWND			hWnd_;$/;"	m	class:mtl::wnd_dc	typeref:typename:HWND
h_	include/mtl/ole/img.h	/^        int h_ = 32;$/;"	m	class:mtl::menu_builder	typeref:typename:int
handle	include/mtl/win/wnd.h	/^        HWND handle = nullptr;$/;"	m	class:mtl::wnd	typeref:typename:HWND
handle	include/mtl/win32/io.h	/^        HANDLE handle = INVALID_HANDLE_VALUE;$/;"	m	class:mtl::file	typeref:typename:HANDLE
handleOnMouseDown	include/mtl/win/ctrl.h	/^        virtual void handleOnMouseDown()$/;"	f	class:mtl::tab_ctrl	typeref:typename:void
handleOnMouseUp	include/mtl/win/ctrl.h	/^        virtual void handleOnMouseUp()$/;"	f	class:mtl::tab_ctrl	typeref:typename:void
handler_t	include/mtl/sdk.h	/^        using handler_t = std::function<void(Args...)>;$/;"	t	class:mtl::event
handlers_	include/mtl/sdk.h	/^        handlers_t handlers_;$/;"	m	class:mtl::event	typeref:typename:handlers_t
handlers_t	include/mtl/sdk.h	/^        using handlers_t = std::map<std::wstring,handler_t>;$/;"	t	class:mtl::event	typeref:typename:std::map<std::wstring,handler_t>
handlers_t	include/mtl/sdk.h	/^        using handlers_t = std::map<std::wstring,std::pair<T, handler_t>>;$/;"	t	class:mtl::event	typeref:typename:std::map<std::wstring,std::pair<T,handler_t>>
has	include/mtl/ole/dataobj.h	/^		bool has(CLIPFORMAT cf)$/;"	f	class:mtl::dataobj_view	typeref:typename:bool
has	include/mtl/ole/dataobj.h	/^		bool has(format_etc& fe)$/;"	f	class:mtl::dataobj_view	typeref:typename:bool
has	include/mtl/win32/arg.h	/^        bool has(const std::wstring& key)$/;"	f	class:mtl::options	typeref:typename:bool
hasUTF16_BOM	include/mtl/win/enc.h	/^			static bool hasUTF16_BOM(const char* c, size_t len)$/;"	f	class:mtl::details::FileSniffer	typeref:typename:bool
hasUTF8_BOM	include/mtl/win/enc.h	/^			static bool hasUTF8_BOM(const char* c, size_t len)$/;"	f	class:mtl::details::FileSniffer	typeref:typename:bool
has_bom	include/mtl/win/enc.h	/^		bool has_bom = false;$/;"	m	struct:mtl::file_encoding	typeref:typename:bool
has_focus	include/mtl/ole/shell.h	/^			bool has_focus()					{ return ::GetFocus() == viewWnd_; }$/;"	f	class:mtl::shell::folder_view	typeref:typename:bool
has_marker	include/mtl/scintilla/sci.h	/^	bool has_marker(int line, int mask = 0x04)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:bool
has_root	include/mtl/util/path.h	/^    bool has_root() const$/;"	f	class:mtl::path	typeref:typename:bool
hbr_	include/mtl/win/gdi.h	/^        HBRUSH hbr_ = nullptr;$/;"	m	class:mtl::brush	typeref:typename:HBRUSH
hdc_	include/mtl/win/gdi.h	/^        HDC		hdc_;$/;"	m	class:mtl::dc	typeref:typename:HDC
height	include/mtl/win/ctrl.h	/^        int height = 24;$/;"	m	class:mtl::image_list	typeref:typename:int
hex_to_rgb	include/mtl/util/rgb.h	/^	inline COLORREF hex_to_rgb(const std::string& h)$/;"	f	namespace:mtl	typeref:typename:COLORREF
highlight_	include/mtl/scintilla/sci.h	/^	LRESULT					highlight_ = 0;$/;"	m	class:mtl::scintilla_wnd	typeref:typename:LRESULT
highlite	include/mtl/win/ctrl.h	/^        void highlite(int idx, bool bShow = true)$/;"	f	class:mtl::tab_ctrl	typeref:typename:void
highlite_line	include/mtl/scintilla/sci.h	/^	scintilla_wnd& highlite_line(int line)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
himetric_to_pixel	include/mtl/ole/control.h	/^	inline void himetric_to_pixel(SIZE* sz)\/\/, HDC hdc)$/;"	f	namespace:mtl	typeref:typename:void
himl_	include/mtl/win/ctrl.h	/^        HIMAGELIST himl_ = nullptr;$/;"	m	class:mtl::image_list	typeref:typename:HIMAGELIST
hit_icon_test	include/mtl/win/ctrl.h	/^        bool hit_icon_test()$/;"	f	class:mtl::tab_ctrl	typeref:typename:bool
hit_test	include/mtl/win/ctrl.h	/^        int hit_test()$/;"	f	class:mtl::tab_ctrl	typeref:typename:int
hook_color_theme	include/mtl/win/gdi.h	/^        void hook_color_theme(std::shared_ptr<color_theme>& ct)$/;"	f	class:mtl::menu	typeref:typename:void
horizontalScrollInfo_	include/mtl/win/wnd.h	/^        SCROLLINFO horizontalScrollInfo_;$/;"	m	class:mtl::scroll_wnd	typeref:typename:SCROLLINFO
hr	include/mtl/punk.h	/^        HRESULT hr = S_FALSE;$/;"	m	class:mtl::MTA	typeref:typename:HRESULT
hr	include/mtl/punk.h	/^        HRESULT hr = S_FALSE;$/;"	m	class:mtl::OLE	typeref:typename:HRESULT
hr	include/mtl/punk.h	/^        HRESULT hr = S_FALSE;$/;"	m	class:mtl::STA	typeref:typename:HRESULT
hr_	include/mtl/punk.h	/^        HRESULT hr_ = S_OK;$/;"	m	class:mtl::HR	typeref:typename:HRESULT
html_wnd	include/mtl/edge/chrome.h	/^		html_wnd()$/;"	f	class:mtl::html_wnd
html_wnd	include/mtl/edge/chrome.h	/^		html_wnd(std::wstring path)$/;"	f	class:mtl::html_wnd
html_wnd	include/mtl/edge/chrome.h	/^	class html_wnd : public window<html_wnd>$/;"	c	namespace:mtl
icon	include/mtl/win/gdi.h	/^        icon()$/;"	f	class:mtl::icon
icon	include/mtl/win/gdi.h	/^        icon(HICON icon)$/;"	f	class:mtl::icon
icon	include/mtl/win/gdi.h	/^        icon(icon&& rhs)$/;"	f	class:mtl::icon
icon	include/mtl/win/gdi.h	/^    class icon$/;"	c	namespace:mtl
iconIndex	include/mtl/win/ctrl.h	/^        int                         iconIndex = -1;$/;"	m	class:mtl::tab_ctrl	typeref:typename:int
icon_arrange	include/mtl/win/mdi.h	/^        void icon_arrange()$/;"	f	class:mtl::mdi_frame	typeref:typename:void
id	include/mtl/obj/marshall.h	/^		std::wstring id()$/;"	f	class:mtl::rotten	typeref:typename:std::wstring
id	include/mtl/ole/img.h	/^            int id;$/;"	m	struct:mtl::menu_builder::item	typeref:typename:int
id	include/mtl/ole/img.h	/^            int id;$/;"	m	struct:mtl::ui::item	typeref:typename:int
id	include/mtl/ole/img.h	/^        int id(std::wstring id)$/;"	f	class:mtl::ui	typeref:typename:int
id	include/mtl/scintilla/sci.h	/^		int id;$/;"	m	struct:mtl::XmlStyle	typeref:typename:int
id	include/mtl/scintilla/sci.h	/^		int id;$/;"	m	struct:mtl::XmlStyleSet	typeref:typename:int
id	include/mtl/win/ctrl.h	/^            std::wstring id;$/;"	m	class:mtl::tab_ctrl::tab	typeref:typename:std::wstring
id	include/mtl/win/ctrl.h	/^        int id(int pos)$/;"	f	class:mtl::rebar	typeref:typename:int
id	include/mtl/win/dlg.h	/^        int id = ID;$/;"	m	class:mtl::dlg_selection	typeref:typename:int
id	include/mtl/win/dlg.h	/^        int id = ID;$/;"	m	class:mtl::dlg_value	typeref:typename:int
id	include/mtl/win/gdi.h	/^        int id = -1;$/;"	m	class:mtl::menu_item	typeref:typename:int
id	include/mtl/win/gdi.h	/^        int id(int pos)$/;"	f	class:mtl::menu	typeref:typename:int
id	include/mtl/win/wnd.h	/^        UINT_PTR id = 0;$/;"	m	class:mtl::timer	typeref:typename:UINT_PTR
id2bitmap_	include/mtl/ole/img.h	/^        std::map<int, HBITMAP> id2bitmap_;$/;"	m	class:mtl::bitmap_cache	typeref:typename:std::map<int,HBITMAP>
id2label	include/mtl/ole/img.h	/^        std::map<int, std::wstring> id2label;$/;"	m	class:mtl::ui	typeref:typename:std::map<int,std::wstring>
id2string	include/mtl/ole/img.h	/^        std::map<int, std::wstring> id2string;$/;"	m	class:mtl::ui	typeref:typename:std::map<int,std::wstring>
idSize2bitmap_	include/mtl/ole/img.h	/^        std::map<int, std::map<int, std::map<int, HBITMAP>>> idSize2bitmap_;$/;"	m	class:mtl::bitmap_cache	typeref:typename:std::map<int,std::map<int,std::map<int,HBITMAP>>>
id_	include/mtl/disp/aut.h	/^		DISPID id_;$/;"	m	class:mtl::automation	typeref:typename:DISPID
id_string	include/mtl/ole/img.h	/^        const std::wstring& id_string(int id) $/;"	f	class:mtl::ui	typeref:typename:const std::wstring &
id_to_index	include/mtl/win/ctrl.h	/^        int id_to_index(std::wstring id)$/;"	f	class:mtl::tab_ctrl	typeref:typename:int
ids_	include/mtl/sdk.h	/^        std::set<std::wstring> ids_;$/;"	m	class:mtl::sink	typeref:typename:std::set<std::wstring>
imageList	include/mtl/win/ctrl.h	/^        image_list			                                       imageList;$/;"	m	class:mtl::tab_ctrl	typeref:typename:image_list
imageList	include/mtl/win/ctrl.h	/^        image_list imageList;$/;"	m	class:mtl::combo_box_ex	typeref:typename:image_list
imageList_	include/mtl/win/ctrl.h	/^        image_list imageList_;$/;"	m	class:mtl::tool_bar	typeref:typename:image_list
image_list	include/mtl/win/ctrl.h	/^        image_list()$/;"	f	class:mtl::image_list
image_list	include/mtl/win/ctrl.h	/^        image_list(int w, int h, int style = ILC_COLOR32 | ILC_MASK, int n = 1, int max = 255)$/;"	f	class:mtl::image_list
image_list	include/mtl/win/ctrl.h	/^    class image_list$/;"	c	namespace:mtl
img	include/mtl/ole/img.h	/^            std::wstring img;$/;"	m	struct:mtl::ui::item	typeref:typename:std::wstring
imgPath_	include/mtl/ole/img.h	/^        std::wstring imgPath_;$/;"	m	class:mtl::bitmap_cache	typeref:typename:std::wstring
img_path	include/mtl/ole/img.h	/^        void img_path(const std::wstring& path)$/;"	f	class:mtl::bitmap_cache	typeref:typename:void
img_size	include/mtl/win/ctrl.h	/^        void img_size(int x, int y)$/;"	f	class:mtl::combo_box_ex	typeref:typename:void
impl	include/mtl/persist/expat.h	/^    namespace impl {$/;"	n	namespace:meta
impl	include/mtl/persist/json.h	/^	namespace impl {$/;"	n	namespace:meta
impl	include/mtl/persist/xml.h	/^	namespace impl {$/;"	n	namespace:mtl
implements	include/mtl/obj/impl.h	/^	class implements<T(I, Args...)> : public details::derives<T(I, Args...)>$/;"	c	namespace:mtl
import	include/mtl/persist/xml.h	/^		punk<IXMLDOMNode> import(ElementPtr el, VARIANT_BOOL deep = VARIANT_TRUE)$/;"	f	class:mtl::MsxmlDocument	typeref:typename:punk<IXMLDOMNode>
indent	include/mtl/win/ctrl.h	/^        tool_bar& indent(int w)$/;"	f	class:mtl::tool_bar	typeref:typename:tool_bar &
index	include/mtl/win/codlg.h	/^        int  index()$/;"	f	class:mtl::open_dlg	typeref:typename:int
index	include/mtl/win/codlg.h	/^        void index(int i)$/;"	f	class:mtl::open_dlg	typeref:typename:void
index	include/mtl/win/ctrl.h	/^            int index = -1;$/;"	m	class:mtl::tab_ctrl::tab	typeref:typename:int
index	include/mtl/win/ctrl.h	/^        int index(int cmd)$/;"	f	class:mtl::rebar	typeref:typename:int
info	include/mtl/win32/io.h	/^        const file_info& info() const$/;"	f	class:mtl::file	typeref:typename:const file_info &
init	include/mtl/ole/dataobj.h	/^		void init(format_etc& fe, stg_medium& stgm)$/;"	f	class:mtl::data_transfer_object	typeref:typename:void
init	include/mtl/script/script.h	/^		virtual HRESULT init(const std::wstring& engine)$/;"	f	class:mtl::active_script	typeref:typename:HRESULT
init	include/mtl/sdk.h	/^		void init(T&& t)$/;"	f	class:mtl::uses	typeref:typename:void
init	include/mtl/sdk.h	/^		void init(T&& t, Args&& ... args)$/;"	f	class:mtl::uses	typeref:typename:void
init	include/mtl/win/codlg.h	/^        HRESULT init(int options, REFCLSID clsid)$/;"	f	class:mtl::file_dialog	typeref:typename:HRESULT
init_object	include/mtl/ole/host.h	/^		bool init_object(REFCLSID clsid, IStorage* store)$/;"	f	class:mtl::ole_host	typeref:typename:bool
inner	include/mtl/ole/async.h	/^            punk<IUnknown> inner;$/;"	m	class:mtl::details::call_object	typeref:typename:punk<IUnknown>
inner_	include/mtl/obj/impl.h	/^		IUnknown* inner_ = nullptr;$/;"	m	class:mtl::aggregate	typeref:typename:IUnknown *
inplaceActivate	include/mtl/ole/control.h	/^		virtual HRESULT inplaceActivate()$/;"	f	class:mtl::control	typeref:typename:HRESULT
inplaceDeactivate	include/mtl/ole/control.h	/^		virtual HRESULT inplaceDeactivate()$/;"	f	class:mtl::control	typeref:typename:HRESULT
inplace_frame	include/mtl/ole/host.h	/^	class inplace_frame : public implements<inplace_frame(IOleInPlaceFrame, of<IOleInPlaceFrame, IO/;"	c	namespace:mtl
inproc_server	include/mtl/obj/inproc.h	/^	class inproc_server : public com_dll$/;"	c	namespace:mtl
insertItem	include/mtl/win/ctrl.h	/^        LRESULT insertItem(tab* titem, int index = -1)$/;"	f	class:mtl::tab_ctrl	typeref:typename:LRESULT
insert_text	include/mtl/scintilla/sci.h	/^	scintilla_wnd& insert_text(const std::string& txt, int p = -1)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
interface_	include/mtl/punk.h	/^        I* interface_;$/;"	m	class:mtl::punk	typeref:typename:I *
interface_type	include/mtl/punk.h	/^        using interface_type = I;$/;"	t	class:mtl::punk	typeref:typename:I
interfaces	include/mtl/disp/disp.h	/^		class interfaces<T(class_info, Args...)> : public interfaces<T(provide_class_info<T>, Args...)/;"	c	namespace:mtl::details
interfaces	include/mtl/disp/disp.h	/^		class interfaces<T(dispatch<T, I, LIBID, MAJOR, MINOR>, Args...)>$/;"	c	namespace:mtl::details
interfaces	include/mtl/disp/disp.h	/^		class interfaces<T(dispatch<T,I>, Args...)>$/;"	c	namespace:mtl::details
interfaces	include/mtl/disp/disp.h	/^		class interfaces<T(dual<I,LIBID,MAJOR,MINOR>, Args...)> : public interfaces<T(dispatch<T, I, L/;"	c	namespace:mtl::details
interfaces	include/mtl/disp/disp.h	/^		class interfaces<T(dual<I>, Args...)> : public interfaces<T(dispatch<T,I>, Args...)>$/;"	c	namespace:mtl::details
interfaces	include/mtl/disp/disp.h	/^		class interfaces<T(error_info<I>, Args...)> : public interfaces<T(support_error_info<I>, Args./;"	c	namespace:mtl::details
interfaces	include/mtl/disp/disp.h	/^		class interfaces<T(provide_class_info<T>, Args...)>$/;"	c	namespace:mtl::details
interfaces	include/mtl/disp/disp.h	/^		class interfaces<T(support_error_info<I>, Args...)>$/;"	c	namespace:mtl::details
interfaces	include/mtl/obj/collection.h	/^        class interfaces<T(bstr_collection<T, I, LIBID, MAJOR, MINOR>, Args...)>$/;"	c	namespace:mtl::details
interfaces	include/mtl/obj/collection.h	/^        class interfaces<T(bstr_collection<T, I>, Args...)>$/;"	c	namespace:mtl::details
interfaces	include/mtl/obj/collection.h	/^        class interfaces<T(disp_collection<T, I, LIBID, MAJOR, MINOR>, Args...)>$/;"	c	namespace:mtl::details
interfaces	include/mtl/obj/collection.h	/^        class interfaces<T(disp_collection<T, I>, Args...)>$/;"	c	namespace:mtl::details
interfaces	include/mtl/obj/collection.h	/^        class interfaces<T(long_collection<T, I, LIBID, MAJOR,MINOR>, Args...)>$/;"	c	namespace:mtl::details
interfaces	include/mtl/obj/collection.h	/^        class interfaces<T(long_collection<T, I>, Args...)>$/;"	c	namespace:mtl::details
interfaces	include/mtl/obj/collection.h	/^        class interfaces<T(unknown_collection<T, I, LIBID, MAJOR, MINOR>, Args...)>$/;"	c	namespace:mtl::details
interfaces	include/mtl/obj/collection.h	/^        class interfaces<T(unknown_collection<T, I>, Args...)>$/;"	c	namespace:mtl::details
interfaces	include/mtl/obj/collection.h	/^        class interfaces<T(variant_collection<T, I, LIBID, MAJOR, MINOR>, Args...)>$/;"	c	namespace:mtl::details
interfaces	include/mtl/obj/collection.h	/^        class interfaces<T(variant_collection<T, I>, Args...)>$/;"	c	namespace:mtl::details
interfaces	include/mtl/obj/impl.h	/^		class interfaces<T()>$/;"	c	namespace:mtl::details
interfaces	include/mtl/obj/impl.h	/^		class interfaces<T(I, Args...)>$/;"	c	namespace:mtl::details
interfaces	include/mtl/obj/impl.h	/^		class interfaces<T(of<O, I>, Args...)>$/;"	c	namespace:mtl::details
interfaces	include/mtl/ole/control.h	/^		class interfaces<T(control<T>, Args...)>$/;"	c	namespace:mtl::details
interfaces	include/mtl/ole/cp.h	/^		class interfaces<T(connection_point_container<I>, Args...)>$/;"	c	namespace:mtl::details
interfaces	include/mtl/ole/dataobj.h	/^		class interfaces<T(data_object, Args...)>$/;"	c	namespace:mtl::details
interfaces	include/mtl/persist/persist.h	/^        class interfaces<T(persist_file<T>, Args...)>$/;"	c	namespace:mtl::details
interfaces	include/mtl/persist/persist.h	/^        class interfaces<T(persist_storage<T>, Args...)>$/;"	c	namespace:mtl::details
interfaces	include/mtl/persist/persist.h	/^        class interfaces<T(persist_stream<T>, Args...)>$/;"	c	namespace:mtl::details
interfaces	include/mtl/persist/persist.h	/^        class interfaces<T(persistable, Args...)> : public interfaces<T(persistent<T>, Args...)>$/;"	c	namespace:mtl::details
interfaces	include/mtl/persist/persist.h	/^        class interfaces<T(persistent<T>, Args...)>$/;"	c	namespace:mtl::details
interfaces	include/mtl/persist/persist.h	/^        class interfaces<T(serializable, Args...)> : public interfaces<T(persist_file<T>, Args../;"	c	namespace:mtl::details
interfaces	include/mtl/persist/persist.h	/^        class interfaces<T(storable, Args...)> : public interfaces<T(persist_storage<T>, Args.../;"	c	namespace:mtl::details
interfaces	include/mtl/persist/persist.h	/^        class interfaces<T(streamable, Args...)> : public interfaces<T(persist_stream<T>, Args../;"	c	namespace:mtl::details
invalidate	include/mtl/win/wnd.h	/^        virtual wnd& invalidate(RECT* r = 0, bool redraw = false) $/;"	f	class:mtl::wnd	typeref:typename:wnd &
investigate	include/mtl/win/enc.h	/^			file_encoding  investigate()$/;"	f	class:mtl::details::FileSniffer	typeref:typename:file_encoding
investigate	include/mtl/win/enc.h	/^			file_encoding  investigate(const std::string& h)$/;"	f	class:mtl::details::FileSniffer	typeref:typename:file_encoding
invoke	include/mtl/disp/aut.h	/^		variant invoke(Args&& ... args)$/;"	f	class:mtl::automation	typeref:typename:variant
isDirty_	include/mtl/ole/control.h	/^		bool							isDirty_ = false;$/;"	m	class:mtl::control	typeref:typename:bool
isDirty_	include/mtl/persist/persist.h	/^        bool isDirty_ = false;$/;"	m	class:mtl::persistent	typeref:typename:bool
isModal_	include/mtl/win/dlg.h	/^        bool isModal_ = true;$/;"	m	class:mtl::dialog	typeref:typename:bool
isMouseDown_	include/mtl/win/ctrl.h	/^        bool				        isMouseDown_ = false;$/;"	m	class:mtl::tab_ctrl	typeref:typename:bool
isType	include/mtl/disp/variant.h	/^		bool isType(VARTYPE VT) const$/;"	f	class:mtl::variant_view	typeref:typename:bool
is_64bit_windows	include/mtl/sdk.h	/^    inline BOOL is_64bit_windows()$/;"	f	namespace:mtl	typeref:typename:BOOL
is_absolute	include/mtl/util/path.h	/^    bool is_absolute()$/;"	f	class:mtl::path	typeref:typename:bool
is_base64	include/mtl/util/base64.h	/^        inline bool is_base64(unsigned char c)$/;"	f	namespace:mtl::details	typeref:typename:bool
is_binary	include/mtl/win/enc.h	/^		bool is_binary = false;$/;"	m	struct:mtl::file_encoding	typeref:typename:bool
is_browsable	include/mtl/ole/shell.h	/^			bool is_browsable()$/;"	f	class:mtl::shell::item	typeref:typename:bool
is_class	include/mtl/win/dlg.h	/^        bool is_class(int id, const wchar_t* className)$/;"	f	class:mtl::dialog	typeref:typename:bool
is_dialog_message	include/mtl/win/wnd.h	/^        BOOL is_dialog_message(MSG& msg)$/;"	f	class:mtl::modeless_dialogs	typeref:typename:BOOL
is_dir	include/mtl/ole/shell.h	/^			bool is_dir()$/;"	f	class:mtl::shell::item	typeref:typename:bool
is_dir	include/mtl/util/path.h	/^	bool is_dir() const$/;"	f	class:mtl::path	typeref:typename:bool
is_error	include/mtl/punk.h	/^        bool is_error() const$/;"	f	class:mtl::HR	typeref:typename:bool
is_file	include/mtl/ole/shell.h	/^			bool is_file()$/;"	f	class:mtl::shell::item	typeref:typename:bool
is_net_drive	include/mtl/util/path.h	/^	bool is_net_drive() const $/;"	f	class:mtl::path	typeref:typename:bool
is_part_of_filesystem	include/mtl/ole/shell.h	/^			bool is_part_of_filesystem()$/;"	f	class:mtl::shell::item	typeref:typename:bool
is_ref	include/mtl/disp/variant.h	/^		bool is_ref()$/;"	f	class:mtl::variant	typeref:typename:bool
is_ref	include/mtl/disp/variant.h	/^		bool is_ref()$/;"	f	class:mtl::variant_view	typeref:typename:bool
is_type	include/mtl/disp/variant.h	/^		bool is_type(VARTYPE VT) const$/;"	f	class:mtl::variant	typeref:typename:bool
is_unc	include/mtl/util/path.h	/^    bool is_unc() const$/;"	f	class:mtl::path	typeref:typename:bool
italic	include/mtl/scintilla/sci.h	/^		std::string italic;$/;"	m	struct:mtl::XmlStyle	typeref:typename:std::string
item	include/mtl/disp/sf_array.h	/^			HRESULT item(long Index, void* pv) const$/;"	f	class:mtl::details::safearray_base	typeref:typename:HRESULT
item	include/mtl/disp/sf_array.h	/^			HRESULT item(long* Index, void* pv) const$/;"	f	class:mtl::details::safearray_base	typeref:typename:HRESULT
item	include/mtl/disp/sf_array.h	/^			T item(long Index) const$/;"	f	class:mtl::details::safearray_base	typeref:typename:T
item	include/mtl/ole/img.h	/^            item(int i)$/;"	f	struct:mtl::menu_builder::item
item	include/mtl/ole/img.h	/^            item(int i, bool check)$/;"	f	struct:mtl::menu_builder::item
item	include/mtl/ole/img.h	/^            item(int i, bool check, const wchar_t* l)$/;"	f	struct:mtl::menu_builder::item
item	include/mtl/ole/img.h	/^            item(int i, const std::vector<item>& subMenu)$/;"	f	struct:mtl::menu_builder::item
item	include/mtl/ole/img.h	/^            item(int i, const wchar_t* l)$/;"	f	struct:mtl::menu_builder::item
item	include/mtl/ole/img.h	/^            item(int i, const wchar_t* l, const std::vector<item>& subMenu)$/;"	f	struct:mtl::menu_builder::item
item	include/mtl/ole/img.h	/^        struct item$/;"	s	class:mtl::menu_builder
item	include/mtl/ole/img.h	/^        struct item$/;"	s	class:mtl::ui
item	include/mtl/ole/shell.h	/^			item(LPITEMIDLIST pidl, DWORD attributes)$/;"	f	class:mtl::shell::item
item	include/mtl/ole/shell.h	/^		class item$/;"	c	namespace:mtl::shell
item	include/mtl/win/ctrl.h	/^        tab& item(const std::wstring& id)$/;"	f	class:mtl::tab_ctrl	typeref:typename:tab &
item	include/mtl/win/ctrl.h	/^        tab& item(int index)$/;"	f	class:mtl::tab_ctrl	typeref:typename:tab &
item	include/mtl/win/gdi.h	/^        menu_item& item(int id)$/;"	f	class:mtl::menu	typeref:typename:menu_item &
item_data	include/mtl/win/ctrl.h	/^        LRESULT item_data(int id)$/;"	f	class:mtl::combo_box	typeref:typename:LRESULT
item_txt	include/mtl/win/ctrl.h	/^        std::wstring item_txt(int id)$/;"	f	class:mtl::combo_box	typeref:typename:std::wstring
items	include/mtl/ole/img.h	/^            std::vector<item> items;$/;"	m	struct:mtl::menu_builder::item	typeref:typename:std::vector<item>
items	include/mtl/win/gdi.h	/^        std::vector<std::shared_ptr<menu_item>> items;$/;"	m	class:mtl::menu	typeref:typename:std::vector<std::shared_ptr<menu_item>>
items_	include/mtl/win/ctrl.h	/^        std::vector<tab>            items_;$/;"	m	class:mtl::tab_ctrl	typeref:typename:std::vector<tab>
keyboardAccelerators	include/mtl/win32/box.h	/^        accelerators keyboardAccelerators;$/;"	m	class:mtl::thread_box	typeref:typename:accelerators
keys	include/mtl/win32/arg.h	/^        std::vector<std::wstring> keys()$/;"	f	class:mtl::options	typeref:typename:std::vector<std::wstring>
keywords	include/mtl/scintilla/sci.h	/^		std::vector<std::string> keywords;$/;"	m	struct:mtl::XmlStyleSet	typeref:typename:std::vector<std::string>
label	include/mtl/ole/img.h	/^            const wchar_t* label;$/;"	m	struct:mtl::menu_builder::item	typeref:typename:const wchar_t *
label	include/mtl/ole/img.h	/^            std::wstring label;$/;"	m	struct:mtl::ui::item	typeref:typename:std::wstring
label	include/mtl/ole/img.h	/^        const std::wstring& label(int id)$/;"	f	class:mtl::ui	typeref:typename:const std::wstring &
label	include/mtl/win/gdi.h	/^        std::wstring label;$/;"	m	class:mtl::menu_item	typeref:typename:std::wstring
lastClickTime_	include/mtl/ole/explorer.h	/^		DWORD										lastClickTime_;$/;"	m	class:mtl::explorer_tree	typeref:typename:DWORD
last_access_time	include/mtl/win32/mem.h	/^        const FILETIME& last_access_time() const$/;"	f	class:mtl::file_info	typeref:typename:const FILETIME &
last_accessed	include/mtl/win32/mem.h	/^        std::wstring last_accessed() const$/;"	f	class:mtl::file_info	typeref:typename:std::wstring
last_write_time	include/mtl/win32/mem.h	/^        const FILETIME& last_write_time() const$/;"	f	class:mtl::file_info	typeref:typename:const FILETIME &
last_written	include/mtl/win32/mem.h	/^        std::wstring last_written() const$/;"	f	class:mtl::file_info	typeref:typename:std::wstring
layout	include/mtl/win/layout.h	/^		layout()$/;"	f	class:mtl::layout
layout	include/mtl/win/layout.h	/^		layout(std::vector<widget>&& widgets)$/;"	f	class:mtl::layout
layout	include/mtl/win/layout.h	/^		std::shared_ptr<layout> layout;$/;"	m	struct:mtl::widget	typeref:typename:std::shared_ptr<layout>
layout	include/mtl/win/layout.h	/^	class layout$/;"	c	namespace:mtl
layout	include/mtl/win/mdi.h	/^        default_layout layout;$/;"	m	class:mtl::mdi_frame	typeref:typename:default_layout
lbound	include/mtl/disp/sf_array.h	/^			long lbound(int index = 0) const$/;"	f	class:mtl::details::safearray_base	typeref:typename:long
len	include/mtl/disp/bstr.h	/^		int len() const$/;"	f	class:mtl::bstr	typeref:typename:int
len	include/mtl/disp/bstr.h	/^		int len() const$/;"	f	class:mtl::bstr_view	typeref:typename:int
len_	include/mtl/win/enc.h	/^			size_t len_ = 0;$/;"	m	class:mtl::details::FileSniffer	typeref:typename:size_t
length	include/mtl/scintilla/sci.h	/^	size_t length()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:size_t
lf_	include/mtl/win/codlg.h	/^        LOGFONT lf_;$/;"	m	class:mtl::pick_font	typeref:typename:LOGFONT
lib	include/mtl/sdk.h	/^		T lib;$/;"	m	class:mtl::library_impl	typeref:typename:T
library	include/mtl/sdk.h	/^	class library$/;"	c	namespace:mtl
library_impl	include/mtl/sdk.h	/^	class library_impl : public library$/;"	c	namespace:mtl
library_impl	include/mtl/sdk.h	/^        library_impl(T&& t)$/;"	f	class:mtl::library_impl
libs_	include/mtl/sdk.h	/^		std::vector<std::unique_ptr<library>> libs_;$/;"	m	class:mtl::uses	typeref:typename:std::vector<std::unique_ptr<library>>
line_end_pos	include/mtl/scintilla/sci.h	/^	int line_end_pos(int line)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:int
line_from_pos	include/mtl/scintilla/sci.h	/^	int line_from_pos(int pos)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:int
line_scroll	include/mtl/scintilla/sci.h	/^	LRESULT line_scroll(int col, int line)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:LRESULT
load	include/mtl/ole/img.h	/^        void load(const std::vector<std::tuple<int, const wchar_t*>>& bmps)$/;"	f	class:mtl::bitmap_cache	typeref:typename:void
load	include/mtl/ole/img.h	/^        void load(const wchar_t* path)$/;"	f	class:mtl::bitmap_cache	typeref:typename:void
load	include/mtl/ole/img.h	/^        void load(int id, const wchar_t* path)$/;"	f	class:mtl::bitmap_cache	typeref:typename:void
load	include/mtl/ole/img.h	/^        void load(int resourceId,  CLSID decoder = CLSID_WICPngDecoder, const wchar_t* type = L"/;"	f	class:mtl::bitmap_cache	typeref:typename:void
load	include/mtl/win32/box.h	/^        bool load(int id)$/;"	f	class:mtl::accelerators	typeref:typename:bool
load_bitmap_source_from_path	include/mtl/ole/img.h	/^        inline mtl::punk<IWICBitmapSource> load_bitmap_source_from_path(const std::wstring& path/;"	f	namespace:mtl::detail	typeref:typename:mtl::punk<IWICBitmapSource>
load_bitmap_source_from_stream	include/mtl/ole/img.h	/^        inline punk<IWICBitmapSource> load_bitmap_source_from_stream(IStream* stream, CLSID deco/;"	f	namespace:mtl::detail	typeref:typename:punk<IWICBitmapSource>
load_image	include/mtl/win/ctrl.h	/^        int load_image(const wchar_t* path)$/;"	f	class:mtl::combo_box_ex	typeref:typename:int
load_object	include/mtl/ole/host.h	/^		bool load_object(REFCLSID clsid, IStorage* store)$/;"	f	class:mtl::ole_host	typeref:typename:bool
load_picture	include/mtl/ole/img.h	/^    inline bitmap load_picture(IStream* stream, CLSID decoder = CLSID_WICPngDecoder)$/;"	f	namespace:mtl	typeref:typename:bitmap
load_picture	include/mtl/ole/img.h	/^    inline bitmap load_picture(const std::wstring& path)$/;"	f	namespace:mtl	typeref:typename:bitmap
load_picture_from_resource	include/mtl/ole/img.h	/^    inline bitmap load_picture_from_resource(int resId, const wchar_t* type = L"PNG", CLSID deco/;"	f	namespace:mtl	typeref:typename:bitmap
load_typelib	include/mtl/disp/disp.h	/^		void load_typelib()$/;"	f	class:mtl::dispatch	typeref:typename:void
load_typelib	include/mtl/disp/disp.h	/^		void load_typelib(const CLSID& libid, int major = 1, int minor = 0)$/;"	f	class:mtl::dispatch	typeref:typename:void
load_xml	include/mtl/scintilla/sci.h	/^	scintilla_wnd& load_xml(const std::wstring& path)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
local_server	include/mtl/obj/localserver.h	/^		local_server()$/;"	f	class:mtl::local_server
local_server	include/mtl/obj/localserver.h	/^	class local_server$/;"	c	namespace:mtl
localserver	include/mtl/obj/impl.h	/^	class localserver$/;"	c	namespace:mtl
location_	include/mtl/edge/chrome.h	/^		std::wstring				location_;$/;"	m	class:mtl::html_wnd	typeref:typename:std::wstring
lock	include/mtl/win/clipboard.h	/^			lock()$/;"	f	class:mtl::clipboard::lock
lock	include/mtl/win/clipboard.h	/^			lock(HWND hWnd)$/;"	f	class:mtl::clipboard::lock
lock	include/mtl/win/clipboard.h	/^		class lock$/;"	c	class:mtl::clipboard
lock	include/mtl/win32/mem.h	/^            lock(HGLOBAL global)$/;"	f	class:mtl::global::lock
lock	include/mtl/win32/mem.h	/^        class lock$/;"	c	class:mtl::global
lock	include/mtl/win32/module.h	/^		virtual long lock()$/;"	f	class:mtl::com_module	typeref:typename:long
logfont_	include/mtl/win/gdi.h	/^        LOGFONT	logfont_;$/;"	m	class:mtl::font_desc	typeref:typename:LOGFONT
long_collection	include/mtl/obj/collection.h	/^    class long_collection : public collection<long,T,I,LIBID,MAJOR,MINOR>$/;"	c	namespace:mtl
lp_	include/mtl/win/layout.h	/^		POINT			lp_;$/;"	m	class:mtl::splitter	typeref:typename:POINT
lparam	include/mtl/win/ctrl.h	/^            LPARAM lparam = 0;$/;"	m	class:mtl::tab_ctrl::tab	typeref:typename:LPARAM
make	include/mtl/edge/chrome.h	/^			static auto make(L lambda)$/;"	f	struct:mtl::detail::callback_maker	typeref:typename:auto
make_callback	include/mtl/edge/chrome.h	/^		auto make_callback(L lambda)$/;"	f	namespace:mtl::detail	typeref:typename:auto
make_connection_point	include/mtl/ole/cp.h	/^		void make_connection_point()$/;"	f	class:mtl::connection_point_container	typeref:typename:void
make_transparent_dib_section	include/mtl/ole/img.h	/^        static bitmap make_transparent_dib_section(int w, int h, UINT32 col = 0x00000000)$/;"	f	class:mtl::bitmap	typeref:typename:bitmap
map	include/mtl/sdk.h	/^        inline static auto& map()$/;"	f	class:mtl::event	typeref:typename:auto &
map	include/mtl/win32/mem.h	/^        bool map(const std::wstring& file, DWORD access = GENERIC_READ | GENERIC_WRITE, DWORD di/;"	f	class:mtl::memory_mapped_file	typeref:typename:bool
mapping_	include/mtl/win32/mem.h	/^        HANDLE				mapping_;$/;"	m	class:mtl::memory_mapped_file	typeref:typename:HANDLE
markers_	include/mtl/scintilla/sci.h	/^	std::set<LRESULT>		markers_;$/;"	m	class:mtl::scintilla_wnd	typeref:typename:std::set<LRESULT>
maximize	include/mtl/win/mdi.h	/^        void maximize()$/;"	f	class:mtl::mdi_frame	typeref:typename:void
mdiClient_	include/mtl/win/mdi.h	/^        HWND mdiClient_ = nullptr;$/;"	m	class:mtl::mdi_frame	typeref:typename:HWND
mdi_child	include/mtl/win/mdi.h	/^        mdi_child()$/;"	f	class:mtl::mdi_child
mdi_child	include/mtl/win/mdi.h	/^        mdi_child(int menuId, int viewMenuIndex = -1)$/;"	f	class:mtl::mdi_child
mdi_child	include/mtl/win/mdi.h	/^    class mdi_child : public window<mdi_child>$/;"	c	namespace:mtl
mdi_client	include/mtl/win/mdi.h	/^        HWND mdi_client()$/;"	f	class:mtl::mdi_frame	typeref:typename:HWND
mdi_frame	include/mtl/win/mdi.h	/^	class mdi_frame : public window<mdi_frame>$/;"	c	namespace:mtl
mdi_frame	include/mtl/win/mdi.h	/^        mdi_frame(int windowMenuIndex = -1, UINT idFirstMdiChild = 50000)$/;"	f	class:mtl::mdi_frame
member	include/mtl/disp/aut.h	/^		automation& member(DISPID id)$/;"	f	class:mtl::automation	typeref:typename:automation &
member	include/mtl/disp/aut.h	/^		automation& member(const std::wstring& member)$/;"	f	class:mtl::automation	typeref:typename:automation &
memory_mapped_file	include/mtl/win32/mem.h	/^        memory_mapped_file()$/;"	f	class:mtl::memory_mapped_file
memory_mapped_file	include/mtl/win32/mem.h	/^    class memory_mapped_file$/;"	c	namespace:mtl
menu	include/mtl/win/gdi.h	/^        menu()$/;"	f	class:mtl::menu
menu	include/mtl/win/gdi.h	/^        menu(HMENU hmenu, bool attached = false)$/;"	f	class:mtl::menu
menu	include/mtl/win/gdi.h	/^        menu(const menu& rhs)$/;"	f	class:mtl::menu
menu	include/mtl/win/gdi.h	/^        menu(int id)$/;"	f	class:mtl::menu
menu	include/mtl/win/gdi.h	/^        menu(menu&& rhs)$/;"	f	class:mtl::menu
menu	include/mtl/win/gdi.h	/^    class menu$/;"	c	namespace:mtl
menu	include/mtl/win/mdi.h	/^        HMENU menu = nullptr;$/;"	m	class:mtl::mdi_frame	typeref:typename:HMENU
menu	include/mtl/win/mdi.h	/^        mtl::menu menu;$/;"	m	class:mtl::mdi_child	typeref:typename:mtl::menu
menu_	include/mtl/ole/img.h	/^        menu& menu_;$/;"	m	class:mtl::menu_builder	typeref:typename:menu &
menu_builder	include/mtl/ole/img.h	/^        menu_builder(menu& m, int w = 32, int h = 32)$/;"	f	class:mtl::menu_builder
menu_builder	include/mtl/ole/img.h	/^    class menu_builder$/;"	c	namespace:mtl
menu_item	include/mtl/win/gdi.h	/^        menu_item( int i, const std::wstring& l, bool e, bool c, HMENU m, HBITMAP b)$/;"	f	class:mtl::menu_item
menu_item	include/mtl/win/gdi.h	/^        menu_item() $/;"	f	class:mtl::menu_item
menu_item	include/mtl/win/gdi.h	/^    class menu_item : public owner_drawn$/;"	c	namespace:mtl
meta	include/mtl/persist/expat.h	/^namespace meta {$/;"	n
meta	include/mtl/persist/json.h	/^namespace meta {$/;"	n
meta	include/mtl/scintilla/sci.h	/^	static constexpr auto meta()$/;"	f	struct:meta::Data	typeref:typename:auto
meta_dc	include/mtl/win/gdi.h	/^        meta_dc()$/;"	f	class:mtl::meta_dc
meta_dc	include/mtl/win/gdi.h	/^    class meta_dc : public dc$/;"	c	namespace:mtl
minimize	include/mtl/win/mdi.h	/^        void minimize()$/;"	f	class:mtl::mdi_frame	typeref:typename:void
modeless_dialogs	include/mtl/win/wnd.h	/^    class modeless_dialogs$/;"	c	namespace:mtl
modeless_dlg	include/mtl/win/wnd.h	/^    inline modeless_dialogs& modeless_dlg()$/;"	f	namespace:mtl	typeref:typename:modeless_dialogs &
module_instance	include/mtl/win32/module.h	/^	inline HINSTANCE& module_instance()$/;"	f	namespace:mtl	typeref:typename:HINSTANCE &
monitor	include/mtl/win32/monitor.h	/^		monitor()$/;"	f	class:mtl::monitor
monitor	include/mtl/win32/monitor.h	/^		monitor(const std::wstring& p)$/;"	f	class:mtl::monitor
monitor	include/mtl/win32/monitor.h	/^	class monitor$/;"	c	namespace:mtl
move	include/mtl/ole/shell.h	/^		inline int  move($/;"	f	namespace:mtl::shell	typeref:typename:int
move	include/mtl/win/layout.h	/^	inline void layout::move(widget& w, RECT& dest)$/;"	f	class:mtl::layout	typeref:typename:void
move	include/mtl/win/wnd.h	/^        wnd& move(const RECT& dest)$/;"	f	class:mtl::wnd	typeref:typename:wnd &
move	include/mtl/win/wnd.h	/^        wnd& move(int x, int y)$/;"	f	class:mtl::wnd	typeref:typename:wnd &
move	include/mtl/win/wnd.h	/^        wnd& move(int x, int y, int w, int h)$/;"	f	class:mtl::wnd	typeref:typename:wnd &
msg	include/mtl/persist/json.h	/^			std::string msg;$/;"	m	class:mtl::JSON::ParseEx	typeref:typename:std::string
msg	include/mtl/punk.h	/^        static std::wstring msg(HRESULT hr)$/;"	f	class:mtl::HR	typeref:typename:std::wstring
mtl	include/mtl/disp/aut.h	/^namespace mtl {$/;"	n
mtl	include/mtl/disp/bstr.h	/^namespace mtl {$/;"	n
mtl	include/mtl/disp/disp.h	/^namespace mtl {$/;"	n
mtl	include/mtl/disp/sf_array.h	/^namespace mtl {$/;"	n
mtl	include/mtl/disp/variant.h	/^namespace mtl {$/;"	n
mtl	include/mtl/edge/chrome.h	/^namespace mtl {$/;"	n
mtl	include/mtl/fwd.h	/^namespace mtl {$/;"	n
mtl	include/mtl/obj/collection.h	/^namespace mtl {$/;"	n
mtl	include/mtl/obj/enum.h	/^namespace mtl {$/;"	n
mtl	include/mtl/obj/impl.h	/^namespace mtl {$/;"	n
mtl	include/mtl/obj/inproc.h	/^namespace mtl {$/;"	n
mtl	include/mtl/obj/iso.h	/^namespace mtl {$/;"	n
mtl	include/mtl/obj/localserver.h	/^namespace mtl {$/;"	n
mtl	include/mtl/obj/marshall.h	/^namespace mtl {$/;"	n
mtl	include/mtl/obj/obj.h	/^namespace mtl {$/;"	n
mtl	include/mtl/ole/async.h	/^namespace mtl {$/;"	n
mtl	include/mtl/ole/control.h	/^namespace mtl {$/;"	n
mtl	include/mtl/ole/cp.h	/^namespace mtl {$/;"	n
mtl	include/mtl/ole/dataobj.h	/^namespace mtl {$/;"	n
mtl	include/mtl/ole/explorer.h	/^namespace mtl {$/;"	n
mtl	include/mtl/ole/host.h	/^namespace mtl {$/;"	n
mtl	include/mtl/ole/img.h	/^namespace mtl {$/;"	n
mtl	include/mtl/ole/shell.h	/^namespace mtl {$/;"	n
mtl	include/mtl/persist/json.h	/^namespace mtl {$/;"	n
mtl	include/mtl/persist/persist.h	/^namespace mtl {$/;"	n
mtl	include/mtl/persist/stgm.h	/^namespace mtl {$/;"	n
mtl	include/mtl/persist/stream.h	/^namespace mtl {$/;"	n
mtl	include/mtl/persist/xml.h	/^namespace mtl {$/;"	n
mtl	include/mtl/punk.h	/^namespace mtl {$/;"	n
mtl	include/mtl/scintilla/sci.h	/^namespace mtl {$/;"	n
mtl	include/mtl/script/script.h	/^namespace mtl {$/;"	n
mtl	include/mtl/sdk.h	/^namespace mtl {$/;"	n
mtl	include/mtl/util/base64.h	/^namespace mtl {$/;"	n
mtl	include/mtl/util/path.h	/^namespace mtl {$/;"	n
mtl	include/mtl/util/rgb.h	/^namespace mtl {$/;"	n
mtl	include/mtl/util/str.h	/^namespace mtl$/;"	n
mtl	include/mtl/win/app.h	/^namespace mtl {$/;"	n
mtl	include/mtl/win/clipboard.h	/^namespace mtl {$/;"	n
mtl	include/mtl/win/codlg.h	/^namespace mtl {$/;"	n
mtl	include/mtl/win/ctrl.h	/^namespace mtl {$/;"	n
mtl	include/mtl/win/dlg.h	/^namespace mtl {$/;"	n
mtl	include/mtl/win/enc.h	/^namespace mtl {$/;"	n
mtl	include/mtl/win/gdi.h	/^namespace mtl {$/;"	n
mtl	include/mtl/win/layout.h	/^namespace mtl {$/;"	n
mtl	include/mtl/win/mdi.h	/^namespace mtl {$/;"	n
mtl	include/mtl/win/wc.h	/^namespace mtl {$/;"	n
mtl	include/mtl/win/wnd.h	/^namespace mtl {$/;"	n
mtl	include/mtl/win32/arg.h	/^namespace mtl {$/;"	n
mtl	include/mtl/win32/box.h	/^namespace mtl {$/;"	n
mtl	include/mtl/win32/io.h	/^namespace mtl$/;"	n
mtl	include/mtl/win32/mem.h	/^namespace mtl {$/;"	n
mtl	include/mtl/win32/module.h	/^namespace mtl {$/;"	n
mtl	include/mtl/win32/monitor.h	/^namespace mtl {$/;"	n
mtl	include/mtl/win32/pipe.h	/^namespace mtl {$/;"	n
mtl	include/mtl/win32/uni.h	/^namespace mtl {$/;"	n
multiOp	include/mtl/ole/shell.h	/^			inline int  multiOp(UINT  op, HWND hwnd, const std::vector<std::wstring>& from, const std::ws/;"	f	namespace:mtl::shell::details	typeref:typename:int
mutex_	include/mtl/win32/box.h	/^        mutable std::mutex mutex_;$/;"	m	class:mtl::thread_box	typeref:typename:std::mutex
nSelections	include/mtl/win/codlg.h	/^        int nSelections()$/;"	f	class:mtl::open_dlg	typeref:typename:int
name	include/mtl/scintilla/sci.h	/^	const wchar_t* name()$/;"	f	class:mtl::window_class	typeref:typename:const wchar_t *
name	include/mtl/win/ctrl.h	/^        const wchar_t* name()$/;"	f	class:mtl::window_class	typeref:typename:const wchar_t *
name	include/mtl/win/gdi.h	/^        const wchar_t* name()$/;"	f	class:mtl::font_desc	typeref:typename:const wchar_t *
name	include/mtl/win/wc.h	/^        const wchar_t* name()$/;"	f	class:mtl::window_class	typeref:typename:const wchar_t *
named_pipe	include/mtl/win32/pipe.h	/^        named_pipe()$/;"	f	class:mtl::named_pipe
named_pipe	include/mtl/win32/pipe.h	/^        named_pipe(HANDLE h)$/;"	f	class:mtl::named_pipe
named_pipe	include/mtl/win32/pipe.h	/^        named_pipe(named_pipe&& rhs) noexcept$/;"	f	class:mtl::named_pipe
named_pipe	include/mtl/win32/pipe.h	/^    class named_pipe$/;"	c	namespace:mtl
navigate	include/mtl/edge/chrome.h	/^		virtual bool navigate(const std::wstring& loc)$/;"	f	class:mtl::html_wnd	typeref:typename:bool
navigationStartingToken_	include/mtl/edge/chrome.h	/^		EventRegistrationToken		navigationStartingToken_;$/;"	m	class:mtl::html_wnd	typeref:typename:EventRegistrationToken
new_dir	include/mtl/ole/shell.h	/^			void new_dir()$/;"	f	class:mtl::shell::folder_view	typeref:typename:void
new_guid	include/mtl/sdk.h	/^    inline std::wstring new_guid()$/;"	f	namespace:mtl	typeref:typename:std::wstring
next	include/mtl/ole/shell.h	/^		inline shit enumerator::next(DWORD attributes )$/;"	f	class:mtl::shell::enumerator	typeref:typename:shit
next	include/mtl/win/mdi.h	/^        void next()$/;"	f	class:mtl::mdi_frame	typeref:typename:void
nextSearchPos_	include/mtl/scintilla/sci.h	/^	int						nextSearchPos_ = 0;$/;"	m	class:mtl::scintilla_wnd	typeref:typename:int
no_color_theme	include/mtl/win/wnd.h	/^        void no_color_theme()$/;"	f	class:mtl::wnd	typeref:typename:void
notifications	include/mtl/scintilla/sci.h	/^	void notifications(int mask = SC_MODEVENTMASKALL)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:void
obList_	include/mtl/win/gdi.h	/^        std::list<HGDIOBJ>	obList_;$/;"	m	class:mtl::dc	typeref:typename:std::list<HGDIOBJ>
obj	include/mtl/obj/marshall.h	/^		mtl::punk<T> obj;$/;"	m	class:mtl::rotten	typeref:typename:mtl::punk<T>
object	include/mtl/obj/marshall.h	/^		static mtl::punk<T> object(const CLSID& clsid, const std::wstring& id)$/;"	f	class:mtl::rot	typeref:typename:mtl::punk<T>
object	include/mtl/obj/marshall.h	/^		static mtl::punk<T> object(const std::wstring& id)$/;"	f	class:mtl::rot	typeref:typename:mtl::punk<T>
objectMap_	include/mtl/script/script.h	/^		std::map<std::wstring, IUnknown*>	objectMap_;$/;"	m	class:mtl::active_script	typeref:typename:std::map<std::wstring,IUnknown * >
of	include/mtl/obj/impl.h	/^	class of$/;"	c	namespace:mtl
of_	include/mtl/win/codlg.h	/^        OPENFILENAME		    of_;$/;"	m	class:mtl::open_dlg	typeref:typename:OPENFILENAME
offset	include/mtl/win32/mem.h	/^        unsigned long long offset()$/;"	f	class:mtl::memory_mapped_file	typeref:typename:unsigned long long
offset_	include/mtl/win32/mem.h	/^        unsigned long long	offset_;$/;"	m	class:mtl::memory_mapped_file	typeref:typename:unsigned long long
oldProc_	include/mtl/win/ctrl.h	/^        WNDPROC	oldProc_ = nullptr;$/;"	m	class:mtl::ctrl	typeref:typename:WNDPROC
ole	include/mtl/persist/stgm.h	/^	namespace ole {$/;"	n	namespace:mtl
oleObject	include/mtl/ole/host.h	/^		punk<IOleObject>	oleObject;$/;"	m	class:mtl::ole_host	typeref:typename:punk<IOleObject>
ole_char	include/mtl/disp/bstr.h	/^		explicit ole_char(const wchar_t* s)$/;"	f	class:mtl::ole_char
ole_char	include/mtl/disp/bstr.h	/^		ole_char()$/;"	f	class:mtl::ole_char
ole_char	include/mtl/disp/bstr.h	/^	class ole_char$/;"	c	namespace:mtl
ole_host	include/mtl/ole/host.h	/^		ole_host()$/;"	f	class:mtl::ole_host
ole_host	include/mtl/ole/host.h	/^	class ole_host : public C$/;"	c	namespace:mtl
ole_inplace_active_obj	include/mtl/ole/control.h	/^			ole_inplace_active_obj(control<T>* ctrl)$/;"	f	class:mtl::control::ole_inplace_active_obj
ole_inplace_active_obj	include/mtl/ole/control.h	/^		class ole_inplace_active_obj :$/;"	c	class:mtl::control
onBar	include/mtl/win/ctrl.h	/^        event<void(int cmd)> onBar;$/;"	m	class:mtl::tool_bar	typeref:typename:event<void (int cmd)>
onBarNotify	include/mtl/win/ctrl.h	/^        event<void(int id, NMTOOLBAR*)> onBarNotify;$/;"	m	class:mtl::tool_bar	typeref:typename:event<void (int id,NMTOOLBAR *)>
onChange	include/mtl/ole/shell.h	/^			event<void(ULONG)> onChange;$/;"	m	class:mtl::shell::folder_view	typeref:typename:event<void (ULONG)>
onClick	include/mtl/ole/explorer.h	/^		event<void(bool, std::wstring)> onClick;$/;"	m	class:mtl::explorer_tree	typeref:typename:event<void (bool,std::wstring)>
onClick	include/mtl/win/dlg.h	/^        event<int()> onClick;$/;"	m	class:mtl::dialog	typeref:typename:event<int ()>
onCloseTab	include/mtl/win/ctrl.h	/^        event<void(std::wstring)>                                  onCloseTab;$/;"	m	class:mtl::tab_ctrl	typeref:typename:event<void (std::wstring)>
onColorThemeChanged	include/mtl/win/ctrl.h	/^        virtual void onColorThemeChanged()$/;"	f	class:mtl::rebar	typeref:typename:void
onCommand	include/mtl/win/ctrl.h	/^        event<int()> onCommand;$/;"	m	class:mtl::ctrl	typeref:typename:event<int ()>
onDocumentLoad	include/mtl/edge/chrome.h	/^		std::function<void()> onDocumentLoad;$/;"	m	class:mtl::html_wnd	typeref:typename:std::function<void ()>
onDocumentLoadedToken_	include/mtl/edge/chrome.h	/^		EventRegistrationToken		onDocumentLoadedToken_;$/;"	m	class:mtl::html_wnd	typeref:typename:EventRegistrationToken
onDocumentTitleChanged	include/mtl/edge/chrome.h	/^		std::function<void(std::wstring)> onDocumentTitleChanged;$/;"	m	class:mtl::html_wnd	typeref:typename:std::function<void (std::wstring)>
onDrag	include/mtl/win/ctrl.h	/^        event<void(tab&)>                                          onDrag;$/;"	m	class:mtl::tab_ctrl	typeref:typename:event<void (tab &)>
onDragOut	include/mtl/win/ctrl.h	/^        event<void(std::wstring)>                                  onDragOut;$/;"	m	class:mtl::tab_ctrl	typeref:typename:event<void (std::wstring)>
onDrop	include/mtl/ole/dataobj.h	/^			event<void(DWORD)> onDrop;$/;"	m	class:mtl::shell::data_object	typeref:typename:event<void (DWORD)>
onDrop	include/mtl/ole/dataobj.h	/^		event<void(IDataObject*,DWORD,DWORD&)> onDrop;$/;"	m	class:mtl::default_drop_target	typeref:typename:event<void (IDataObject *,DWORD,DWORD &)>
onDrop	include/mtl/win/ctrl.h	/^        event<void(IDataObject*, DWORD, DWORD&)>                   onDrop;$/;"	m	class:mtl::tab_ctrl	typeref:typename:event<void (IDataObject *,DWORD,DWORD &)>
onDropExternal	include/mtl/win/ctrl.h	/^        event<void(int, IDataObject*)>                             onDropExternal;$/;"	m	class:mtl::tab_ctrl	typeref:typename:event<void (int,IDataObject *)>
onEndDlg	include/mtl/win/dlg.h	/^        event<int()> onEndDlg;$/;"	m	class:mtl::dialog	typeref:typename:event<int ()>
onFileChanged	include/mtl/win32/monitor.h	/^		event<void(std::wstring)> onFileChanged;$/;"	m	class:mtl::monitor	typeref:typename:event<void (std::wstring)>
onMessage	include/mtl/edge/chrome.h	/^		std::function<void(std::wstring)> onMessage;$/;"	m	class:mtl::html_wnd	typeref:typename:std::function<void (std::wstring)>
onMessageToken_	include/mtl/edge/chrome.h	/^		EventRegistrationToken		onMessageToken_;$/;"	m	class:mtl::html_wnd	typeref:typename:EventRegistrationToken
onNavigationStarted	include/mtl/edge/chrome.h	/^		std::function<bool(std::wstring)> onNavigationStarted;$/;"	m	class:mtl::html_wnd	typeref:typename:std::function<bool (std::wstring)>
onNotify	include/mtl/win/ctrl.h	/^        event<UINT(NMHDR*)> onNotify;$/;"	m	class:mtl::ctrl	typeref:typename:event<UINT (NMHDR *)>
onOpen	include/mtl/ole/shell.h	/^			event<void(std::wstring)> onOpen;$/;"	m	class:mtl::shell::folder_view	typeref:typename:event<void (std::wstring)>
onPath	include/mtl/ole/shell.h	/^			event<void(std::wstring)> onPath;$/;"	m	class:mtl::shell::folder_view	typeref:typename:event<void (std::wstring)>
onPopulateDataObj	include/mtl/win/ctrl.h	/^        event<void(tab&, IDataObject*)>                            onPopulateDataObj;$/;"	m	class:mtl::tab_ctrl	typeref:typename:event<void (tab &,IDataObject *)>
onRead	include/mtl/win32/io.h	/^            std::function<void(DWORD e, std::string)> onRead;$/;"	m	class:mtl::detail::ReadOverLap	typeref:typename:std::function<void (DWORD e,std::string)>
onRead	include/mtl/win32/pipe.h	/^            std::function<void(std::string)> onRead;$/;"	m	class:mtl::detail::PipeReadOverlap	typeref:typename:std::function<void (std::string)>
onRightClick	include/mtl/win/ctrl.h	/^        event<int()> onRightClick;$/;"	m	class:mtl::tool_bar	typeref:typename:event<int ()>
onSelect	include/mtl/ole/explorer.h	/^		event<void(std::wstring)> onSelect;$/;"	m	class:mtl::explorer_tree	typeref:typename:event<void (std::wstring)>
onSelect	include/mtl/win/ctrl.h	/^        event<void(tab&)>                                          onSelect;$/;"	m	class:mtl::tab_ctrl	typeref:typename:event<void (tab &)>
onUnLoad	include/mtl/win32/module.h	/^		std::function<void()> onUnLoad;$/;"	m	class:mtl::com_module	typeref:typename:std::function<void ()>
onUpdate	include/mtl/win/wnd.h	/^        event<void()> onUpdate;$/;"	m	class:mtl::color_theme	typeref:typename:event<void ()>
onWritten	include/mtl/win32/io.h	/^            std::function<void(DWORD)> onWritten;$/;"	m	class:mtl::detail::WriteOverLap	typeref:typename:std::function<void (DWORD)>
onWritten	include/mtl/win32/pipe.h	/^            std::function<void(bool)> onWritten;$/;"	m	class:mtl::detail::PipeWriteOverlap	typeref:typename:std::function<void (bool)>
on_color_theme_changed	include/mtl/win/ctrl.h	/^        virtual void on_color_theme_changed()$/;"	f	class:mtl::tab_ctrl	typeref:typename:void
on_color_theme_changed	include/mtl/win/wnd.h	/^        virtual void on_color_theme_changed()$/;"	f	class:mtl::wnd	typeref:typename:void
on_create_webview	include/mtl/edge/chrome.h	/^		virtual void on_create_webview(std::wstring target, ICoreWebView2Controller* controller)$/;"	f	class:mtl::html_wnd	typeref:typename:void
on_document_load_handler	include/mtl/edge/chrome.h	/^		virtual void on_document_load_handler()$/;"	f	class:mtl::html_wnd	typeref:typename:void
on_document_title_changed_handler	include/mtl/edge/chrome.h	/^		virtual void on_document_title_changed_handler()$/;"	f	class:mtl::html_wnd	typeref:typename:void
on_init	include/mtl/win/dlg.h	/^        virtual void on_init()$/;"	f	class:mtl::dialog	typeref:typename:void
on_message_handler	include/mtl/edge/chrome.h	/^		virtual void on_message_handler(LPCWSTR json)$/;"	f	class:mtl::html_wnd	typeref:typename:void
on_navigation_started_handler	include/mtl/edge/chrome.h	/^		virtual void on_navigation_started_handler(ICoreWebView2NavigationStartingEventArgs* args)$/;"	f	class:mtl::html_wnd	typeref:typename:void
on_permission_request_handler	include/mtl/edge/chrome.h	/^		virtual void on_permission_request_handler(ICoreWebView2PermissionRequestedEventArgs* args)$/;"	f	class:mtl::html_wnd	typeref:typename:void
on_ui_thread	include/mtl/win32/box.h	/^    inline void on_ui_thread( const std::function<void()>& fun)$/;"	f	namespace:mtl	typeref:typename:void
op	include/mtl/ole/shell.h	/^			inline int  op(UINT  op, HWND hwnd, const std::wstring& from, const std::wstring& to, FILEOP_/;"	f	namespace:mtl::shell::details	typeref:typename:int
open	include/mtl/persist/stream.h	/^        bool open(const std::wstring& filename, DWORD mode = STGM_READWRITE | STGM_SHARE_EXCLUSI/;"	f	class:mtl::storage	typeref:typename:bool
open	include/mtl/win/codlg.h	/^        BOOL open(int flags = OFN_HIDEREADONLY)$/;"	f	class:mtl::open_dlg	typeref:typename:BOOL
open	include/mtl/win/codlg.h	/^        HRESULT open(HWND parent)$/;"	f	class:mtl::file_open_dialog	typeref:typename:HRESULT
open	include/mtl/win32/io.h	/^        DWORD open(const std::wstring& file_path, DWORD mode = OPEN_ALWAYS)$/;"	f	class:mtl::file	typeref:typename:DWORD
open	include/mtl/win32/pipe.h	/^        static named_pipe open(const std::wstring& pipename)$/;"	f	class:mtl::named_pipe	typeref:typename:named_pipe
open	include/mtl/win32/pipe.h	/^        static std::shared_ptr<async_named_pipe> open(const std::wstring& pipename)$/;"	f	class:mtl::async_named_pipe	typeref:typename:std::shared_ptr<async_named_pipe>
open_dlg	include/mtl/win/codlg.h	/^        open_dlg(HWND parent)$/;"	f	class:mtl::open_dlg
open_dlg	include/mtl/win/codlg.h	/^    class open_dlg$/;"	c	namespace:mtl
open_stg	include/mtl/persist/stream.h	/^        punk<IStorage> open_stg(const std::wstring& name, DWORD mode = STGM_READWRITE | STGM_SHA/;"	f	class:mtl::storage	typeref:typename:punk<IStorage>
open_stg	include/mtl/persist/stream.h	/^        punk<IStorage> open_stg(const std::wstring& name, DWORD mode = STGM_READWRITE | STGM_SHA/;"	f	class:mtl::storage_view	typeref:typename:punk<IStorage>
open_stream	include/mtl/persist/stream.h	/^        punk<IStream> open_stream(const std::wstring& name, DWORD mode = STGM_READWRITE | STGM_S/;"	f	class:mtl::storage	typeref:typename:punk<IStream>
open_stream	include/mtl/persist/stream.h	/^        punk<IStream> open_stream(const std::wstring& name, DWORD mode = STGM_READWRITE | STGM_S/;"	f	class:mtl::storage_view	typeref:typename:punk<IStream>
operator !	include/mtl/punk.h	/^        bool operator!() const                               { return (interface_ == 0); }$/;"	f	class:mtl::punk	typeref:typename:bool
operator &	include/mtl/disp/bstr.h	/^		BSTR* operator& ()$/;"	f	class:mtl::bstr	typeref:typename:BSTR *
operator &	include/mtl/disp/sf_array.h	/^		SAFEARRAY** operator&()$/;"	f	class:mtl::sf_array	typeref:typename:SAFEARRAY **
operator &	include/mtl/ole/img.h	/^        HBITMAP* operator&()$/;"	f	class:mtl::bitmap	typeref:typename:HBITMAP *
operator &	include/mtl/ole/shell.h	/^			IEnumIDList** operator&()$/;"	f	class:mtl::shell::enumerator	typeref:typename:IEnumIDList **
operator &	include/mtl/punk.h	/^        I** operator&()                                      { return &interface_; }$/;"	f	class:mtl::punk	typeref:typename:I **
operator &	include/mtl/win32/mem.h	/^        T** operator&()$/;"	f	class:mtl::co_mem	typeref:typename:T **
operator &	include/mtl/win32/mem.h	/^        wchar_t** operator&()$/;"	f	class:mtl::co_str	typeref:typename:wchar_t **
operator &	include/mtl/win32/uni.h	/^		T* operator&()$/;"	f	class:mtl::buffer	typeref:typename:T *
operator ()	include/mtl/disp/sf_array.h	/^		T* operator()()$/;"	f	class:mtl::sf_array_view	typeref:typename:T *
operator ()	include/mtl/sdk.h	/^        sink<T(Args...)>& operator()(event<T(Args...)>& source)$/;"	f	class:mtl::sink	typeref:typename:sink<T (Args...)> &
operator ()	include/mtl/sdk.h	/^        sink<void(Args...)>& operator()(event<void(Args...)>& source)$/;"	f	class:mtl::sink	typeref:typename:sink<void (Args...)> &
operator ()	include/mtl/sdk.h	/^        std::wstring operator()(T code, const handler_t& h)$/;"	f	class:mtl::event	typeref:typename:std::wstring
operator ()	include/mtl/sdk.h	/^        std::wstring operator()(const handler_t& h)$/;"	f	class:mtl::event	typeref:typename:std::wstring
operator ()	include/mtl/win/dlg.h	/^            Binder& operator()(Args&... args)$/;"	f	class:mtl::details::Binder	typeref:typename:Binder &
operator ()	include/mtl/win32/box.h	/^        void operator()( task_t t)$/;"	f	class:mtl::thread_box	typeref:typename:void
operator ()	include/mtl/win32/box.h	/^        void operator()(const task_t& t)$/;"	f	class:mtl::thread_box	typeref:typename:void
operator *	include/mtl/disp/bstr.h	/^		BSTR operator*() const$/;"	f	class:mtl::bstr	typeref:typename:BSTR
operator *	include/mtl/disp/bstr.h	/^		BSTR operator*() const$/;"	f	class:mtl::bstr_view	typeref:typename:BSTR
operator *	include/mtl/obj/marshall.h	/^		T* operator*()$/;"	f	class:mtl::rotten	typeref:typename:T *
operator *	include/mtl/obj/marshall.h	/^		punk<I> operator*()$/;"	f	class:mtl::proxy	typeref:typename:punk<I>
operator *	include/mtl/ole/img.h	/^        HBITMAP operator*()$/;"	f	class:mtl::bitmap	typeref:typename:HBITMAP
operator *	include/mtl/ole/shell.h	/^			LPITEMIDLIST operator*() { return pidl_; }$/;"	f	class:mtl::shell::item	typeref:typename:LPITEMIDLIST
operator *	include/mtl/persist/stream.h	/^        IStorage* operator*()$/;"	f	class:mtl::storage	typeref:typename:IStorage *
operator *	include/mtl/persist/stream.h	/^        IStorage* operator*()$/;"	f	class:mtl::storage_view	typeref:typename:IStorage *
operator *	include/mtl/persist/stream.h	/^        IStream* operator*()$/;"	f	class:mtl::stream	typeref:typename:IStream *
operator *	include/mtl/persist/stream.h	/^        IStream* operator*()$/;"	f	class:mtl::stream_view	typeref:typename:IStream *
operator *	include/mtl/persist/xml.h	/^		punk<IXMLDOMDocument> operator*()$/;"	f	class:mtl::MsxmlDocument	typeref:typename:punk<IXMLDOMDocument>
operator *	include/mtl/punk.h	/^        HRESULT operator*() const$/;"	f	class:mtl::HR	typeref:typename:HRESULT
operator *	include/mtl/punk.h	/^        I* operator*()                                       { return interface_; }$/;"	f	class:mtl::punk	typeref:typename:I *
operator *	include/mtl/scintilla/sci.h	/^		SCIDOC* operator*()$/;"	f	class:mtl::scintilla_wnd::SciDoc	typeref:typename:SCIDOC *
operator *	include/mtl/util/path.h	/^    std::wstring operator*() const$/;"	f	class:mtl::path	typeref:typename:std::wstring
operator *	include/mtl/win/ctrl.h	/^        HIMAGELIST operator*()$/;"	f	class:mtl::image_list	typeref:typename:HIMAGELIST
operator *	include/mtl/win/dlg.h	/^        T& operator*()$/;"	f	class:mtl::dlg_selection	typeref:typename:T &
operator *	include/mtl/win/dlg.h	/^        T& operator*()$/;"	f	class:mtl::dlg_value	typeref:typename:T &
operator *	include/mtl/win/gdi.h	/^        HBRUSH operator* ()$/;"	f	class:mtl::brush	typeref:typename:HBRUSH
operator *	include/mtl/win/gdi.h	/^        HDC operator *()    { return hdc_; }$/;"	f	class:mtl::dc	typeref:typename:HDC
operator *	include/mtl/win/gdi.h	/^        HDC operator*()$/;"	f	class:mtl::compatible_dc	typeref:typename:HDC
operator *	include/mtl/win/gdi.h	/^        HDC operator*()$/;"	f	class:mtl::meta_dc	typeref:typename:HDC
operator *	include/mtl/win/gdi.h	/^        HDC operator*()$/;"	f	class:mtl::paint_dc	typeref:typename:HDC
operator *	include/mtl/win/gdi.h	/^        HDC operator*()$/;"	f	class:mtl::wnd_dc	typeref:typename:HDC
operator *	include/mtl/win/gdi.h	/^        HFONT operator*()$/;"	f	class:mtl::font	typeref:typename:HFONT
operator *	include/mtl/win/gdi.h	/^        HICON operator*()$/;"	f	class:mtl::icon	typeref:typename:HICON
operator *	include/mtl/win/gdi.h	/^        HMENU operator* ()$/;"	f	class:mtl::menu	typeref:typename:HMENU
operator *	include/mtl/win/wnd.h	/^        HWND operator *() const$/;"	f	class:mtl::wnd	typeref:typename:HWND
operator *	include/mtl/win/wnd.h	/^        HWND operator*() const$/;"	f	class:mtl::window	typeref:typename:HWND
operator *	include/mtl/win32/box.h	/^        HACCEL operator*()$/;"	f	class:mtl::accelerators	typeref:typename:HACCEL
operator *	include/mtl/win32/io.h	/^        HANDLE operator*()$/;"	f	class:mtl::file	typeref:typename:HANDLE
operator *	include/mtl/win32/mem.h	/^            T operator*()$/;"	f	class:mtl::global::lock	typeref:typename:T
operator *	include/mtl/win32/mem.h	/^        HGLOBAL operator*()$/;"	f	class:mtl::global	typeref:typename:HGLOBAL
operator *	include/mtl/win32/mem.h	/^        T* operator*()$/;"	f	class:mtl::co_mem	typeref:typename:T *
operator *	include/mtl/win32/mem.h	/^        wchar_t* operator*()$/;"	f	class:mtl::co_str	typeref:typename:wchar_t *
operator *	include/mtl/win32/pipe.h	/^        HANDLE operator*() const$/;"	f	class:mtl::async_named_pipe	typeref:typename:HANDLE
operator *	include/mtl/win32/pipe.h	/^        HANDLE operator*() const$/;"	f	class:mtl::named_pipe	typeref:typename:HANDLE
operator ->	include/mtl/ole/async.h	/^            auto operator->()$/;"	f	class:mtl::details::async_com_holder	typeref:typename:auto
operator ->	include/mtl/persist/stream.h	/^        IStorage* operator->()$/;"	f	class:mtl::storage	typeref:typename:IStorage *
operator ->	include/mtl/persist/stream.h	/^        IStorage* operator->()$/;"	f	class:mtl::storage_view	typeref:typename:IStorage *
operator ->	include/mtl/persist/stream.h	/^        IStream* operator->()$/;"	f	class:mtl::stream	typeref:typename:IStream *
operator ->	include/mtl/persist/stream.h	/^        IStream* operator->()$/;"	f	class:mtl::stream_view	typeref:typename:IStream *
operator ->	include/mtl/persist/xml.h	/^		IXMLDOMDocument* operator->()$/;"	f	class:mtl::MsxmlDocument	typeref:typename:IXMLDOMDocument *
operator ->	include/mtl/punk.h	/^        const details::protect_refcnt<I>* operator->() const { return (const details::protect_re/;"	f	class:mtl::punk	typeref:typename:const details::protect_refcnt<I> *
operator ->	include/mtl/punk.h	/^        details::protect_refcnt<I>* operator->()             { return (details::protect_refcnt<I/;"	f	class:mtl::punk	typeref:typename:details::protect_refcnt<I> *
operator <	include/mtl/persist/stgm.h	/^		bool operator < (const format_etc & rhs) const$/;"	f	struct:mtl::format_etc	typeref:typename:bool
operator =	include/mtl/disp/bstr.h	/^		bstr& operator=(b_move&& str)$/;"	f	class:mtl::bstr	typeref:typename:bstr &
operator =	include/mtl/disp/bstr.h	/^		bstr& operator=(bstr&& b)$/;"	f	class:mtl::bstr	typeref:typename:bstr &
operator =	include/mtl/disp/bstr.h	/^		bstr& operator=(const b_copy& b)$/;"	f	class:mtl::bstr	typeref:typename:bstr &
operator =	include/mtl/disp/bstr.h	/^		bstr& operator=(const bstr& b)$/;"	f	class:mtl::bstr	typeref:typename:bstr &
operator =	include/mtl/disp/bstr.h	/^		bstr& operator=(const ole_char& b)$/;"	f	class:mtl::bstr	typeref:typename:bstr &
operator =	include/mtl/disp/bstr.h	/^		bstr& operator=(const std::string& str)$/;"	f	class:mtl::bstr	typeref:typename:bstr &
operator =	include/mtl/disp/bstr.h	/^		bstr& operator=(const wchar_t b[N])$/;"	f	class:mtl::bstr	typeref:typename:bstr &
operator =	include/mtl/disp/sf_array.h	/^		sf_array& operator=(const SAFEARRAY* sf)$/;"	f	class:mtl::sf_array	typeref:typename:sf_array &
operator =	include/mtl/disp/sf_array.h	/^		sf_array& operator=(const VARIANT& var)$/;"	f	class:mtl::sf_array	typeref:typename:sf_array &
operator =	include/mtl/disp/variant.h	/^		variant& operator=( bstr&& b)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=( variant&& v2)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(BSTR* b)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(BYTE b)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(BYTE* b)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(IDispatch* disp)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(IDispatch** disp)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(IUnknown* disp)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(IUnknown** unk)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(ULONG b)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(ULONG* b)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(ULONGLONG b)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(ULONGLONG* b)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(USHORT b)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(USHORT* b)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(VARIANT* v2)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(b_move&& b)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(bool b)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(char c)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(char* c)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(const VARIANT& v2)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(const b_copy& b)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(const bstr& b)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(const ole_char& str)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(const variant& v2)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(double b)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(double* b)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(float b)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(float* b)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(long c)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(long long c)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(long long* c)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(long* c)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(short c)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/disp/variant.h	/^		variant& operator=(short* c)$/;"	f	class:mtl::variant	typeref:typename:variant &
operator =	include/mtl/obj/marshall.h	/^		rotten<T>& operator=(punk<T>& rhs)$/;"	f	class:mtl::rotten	typeref:typename:rotten<T> &
operator =	include/mtl/ole/img.h	/^        bitmap& operator=(bitmap&& rhs)$/;"	f	class:mtl::bitmap	typeref:typename:bitmap &
operator =	include/mtl/persist/stgm.h	/^		stg_medium& operator=(const STGMEDIUM& rhs)$/;"	f	class:mtl::stg_medium	typeref:typename:stg_medium &
operator =	include/mtl/persist/stgm.h	/^		stg_medium& operator=(stg_medium&& rhs)$/;"	f	class:mtl::stg_medium	typeref:typename:stg_medium &
operator =	include/mtl/punk.h	/^        HR& operator=(const HRESULT rhs)$/;"	f	class:mtl::HR	typeref:typename:HR &
operator =	include/mtl/punk.h	/^        punk& operator=(I* p)$/;"	f	class:mtl::punk	typeref:typename:punk &
operator =	include/mtl/punk.h	/^        punk& operator=(const punk<I>& p)$/;"	f	class:mtl::punk	typeref:typename:punk &
operator =	include/mtl/punk.h	/^        punk& operator=(const punk<T>& p)$/;"	f	class:mtl::punk	typeref:typename:punk &
operator =	include/mtl/punk.h	/^        punk& operator=(punk<I>&& p)$/;"	f	class:mtl::punk	typeref:typename:punk &
operator =	include/mtl/punk.h	/^        punk<I>& operator=( from_object<T>&& rhs)$/;"	f	class:mtl::punk	typeref:typename:punk<I> &
operator =	include/mtl/punk.h	/^        punk<I>& operator=(from_clsid&& rhs)$/;"	f	class:mtl::punk	typeref:typename:punk<I> &
operator =	include/mtl/punk.h	/^        punk<I>& operator=(from_progid&& rhs)$/;"	f	class:mtl::punk	typeref:typename:punk<I> &
operator =	include/mtl/scintilla/sci.h	/^		SciDoc& operator=(SciDoc&& rhs)$/;"	f	class:mtl::scintilla_wnd::SciDoc	typeref:typename:SciDoc &
operator =	include/mtl/scintilla/sci.h	/^		SciDoc& operator=(const SciDoc& rhs)$/;"	f	class:mtl::scintilla_wnd::SciDoc	typeref:typename:SciDoc &
operator =	include/mtl/win/dlg.h	/^        dlg_selection& operator=(const int& rhs)$/;"	f	class:mtl::dlg_selection	typeref:typename:dlg_selection &
operator =	include/mtl/win/dlg.h	/^        dlg_value& operator=(const T& rhs)$/;"	f	class:mtl::dlg_value	typeref:typename:dlg_value &
operator =	include/mtl/win/gdi.h	/^        brush& operator=(brush&& rhs)$/;"	f	class:mtl::brush	typeref:typename:brush &
operator =	include/mtl/win/gdi.h	/^        font& operator=(HFONT rhs)$/;"	f	class:mtl::font	typeref:typename:font &
operator =	include/mtl/win/gdi.h	/^        font& operator=(font&& rhs)$/;"	f	class:mtl::font	typeref:typename:font &
operator =	include/mtl/win/gdi.h	/^        font_desc& operator=(const font_desc& rhs)$/;"	f	class:mtl::font_desc	typeref:typename:font_desc &
operator =	include/mtl/win/gdi.h	/^        font_desc& operator=(font_desc&& rhs)$/;"	f	class:mtl::font_desc	typeref:typename:font_desc &
operator =	include/mtl/win/gdi.h	/^        icon& operator=(HICON icon)$/;"	f	class:mtl::icon	typeref:typename:icon &
operator =	include/mtl/win/gdi.h	/^        icon& operator=(icon&& rhs)$/;"	f	class:mtl::icon	typeref:typename:icon &
operator =	include/mtl/win/gdi.h	/^        menu& operator=(const menu& rhs)$/;"	f	class:mtl::menu	typeref:typename:menu &
operator =	include/mtl/win/gdi.h	/^        menu& operator=(menu&& rhs)$/;"	f	class:mtl::menu	typeref:typename:menu &
operator =	include/mtl/win/layout.h	/^		widget& operator=(const widget& rhs)$/;"	f	struct:mtl::widget	typeref:typename:widget &
operator =	include/mtl/win/layout.h	/^		widget& operator=(widget&& rhs)$/;"	f	struct:mtl::widget	typeref:typename:widget &
operator =	include/mtl/win/wnd.h	/^        timer& operator = (timer&& rhs) noexcept$/;"	f	class:mtl::timer	typeref:typename:timer &
operator =	include/mtl/win32/box.h	/^        accelerators& operator=(accelerators&& rhs)$/;"	f	class:mtl::accelerators	typeref:typename:accelerators &
operator =	include/mtl/win32/box.h	/^        accelerators& operator=(const accelerators& rhs)$/;"	f	class:mtl::accelerators	typeref:typename:accelerators &
operator =	include/mtl/win32/io.h	/^        file& operator=(const file& rhs)$/;"	f	class:mtl::file	typeref:typename:file &
operator =	include/mtl/win32/io.h	/^        file& operator=(file&& rhs)$/;"	f	class:mtl::file	typeref:typename:file &
operator =	include/mtl/win32/mem.h	/^        co_str& operator=(co_str&& rhs)$/;"	f	class:mtl::co_str	typeref:typename:co_str &
operator =	include/mtl/win32/mem.h	/^        co_str& operator=(const co_str& rhs)$/;"	f	class:mtl::co_str	typeref:typename:co_str &
operator =	include/mtl/win32/pipe.h	/^        async_named_pipe& operator=(async_named_pipe&& rhs) noexcept$/;"	f	class:mtl::async_named_pipe	typeref:typename:async_named_pipe &
operator =	include/mtl/win32/pipe.h	/^        named_pipe& operator=(named_pipe&& rhs) noexcept$/;"	f	class:mtl::named_pipe	typeref:typename:named_pipe &
operator =	include/mtl/win32/uni.h	/^		buffer& operator=(buffer&& rhs)$/;"	f	class:mtl::buffer	typeref:typename:buffer &
operator =	include/mtl/win32/uni.h	/^		buffer& operator=(const buffer& rhs)$/;"	f	class:mtl::buffer	typeref:typename:buffer &
operator SAFEARRAY*	include/mtl/disp/sf_array.h	/^			operator SAFEARRAY* ()$/;"	f	class:mtl::details::safearray_base
operator SAFEARRAY*	include/mtl/disp/sf_array.h	/^		operator SAFEARRAY* ()$/;"	f	class:mtl::sf_array
operator T	include/mtl/win/dlg.h	/^        operator T()$/;"	f	class:mtl::dlg_selection
operator T	include/mtl/win/dlg.h	/^        operator T()$/;"	f	class:mtl::dlg_value
operator T*	include/mtl/win32/uni.h	/^		operator T* () $/;"	f	class:mtl::buffer
operator []	include/mtl/obj/marshall.h	/^		punk<T> operator[](DWORD cookie)$/;"	f	class:mtl::git	typeref:typename:punk<T>
operator []	include/mtl/win32/arg.h	/^        std::wstring operator[](const std::wstring& key)$/;"	f	class:mtl::options	typeref:typename:std::wstring
operator []	include/mtl/win32/mem.h	/^        T& operator[](size_t index)$/;"	f	class:mtl::co_mem	typeref:typename:T &
operator []	include/mtl/win32/mem.h	/^        char* operator[](unsigned long long index)$/;"	f	class:mtl::memory_mapped_file	typeref:typename:char *
operator [] 	include/mtl/disp/sf_array.h	/^		T& operator[] (int index)$/;"	f	class:mtl::sf_array_view	typeref:typename:T &
operator bool	include/mtl/ole/shell.h	/^			operator bool() $/;"	f	class:mtl::shell::item
operator bool	include/mtl/ole/shell.h	/^			operator bool() { return shell_folder; }$/;"	f	class:mtl::shell::folder
operator bool	include/mtl/persist/stream.h	/^        operator bool()$/;"	f	class:mtl::storage
operator bool	include/mtl/persist/stream.h	/^        operator bool()$/;"	f	class:mtl::stream
operator bool	include/mtl/persist/xml.h	/^		operator bool()$/;"	f	class:mtl::MsxmlDocument
operator bool	include/mtl/punk.h	/^        operator bool() const                                { return (interface_ != 0); }$/;"	f	class:mtl::punk
operator bool	include/mtl/punk.h	/^        operator bool() const$/;"	f	class:mtl::HR
operator bool	include/mtl/util/path.h	/^    operator bool () const$/;"	f	class:mtl::path
operator bool	include/mtl/win/gdi.h	/^        operator bool()$/;"	f	class:mtl::menu
operator bool	include/mtl/win32/io.h	/^        operator bool()$/;"	f	class:mtl::file
operator bool	include/mtl/win32/mem.h	/^        operator bool()$/;"	f	class:mtl::memory_mapped_file
operator bool	include/mtl/win32/pipe.h	/^        operator bool()$/;"	f	class:mtl::async_named_pipe
operator bool	include/mtl/win32/pipe.h	/^        operator bool()$/;"	f	class:mtl::named_pipe
operator const T*	include/mtl/win32/uni.h	/^		operator const T* () const$/;"	f	class:mtl::buffer
operator std::wstring	include/mtl/util/path.h	/^    operator std::wstring() const $/;"	f	class:mtl::path
options	include/mtl/edge/chrome.h	/^		void options()$/;"	f	class:mtl::html_wnd	typeref:typename:void
options	include/mtl/win32/arg.h	/^        options(const std::vector<std::wstring>& opts)$/;"	f	class:mtl::options
options	include/mtl/win32/arg.h	/^    class options$/;"	c	namespace:mtl
options_	include/mtl/win/codlg.h	/^        DWORD options_;$/;"	m	class:mtl::pick_folder	typeref:typename:DWORD
options_	include/mtl/win/codlg.h	/^        int options_ = 0;$/;"	m	class:mtl::file_dialog	typeref:typename:int
options_	include/mtl/win32/arg.h	/^        std::map<std::wstring, std::wstring> options_;$/;"	m	class:mtl::options	typeref:typename:std::map<std::wstring,std::wstring>
overTheLap	include/mtl/win32/monitor.h	/^		OVERLAPPED* overTheLap = nullptr;$/;"	m	class:mtl::monitor	typeref:typename:OVERLAPPED *
overlappedCompletionRoutine	include/mtl/win32/io.h	/^            static void overlappedCompletionRoutine($/;"	f	class:mtl::detail::ReadOverLap	typeref:typename:void
overlappedCompletionRoutine	include/mtl/win32/io.h	/^            static void overlappedCompletionRoutine($/;"	f	class:mtl::detail::WriteOverLap	typeref:typename:void
overlappedCompletionRoutine	include/mtl/win32/monitor.h	/^		static void overlappedCompletionRoutine($/;"	f	class:mtl::monitor	typeref:typename:void
overlappedCompletionRoutine	include/mtl/win32/pipe.h	/^            static void overlappedCompletionRoutine($/;"	f	class:mtl::detail::PipeReadOverlap	typeref:typename:void
overlappedCompletionRoutine	include/mtl/win32/pipe.h	/^            static void overlappedCompletionRoutine($/;"	f	class:mtl::detail::PipeWriteOverlap	typeref:typename:void
owner_drawn	include/mtl/win/wnd.h	/^    class owner_drawn$/;"	c	namespace:mtl
padding	include/mtl/win/ctrl.h	/^        tool_bar& padding(int w, int h)$/;"	f	class:mtl::tool_bar	typeref:typename:tool_bar &
padding	include/mtl/win/layout.h	/^		RECT padding = { 0,0,0,0 };$/;"	m	struct:mtl::widget	typeref:typename:RECT
padding	include/mtl/win/wnd.h	/^        color_theme& padding(int p)$/;"	f	class:mtl::color_theme	typeref:typename:color_theme &
padding	include/mtl/win/wnd.h	/^        int padding() { return padding_; }$/;"	f	class:mtl::color_theme	typeref:typename:int
padding_	include/mtl/win/wnd.h	/^        int                             padding_ = 6;$/;"	m	class:mtl::color_theme	typeref:typename:int
page_size	include/mtl/win32/mem.h	/^        static unsigned long page_size()$/;"	f	class:mtl::memory_mapped_file	typeref:typename:unsigned long
paint_dc	include/mtl/win/gdi.h	/^        paint_dc(HWND hwnd)$/;"	f	class:mtl::paint_dc
paint_dc	include/mtl/win/gdi.h	/^    class paint_dc : public dc$/;"	c	namespace:mtl
parent	include/mtl/win/gdi.h	/^        HMENU parent = nullptr;$/;"	m	class:mtl::menu_item	typeref:typename:HMENU
parent	include/mtl/win/wnd.h	/^        virtual HWND parent() const$/;"	f	class:mtl::wnd	typeref:typename:HWND
parentWindow_	include/mtl/ole/control.h	/^		HWND							parentWindow_ = nullptr;$/;"	m	class:mtl::control	typeref:typename:HWND
parent_dir	include/mtl/util/path.h	/^	const path parent_dir() const$/;"	f	class:mtl::path	typeref:typename:const path
parse	include/mtl/persist/json.h	/^		inline json parse(const std::string& txt)$/;"	f	namespace:mtl::JSON	typeref:typename:json
parse	include/mtl/persist/xml.h	/^		bool parse(const std::wstring& xml)$/;"	f	class:mtl::MsxmlDocument	typeref:typename:bool
parseSuccess_	include/mtl/persist/xml.h	/^		bool parseSuccess_ = false;$/;"	m	class:mtl::MsxmlDocument	typeref:typename:bool
parse_arg	include/mtl/win32/arg.h	/^        void parse_arg(std::wstring arg)$/;"	f	class:mtl::options	typeref:typename:void
parse_display_name	include/mtl/ole/shell.h	/^			shit parse_display_name(const std::wstring& path, DWORD attributes = SFGAO_FOLDER | SFGAO_STR/;"	f	class:mtl::shell::folder	typeref:typename:shit
parse_display_name	include/mtl/ole/shell.h	/^		inline shit parse_display_name(const std::wstring& path, DWORD attributes = SFGAO_FOLDER | SFG/;"	f	namespace:mtl::shell	typeref:typename:shit
parts_	include/mtl/win/ctrl.h	/^        int parts_ = 0;$/;"	m	class:mtl::status_bar	typeref:typename:int
paste	include/mtl/edge/chrome.h	/^		void paste()$/;"	f	class:mtl::html_wnd	typeref:typename:void
paste	include/mtl/ole/shell.h	/^			void paste()$/;"	f	class:mtl::shell::folder_view	typeref:typename:void
paste	include/mtl/scintilla/sci.h	/^	scintilla_wnd& paste()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
path	include/mtl/ole/shell.h	/^			std::wstring path()					{ return path_; }$/;"	f	class:mtl::shell::folder_view	typeref:typename:std::wstring
path	include/mtl/ole/shell.h	/^			void path(const std::wstring& p)	{ path_ = p; show_path(p); }$/;"	f	class:mtl::shell::folder_view	typeref:typename:void
path	include/mtl/util/path.h	/^    path() {};$/;"	f	class:mtl::path
path	include/mtl/util/path.h	/^    path(const path& rhs)$/;"	f	class:mtl::path
path	include/mtl/util/path.h	/^    path(const std::wstring& p):path_(canonicalize(p)) {}$/;"	f	class:mtl::path
path	include/mtl/util/path.h	/^class path$/;"	c	namespace:mtl
path	include/mtl/win/codlg.h	/^        HRESULT path(const std::wstring& path)$/;"	f	class:mtl::file_dialog	typeref:typename:HRESULT
path	include/mtl/win/codlg.h	/^        const std::wstring& path()$/;"	f	class:mtl::file_dialog	typeref:typename:const std::wstring &
path	include/mtl/win32/arg.h	/^        std::wstring path()$/;"	f	class:mtl::options	typeref:typename:std::wstring
path	include/mtl/win32/io.h	/^        std::wstring path() const$/;"	f	class:mtl::file	typeref:typename:std::wstring
path	include/mtl/win32/monitor.h	/^		std::wstring path;$/;"	m	class:mtl::monitor	typeref:typename:std::wstring
path2bitmap_	include/mtl/ole/img.h	/^        std::map<std::wstring, HBITMAP> path2bitmap_;$/;"	m	class:mtl::bitmap_cache	typeref:typename:std::map<std::wstring,HBITMAP>
path2index	include/mtl/win/ctrl.h	/^        std::map<std::wstring, int> path2index;$/;"	m	class:mtl::combo_box_ex	typeref:typename:std::map<std::wstring,int>
pathSize2bitmap_	include/mtl/ole/img.h	/^        std::map<std::wstring, std::map<int, std::map<int, HBITMAP>>> pathSize2bitmap_;$/;"	m	class:mtl::bitmap_cache	typeref:typename:std::map<std::wstring,std::map<int,std::map<int,HBITMAP>>>
path_	include/mtl/ole/shell.h	/^			std::wstring path_;$/;"	m	class:mtl::shell::folder_view	typeref:typename:std::wstring
path_	include/mtl/util/path.h	/^    const std::wstring path_;$/;"	m	class:mtl::path	typeref:typename:const std::wstring
path_	include/mtl/win32/arg.h	/^        std::wstring path_;$/;"	m	class:mtl::options	typeref:typename:std::wstring
path_to_self	include/mtl/win32/module.h	/^	inline std::wstring path_to_self()$/;"	f	namespace:mtl	typeref:typename:std::wstring
path_to_self_directory	include/mtl/win32/module.h	/^	inline std::wstring path_to_self_directory(const wchar_t* postfix = 0)$/;"	f	namespace:mtl	typeref:typename:std::wstring
paths	include/mtl/win/codlg.h	/^        const std::vector<std::wstring>& paths()$/;"	f	class:mtl::file_dialog	typeref:typename:const std::vector<std::wstring> &
paths_	include/mtl/win/codlg.h	/^        std::vector<std::wstring> paths_;$/;"	m	class:mtl::file_dialog	typeref:typename:std::vector<std::wstring>
permissionRequestToken_	include/mtl/edge/chrome.h	/^		EventRegistrationToken		permissionRequestToken_;$/;"	m	class:mtl::html_wnd	typeref:typename:EventRegistrationToken
persist_file	include/mtl/persist/persist.h	/^    class persist_file : public IPersistFile$/;"	c	namespace:mtl
persist_storage	include/mtl/persist/persist.h	/^    class persist_storage : public IPersistStorage$/;"	c	namespace:mtl
persist_stream	include/mtl/persist/persist.h	/^    class persist_stream : public IPersistStreamInit$/;"	c	namespace:mtl
persistable	include/mtl/persist/persist.h	/^    class persistable {};$/;"	c	namespace:mtl
persistent	include/mtl/persist/persist.h	/^    class persistent : public persist_stream<T>, public persist_file<T>, public persist_storage</;"	c	namespace:mtl
pick_folder	include/mtl/win/codlg.h	/^        pick_folder($/;"	f	class:mtl::pick_folder
pick_folder	include/mtl/win/codlg.h	/^    class pick_folder$/;"	c	namespace:mtl
pick_font	include/mtl/win/codlg.h	/^        pick_font(DWORD styles = 0)$/;"	f	class:mtl::pick_font
pick_font	include/mtl/win/codlg.h	/^    class pick_font$/;"	c	namespace:mtl
pidl_	include/mtl/ole/shell.h	/^			LPITEMIDLIST	pidl_;$/;"	m	class:mtl::shell::item	typeref:typename:LPITEMIDLIST
pipe	include/mtl/win32/pipe.h	/^            HANDLE pipe = INVALID_HANDLE_VALUE;$/;"	m	class:mtl::detail::PipeReadOverlap	typeref:typename:HANDLE
pipe	include/mtl/win32/pipe.h	/^            HANDLE pipe = INVALID_HANDLE_VALUE;$/;"	m	class:mtl::detail::PipeWriteOverlap	typeref:typename:HANDLE
pipe_	include/mtl/win32/pipe.h	/^        HANDLE pipe_;$/;"	m	class:mtl::async_named_pipe	typeref:typename:HANDLE
pipe_	include/mtl/win32/pipe.h	/^        HANDLE pipe_;$/;"	m	class:mtl::named_pipe	typeref:typename:HANDLE
pipe_name_	include/mtl/win32/pipe.h	/^        std::wstring pipe_name_;$/;"	m	class:mtl::elevator	typeref:typename:std::wstring
pixel_to_himetric	include/mtl/ole/control.h	/^	inline void pixel_to_himetric(SIZE* size)$/;"	f	namespace:mtl	typeref:typename:void
popup	include/mtl/win/gdi.h	/^        void popup(HWND wnd, int flags = TPM_LEFTALIGN)$/;"	f	class:mtl::menu	typeref:typename:void
pos	include/mtl/scintilla/sci.h	/^	int pos()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:int
pos	include/mtl/scintilla/sci.h	/^	scintilla_wnd& pos(int pos)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
pos	include/mtl/win32/io.h	/^        unsigned long long pos()$/;"	f	class:mtl::file	typeref:typename:unsigned long long
pos	include/mtl/win32/io.h	/^        void pos(unsigned long long p)$/;"	f	class:mtl::file	typeref:typename:void
posRect_	include/mtl/ole/control.h	/^		RECT							posRect_;$/;"	m	class:mtl::control	typeref:typename:RECT
pos_	include/mtl/obj/enum.h	/^		int pos_ = 0;$/;"	m	class:mtl::enum_unknown	typeref:typename:int
pos_	include/mtl/obj/enum.h	/^		int pos_ = 0;$/;"	m	class:mtl::enum_variant	typeref:typename:int
pos_	include/mtl/ole/cp.h	/^		int pos_ = 0;$/;"	m	class:mtl::enum_connection_point	typeref:typename:int
pos_from_line	include/mtl/scintilla/sci.h	/^	int pos_from_line(int line)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:int
post_msg	include/mtl/win/wnd.h	/^        LRESULT post_msg(UINT msg, WPARAM wParam = 0, LPARAM lParam = 0)$/;"	f	class:mtl::wnd	typeref:typename:LRESULT
prevCursor_	include/mtl/win/layout.h	/^		HCURSOR			prevCursor_;$/;"	m	class:mtl::splitter	typeref:typename:HCURSOR
print	include/mtl/edge/chrome.h	/^		void print()$/;"	f	class:mtl::html_wnd	typeref:typename:void
print_page	include/mtl/scintilla/sci.h	/^	scintilla_wnd& print_page(bool bDraw, Sci_RangeToFormat* pfr)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
proc	include/mtl/win/wnd.h	/^            static BOOL __stdcall proc(HWND hWnd, LPARAM lParam)$/;"	f	struct:mtl::find_child::Enumerator	typeref:typename:BOOL __stdcall
prog_id	include/mtl/punk.h	/^        std::string prog_id;$/;"	m	struct:mtl::from_progid	typeref:typename:std::string
properties	include/mtl/ole/shell.h	/^			void properties()$/;"	f	class:mtl::shell::folder_view	typeref:typename:void
protect_refcnt	include/mtl/punk.h	/^        class protect_refcnt : public I$/;"	c	namespace:mtl::details
provide_class_info	include/mtl/disp/disp.h	/^class provide_class_info : public IProvideClassInfo2$/;"	c	namespace:mtl
proxy	include/mtl/obj/marshall.h	/^		explicit proxy( punk<I>& i, DWORD flags = MSHLFLAGS_NORMAL, DWORD ctx = MSHCTX_LOCAL)$/;"	f	class:mtl::proxy
proxy	include/mtl/obj/marshall.h	/^		explicit proxy(DWORD cookie)$/;"	f	class:mtl::proxy
proxy	include/mtl/obj/marshall.h	/^		explicit proxy(I* i, DWORD flags = MSHLFLAGS_NORMAL, DWORD ctx = MSHCTX_LOCAL)$/;"	f	class:mtl::proxy
proxy	include/mtl/obj/marshall.h	/^		proxy(const proxy& rhs)$/;"	f	class:mtl::proxy
proxy	include/mtl/obj/marshall.h	/^		proxy(proxy&& rhs)$/;"	f	class:mtl::proxy
proxy	include/mtl/obj/marshall.h	/^		proxy<I> proxy(I* p)$/;"	f	class:mtl::git	typeref:typename:proxy<I>
proxy	include/mtl/obj/marshall.h	/^	class proxy$/;"	c	namespace:mtl
ps_	include/mtl/win/gdi.h	/^        PAINTSTRUCT		ps_;$/;"	m	class:mtl::paint_dc	typeref:typename:PAINTSTRUCT
pull	include/mtl/win32/box.h	/^        bool pull()$/;"	f	class:mtl::thread_box	typeref:typename:bool
pull	include/mtl/win32/box.h	/^        bool pull(Args ... args)$/;"	f	class:mtl::thread_box	typeref:typename:bool
punk	include/mtl/punk.h	/^         punk(const punk<T>& rhs)$/;"	f	class:mtl::punk
punk	include/mtl/punk.h	/^         punk(punk<T>&& rhs)$/;"	f	class:mtl::punk
punk	include/mtl/punk.h	/^        explicit punk(I* i)  \/\/ explicit for reason$/;"	f	class:mtl::punk
punk	include/mtl/punk.h	/^        explicit punk(T* rhs)$/;"	f	class:mtl::punk
punk	include/mtl/punk.h	/^        punk() : interface_(0) { }$/;"	f	class:mtl::punk
punk	include/mtl/punk.h	/^        punk(const punk<I>& rhs)$/;"	f	class:mtl::punk
punk	include/mtl/punk.h	/^        punk(from_clsid&& rhs)$/;"	f	class:mtl::punk
punk	include/mtl/punk.h	/^        punk(from_object<T>&& rhs)$/;"	f	class:mtl::punk
punk	include/mtl/punk.h	/^        punk(from_progid&& rhs)$/;"	f	class:mtl::punk
punk	include/mtl/punk.h	/^        punk(punk<I>&& rhs)$/;"	f	class:mtl::punk
punk	include/mtl/punk.h	/^    class punk$/;"	c	namespace:mtl
put	include/mtl/disp/aut.h	/^		variant put(variant v)$/;"	f	class:mtl::automation	typeref:typename:variant
put	include/mtl/disp/sf_array.h	/^			HRESULT put(long index, void* pv)$/;"	f	class:mtl::details::safearray_base	typeref:typename:HRESULT
put	include/mtl/disp/sf_array.h	/^			HRESULT put(long* index, void* pv)$/;"	f	class:mtl::details::safearray_base	typeref:typename:HRESULT
putref	include/mtl/disp/aut.h	/^		variant putref(VARIANT* v)$/;"	f	class:mtl::automation	typeref:typename:variant
query_interface	include/mtl/punk.h	/^        HRESULT query_interface(REFIID iid, void** iUnknown) const$/;"	f	class:mtl::punk	typeref:typename:HRESULT
query_interface	include/mtl/punk.h	/^        HRESULT query_interface(T** Unknown) const$/;"	f	class:mtl::punk	typeref:typename:HRESULT
queue_	include/mtl/win32/box.h	/^        std::deque<task_t> queue_;$/;"	m	class:mtl::thread_box	typeref:typename:std::deque<task_t>
raw_bytes_	include/mtl/win/enc.h	/^			const char* raw_bytes_ = 0;$/;"	m	class:mtl::details::FileSniffer	typeref:typename:const char *
raw_bytes_as_utf8	include/mtl/win/enc.h	/^	inline std::string raw_bytes_as_utf8(file_encoding& fe, const char* raw_bytes, size_t len)$/;"	f	namespace:mtl	typeref:typename:std::string
raw_bytes_as_wstring	include/mtl/win/enc.h	/^	inline std::wstring raw_bytes_as_wstring(file_encoding& fe, const char* raw_bytes, size_t len)$/;"	f	namespace:mtl	typeref:typename:std::wstring
reDim	include/mtl/disp/sf_array.h	/^			HRESULT reDim(SAFEARRAYBOUND& psaboundNew)$/;"	f	class:mtl::details::safearray_base	typeref:typename:HRESULT
reDim	include/mtl/disp/sf_array.h	/^			HRESULT reDim(SAFEARRAYBOUND* psaboundNew)$/;"	f	class:mtl::details::safearray_base	typeref:typename:HRESULT
reDim	include/mtl/disp/sf_array.h	/^			HRESULT reDim(int i)$/;"	f	class:mtl::details::safearray_base	typeref:typename:HRESULT
read	include/mtl/persist/stream.h	/^        std::string read()$/;"	f	class:mtl::stream	typeref:typename:std::string
read	include/mtl/persist/stream.h	/^        std::string read()$/;"	f	class:mtl::stream_view	typeref:typename:std::string
read	include/mtl/win32/pipe.h	/^        std::string read()$/;"	f	class:mtl::named_pipe	typeref:typename:std::string
read	include/mtl/win32/pipe.h	/^        std::string read(const std::wstring& file)$/;"	f	class:mtl::elevator	typeref:typename:std::string
read	include/mtl/win32/pipe.h	/^        void read(const std::wstring& file, std::function<void(std::string)> cb)$/;"	f	class:mtl::elevator	typeref:typename:void
read	include/mtl/win32/pipe.h	/^        void read(std::function<void(std::string)> cb)$/;"	f	class:mtl::async_named_pipe	typeref:typename:void
readAll	include/mtl/win32/pipe.h	/^            bool readAll = false;$/;"	m	class:mtl::detail::PipeReadOverlap	typeref:typename:bool
read_all	include/mtl/win32/pipe.h	/^        void read_all(std::function<void(std::string)> cb)$/;"	f	class:mtl::async_named_pipe	typeref:typename:void
read_only	include/mtl/win/codlg.h	/^        bool read_only()$/;"	f	class:mtl::open_dlg	typeref:typename:bool
rebar	include/mtl/win/ctrl.h	/^    class rebar : public ctrl<rebar>$/;"	c	namespace:mtl
redo	include/mtl/scintilla/sci.h	/^	scintilla_wnd& redo()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
refCnt_	include/mtl/disp/disp.h	/^		std::atomic<long> refCnt_;$/;"	m	class:mtl::dispatch	typeref:typename:std::atomic<long>
refCnt_	include/mtl/obj/impl.h	/^		std::atomic<long> refCnt_;$/;"	m	class:mtl::implements	typeref:typename:std::atomic<long>
refresh	include/mtl/ole/shell.h	/^			void refresh()$/;"	f	class:mtl::shell::folder_view	typeref:typename:void
register_class_objects	include/mtl/obj/localserver.h	/^			static void register_class_objects(std::vector<DWORD>& cookies)$/;"	f	class:mtl::details::registrar	typeref:typename:void
register_format	include/mtl/win/clipboard.h	/^		static UINT register_format(const std::wstring& desc)$/;"	f	class:mtl::clipboard	typeref:typename:UINT
register_interface	include/mtl/obj/marshall.h	/^		DWORD register_interface(T* t)$/;"	f	class:mtl::git	typeref:typename:DWORD
register_object	include/mtl/obj/marshall.h	/^		static DWORD register_object( const std::wstring& id, IUnknown* unk, DWORD flags = ROTFLAGS_RE/;"	f	class:mtl::rot	typeref:typename:DWORD
register_object	include/mtl/obj/marshall.h	/^		static DWORD register_object(const CLSID& clsid, const std::wstring& id, IUnknown* unk, DWORD /;"	f	class:mtl::rot	typeref:typename:DWORD
registrar	include/mtl/obj/localserver.h	/^		class registrar$/;"	c	namespace:mtl::details
registrar	include/mtl/obj/localserver.h	/^		class registrar<void(T)>$/;"	c	namespace:mtl::details
registrar	include/mtl/obj/localserver.h	/^		class registrar<void(T, Args...)>$/;"	c	namespace:mtl::details
relayout	include/mtl/win/wnd.h	/^        virtual wnd& relayout()$/;"	f	class:mtl::wnd	typeref:typename:wnd &
release	include/mtl/ole/cp.h	/^		void release(DWORD c)$/;"	f	class:mtl::cookies	typeref:typename:void
release	include/mtl/persist/stream.h	/^        void release()$/;"	f	class:mtl::storage	typeref:typename:void
release	include/mtl/punk.h	/^        void release()$/;"	f	class:mtl::punk	typeref:typename:void
release_pidl	include/mtl/ole/shell.h	/^			void release_pidl(LPITEMIDLIST pidl)$/;"	f	class:mtl::shell::folder	typeref:typename:void
reload	include/mtl/edge/chrome.h	/^		void reload()$/;"	f	class:mtl::html_wnd	typeref:typename:void
remap	include/mtl/win32/mem.h	/^        bool remap(unsigned long long offset)$/;"	f	class:mtl::memory_mapped_file	typeref:typename:bool
remove	include/mtl/ole/shell.h	/^		inline int  remove($/;"	f	namespace:mtl::shell	typeref:typename:int
remove	include/mtl/win/ctrl.h	/^        tab remove(const std::wstring& id)$/;"	f	class:mtl::tab_ctrl	typeref:typename:tab
remove	include/mtl/win/ctrl.h	/^        tab remove(int index = -1)$/;"	f	class:mtl::tab_ctrl	typeref:typename:tab
remove	include/mtl/win/ctrl.h	/^        void remove(int idx)$/;"	f	class:mtl::rebar	typeref:typename:void
remove	include/mtl/win/wnd.h	/^        void remove(HWND hWnd)$/;"	f	class:mtl::modeless_dialogs	typeref:typename:void
removeItem	include/mtl/win/ctrl.h	/^        tab* removeItem(int index = -1, bool deleteItem = true)$/;"	f	class:mtl::tab_ctrl	typeref:typename:tab *
remove_backslash	include/mtl/util/path.h	/^    const path remove_backslash() const$/;"	f	class:mtl::path	typeref:typename:const path
remove_marker	include/mtl/scintilla/sci.h	/^	scintilla_wnd& remove_marker(int line, int num = 2)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
remove_named_object	include/mtl/script/script.h	/^		HRESULT remove_named_object(const std::wstring& obj)$/;"	f	class:mtl::active_script	typeref:typename:HRESULT
rename	include/mtl/ole/shell.h	/^			void rename()$/;"	f	class:mtl::shell::folder_view	typeref:typename:void
rename	include/mtl/ole/shell.h	/^		inline int  rename($/;"	f	namespace:mtl::shell	typeref:typename:int
rename_extension	include/mtl/util/path.h	/^    const path rename_extension(const std::wstring& extension) const$/;"	f	class:mtl::path	typeref:typename:const path
replace	include/mtl/scintilla/sci.h	/^	bool replace(const std::string& what, const std::string& whith, int options)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:bool
replace	include/mtl/win/codlg.h	/^        HWND replace(HWND parent, DWORD flags = FR_DOWN, const wchar_t* what = 0, const wchar_t*/;"	f	class:mtl::search_dlg	typeref:typename:HWND
replace_selection	include/mtl/scintilla/sci.h	/^	scintilla_wnd& replace_selection(const std::string& txt)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
reset	include/mtl/ole/shell.h	/^			void reset()$/;"	f	class:mtl::shell::enumerator	typeref:typename:void
reset	include/mtl/persist/stream.h	/^        void reset()$/;"	f	class:mtl::stream	typeref:typename:void
reset	include/mtl/persist/stream.h	/^        void reset()$/;"	f	class:mtl::stream_view	typeref:typename:void
reset	include/mtl/win/codlg.h	/^        void reset()$/;"	f	class:mtl::open_dlg	typeref:typename:void
reset_menu	include/mtl/win/mdi.h	/^        void reset_menu()$/;"	f	class:mtl::mdi_frame	typeref:typename:void
restore	include/mtl/win/gdi.h	/^        void restore(int i = -1) { ::RestoreDC(hdc_, i); }$/;"	f	class:mtl::dc	typeref:typename:void
restore	include/mtl/win/mdi.h	/^        void restore()$/;"	f	class:mtl::mdi_frame	typeref:typename:void
result	include/mtl/punk.h	/^        HRESULT result() const$/;"	f	class:mtl::HR	typeref:typename:HRESULT
result	include/mtl/script/script.h	/^		variant& result()$/;"	f	class:mtl::active_script	typeref:typename:variant &
result	include/mtl/win/wnd.h	/^            HWND result = nullptr;$/;"	m	struct:mtl::find_child::Enumerator	typeref:typename:HWND
revoke	include/mtl/obj/marshall.h	/^	void proxy<I>::revoke()$/;"	f	class:mtl::proxy	typeref:typename:void
revoke_interface	include/mtl/obj/marshall.h	/^		HRESULT revoke_interface( mtl::proxy<I>& p)$/;"	f	class:mtl::git	typeref:typename:HRESULT
revoke_interface	include/mtl/obj/marshall.h	/^		HRESULT revoke_interface(DWORD cookie)$/;"	f	class:mtl::git	typeref:typename:HRESULT
revoke_object	include/mtl/obj/marshall.h	/^		static void revoke_object(DWORD cookie)$/;"	f	class:mtl::rot	typeref:typename:void
rgb_to_hex	include/mtl/util/rgb.h	/^	inline const char* rgb_to_hex(COLORREF col)$/;"	f	namespace:mtl	typeref:typename:const char *
rot	include/mtl/obj/marshall.h	/^	class rot$/;"	c	namespace:mtl
rotten	include/mtl/obj/marshall.h	/^		rotten()$/;"	f	class:mtl::rotten
rotten	include/mtl/obj/marshall.h	/^		rotten(const CLSID& c)$/;"	f	class:mtl::rotten
rotten	include/mtl/obj/marshall.h	/^		rotten(const CLSID& c, const std::wstring& id)$/;"	f	class:mtl::rotten
rotten	include/mtl/obj/marshall.h	/^		rotten(const std::wstring& id)$/;"	f	class:mtl::rotten
rotten	include/mtl/obj/marshall.h	/^	class rotten$/;"	c	namespace:mtl
row_layout	include/mtl/win/layout.h	/^		row_layout()$/;"	f	class:mtl::row_layout
row_layout	include/mtl/win/layout.h	/^		row_layout(std::vector<widget>&& widgets)$/;"	f	class:mtl::row_layout
row_layout	include/mtl/win/layout.h	/^	class row_layout : public layout$/;"	c	namespace:mtl
run	include/mtl/obj/localserver.h	/^		int run()$/;"	f	class:mtl::local_server	typeref:typename:int
run	include/mtl/win/app.h	/^        int run()$/;"	f	class:mtl::application	typeref:typename:int
run	include/mtl/win/app.h	/^        int run(HWND acceleree, mtl::accelerators accel)$/;"	f	class:mtl::application	typeref:typename:int
run	include/mtl/win32/box.h	/^        int run( const std::function<void(MSG&)> msg_handler)$/;"	f	class:mtl::thread_box	typeref:typename:int
run	include/mtl/win32/box.h	/^        int run()$/;"	f	class:mtl::thread_box	typeref:typename:int
run	include/mtl/win32/box.h	/^        int run(HWND wnd, accelerators accels)$/;"	f	class:mtl::thread_box	typeref:typename:int
run_script	include/mtl/script/script.h	/^		virtual HRESULT run_script(const std::wstring& script, int flag = SCRIPTTEXT_ISEXPRESSION | SC/;"	f	class:mtl::active_script	typeref:typename:HRESULT
safearray_base	include/mtl/disp/sf_array.h	/^			safearray_base(void)$/;"	f	class:mtl::details::safearray_base
safearray_base	include/mtl/disp/sf_array.h	/^		class safearray_base$/;"	c	namespace:mtl::details
save	include/mtl/win/codlg.h	/^        BOOL  save(int flags = OFN_HIDEREADONLY)$/;"	f	class:mtl::open_dlg	typeref:typename:BOOL
save	include/mtl/win/codlg.h	/^        HRESULT save(HWND parent)$/;"	f	class:mtl::file_save_dialog	typeref:typename:HRESULT
save	include/mtl/win/gdi.h	/^        void save() { ::SaveDC(hdc_); }$/;"	f	class:mtl::dc	typeref:typename:void
scale	include/mtl/win/gdi.h	/^        font_desc scale(int iDpi)$/;"	f	class:mtl::font_desc	typeref:typename:font_desc
sciDoc_	include/mtl/scintilla/sci.h	/^		SCIDOC* sciDoc_ = nullptr;$/;"	m	class:mtl::scintilla_wnd::SciDoc	typeref:typename:SCIDOC *
sci_lexer	include/mtl/scintilla/sci.h	/^	sci_lexer()$/;"	f	class:mtl::sci_lexer
sci_lexer	include/mtl/scintilla/sci.h	/^class sci_lexer$/;"	c	namespace:mtl
scintilla_wnd	include/mtl/scintilla/sci.h	/^	scintilla_wnd()$/;"	f	class:mtl::scintilla_wnd
scintilla_wnd	include/mtl/scintilla/sci.h	/^class scintilla_wnd : public ctrl<scintilla_wnd>$/;"	c	namespace:mtl
scrollColWidth_	include/mtl/win/wnd.h	/^        int scrollColWidth_;$/;"	m	class:mtl::scroll_wnd	typeref:typename:int
scrollCols_	include/mtl/win/wnd.h	/^        unsigned int scrollCols_;$/;"	m	class:mtl::scroll_wnd	typeref:typename:unsigned int
scrollRowHeight_	include/mtl/win/wnd.h	/^        int scrollRowHeight_;$/;"	m	class:mtl::scroll_wnd	typeref:typename:int
scrollRows_	include/mtl/win/wnd.h	/^        unsigned int scrollRows_;$/;"	m	class:mtl::scroll_wnd	typeref:typename:unsigned int
scroll_caret	include/mtl/scintilla/sci.h	/^	LRESULT scroll_caret()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:LRESULT
scroll_h	include/mtl/win/wnd.h	/^        void scroll_h(unsigned int w)$/;"	f	class:mtl::scroll_wnd	typeref:typename:void
scroll_v	include/mtl/win/wnd.h	/^        void scroll_v(unsigned int h)$/;"	f	class:mtl::scroll_wnd	typeref:typename:void
scroll_wnd	include/mtl/win/wnd.h	/^        scroll_wnd()$/;"	f	class:mtl::scroll_wnd
scroll_wnd	include/mtl/win/wnd.h	/^    class scroll_wnd : public window<T>$/;"	c	namespace:mtl
search	include/mtl/scintilla/sci.h	/^	bool search(const std::string& what, int options)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:bool
searchOptions_	include/mtl/scintilla/sci.h	/^	int						searchOptions_ = FR_DOWN;$/;"	m	class:mtl::scintilla_wnd	typeref:typename:int
search_dlg	include/mtl/win/codlg.h	/^        search_dlg()$/;"	f	class:mtl::search_dlg
search_dlg	include/mtl/win/codlg.h	/^    class search_dlg $/;"	c	namespace:mtl
search_options	include/mtl/scintilla/sci.h	/^	bool search_options(int options)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:bool
search_options	include/mtl/scintilla/sci.h	/^	int search_options()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:int
search_pos	include/mtl/scintilla/sci.h	/^	bool search_pos(unsigned int pos)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:bool
search_pos	include/mtl/scintilla/sci.h	/^	int search_pos()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:int
seek	include/mtl/persist/stream.h	/^        void seek(size_t pos)$/;"	f	class:mtl::stream	typeref:typename:void
seek	include/mtl/persist/stream.h	/^        void seek(size_t pos)$/;"	f	class:mtl::stream_view	typeref:typename:void
select	include/mtl/win/ctrl.h	/^        LRESULT select(const std::wstring& id)$/;"	f	class:mtl::tab_ctrl	typeref:typename:LRESULT
select	include/mtl/win/ctrl.h	/^        LRESULT select(int i)$/;"	f	class:mtl::tab_ctrl	typeref:typename:LRESULT
select	include/mtl/win/ctrl.h	/^        combo_box& select(int idx)$/;"	f	class:mtl::combo_box	typeref:typename:combo_box &
select	include/mtl/win/ctrl.h	/^        combo_box_ex& select(int idx)$/;"	f	class:mtl::combo_box_ex	typeref:typename:combo_box_ex &
select	include/mtl/win/gdi.h	/^        HGDIOBJ select(HGDIOBJ obj)$/;"	f	class:mtl::dc	typeref:typename:HGDIOBJ
selected	include/mtl/ole/shell.h	/^			std::vector<std::wstring> selected()$/;"	f	class:mtl::shell::folder_view	typeref:typename:std::vector<std::wstring>
selected	include/mtl/win/ctrl.h	/^        LRESULT selected()$/;"	f	class:mtl::combo_box	typeref:typename:LRESULT
selected	include/mtl/win/ctrl.h	/^        LRESULT selected()$/;"	f	class:mtl::combo_box_ex	typeref:typename:LRESULT
selected	include/mtl/win/ctrl.h	/^        int selected()$/;"	f	class:mtl::tab_ctrl	typeref:typename:int
selectedBkgBrush_	include/mtl/win/wnd.h	/^        HBRUSH selectedBkgBrush_;$/;"	m	class:mtl::color_theme	typeref:typename:HBRUSH
selectedBkgColor_	include/mtl/win/wnd.h	/^        COLORREF						selectedBkgColor_ = RGB(0xEA, 0xEA, 0xEA);$/;"	m	class:mtl::color_theme	typeref:typename:COLORREF
selectedTextBrush_	include/mtl/win/wnd.h	/^        HBRUSH selectedTextBrush_;$/;"	m	class:mtl::color_theme	typeref:typename:HBRUSH
selectedTextColor_	include/mtl/win/wnd.h	/^        COLORREF						selectedTextColor_ = RGB(0xEA, 0xEA, 0xEA);$/;"	m	class:mtl::color_theme	typeref:typename:COLORREF
selected_bkg_brush	include/mtl/win/wnd.h	/^        HBRUSH selected_bkg_brush() { return selectedBkgBrush_; }$/;"	f	class:mtl::color_theme	typeref:typename:HBRUSH
selected_bkg_color	include/mtl/win/wnd.h	/^        COLORREF selected_bkg_color() { return selectedBkgColor_; }$/;"	f	class:mtl::color_theme	typeref:typename:COLORREF
selected_bkg_color	include/mtl/win/wnd.h	/^        color_theme& selected_bkg_color(COLORREF c)$/;"	f	class:mtl::color_theme	typeref:typename:color_theme &
selected_text_brush	include/mtl/win/wnd.h	/^        HBRUSH selected_text_brush() { return selectedTextBrush_; }$/;"	f	class:mtl::color_theme	typeref:typename:HBRUSH
selected_text_color	include/mtl/win/wnd.h	/^        COLORREF selected_text_color() { return selectedTextColor_; }$/;"	f	class:mtl::color_theme	typeref:typename:COLORREF
selected_text_color	include/mtl/win/wnd.h	/^        color_theme& selected_text_color(COLORREF c)$/;"	f	class:mtl::color_theme	typeref:typename:color_theme &
sendOnDataChange	include/mtl/ole/control.h	/^		virtual void sendOnDataChange()$/;"	f	class:mtl::control	typeref:typename:void
send_dlg_item_msg	include/mtl/win/dlg.h	/^        LRESULT send_dlg_item_msg(int id, UINT msg, WPARAM wParam, LPARAM lParam)$/;"	f	class:mtl::dialog	typeref:typename:LRESULT
send_msg	include/mtl/win/wnd.h	/^        LRESULT send_msg(UINT msg, WPARAM wParam = 0, LPARAM lParam = 0)$/;"	f	class:mtl::wnd	typeref:typename:LRESULT
serializable	include/mtl/persist/persist.h	/^    class serializable {};$/;"	c	namespace:mtl
service_name	include/mtl/util/path.h	/^	std::wstring service_name() const$/;"	f	class:mtl::path	typeref:typename:std::wstring
set	include/mtl/win/clipboard.h	/^		static void set(HWND hWnd, UINT format, HANDLE data)$/;"	f	class:mtl::clipboard	typeref:typename:void
setBarColors	include/mtl/win/ctrl.h	/^        void setBarColors(int index, COLORREF clrBkg, COLORREF clrFore)$/;"	f	class:mtl::rebar	typeref:typename:void
setColors	include/mtl/win/ctrl.h	/^        void setColors(COLORREF clrBkg, COLORREF clrFore)$/;"	f	class:mtl::rebar	typeref:typename:void
setDirty	include/mtl/persist/persist.h	/^        void setDirty(bool b)$/;"	f	class:mtl::persistent	typeref:typename:void
setIID	include/mtl/disp/sf_array.h	/^			HRESULT setIID(REFGUID guid)$/;"	f	class:mtl::details::safearray_base	typeref:typename:HRESULT
setRects	include/mtl/ole/control.h	/^		void setRects(const RECT& pos, const RECT& clip)$/;"	f	class:mtl::control	typeref:typename:void
setShadowColors	include/mtl/win/ctrl.h	/^        void setShadowColors(COLORREF shadow, COLORREF highlite)$/;"	f	class:mtl::rebar	typeref:typename:void
setText	include/mtl/win/clipboard.h	/^		static void setText(HWND hWnd, const std::string& txt)$/;"	f	class:mtl::clipboard	typeref:typename:void
setText	include/mtl/win/clipboard.h	/^		static void setText(HWND hWnd, const std::wstring& txt)$/;"	f	class:mtl::clipboard	typeref:typename:void
set_annotation	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_annotation(int i, const std::wstring& str)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_annotation_style	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_annotation_style(int i, int style)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_attribute	include/mtl/persist/xml.h	/^		inline void set_attribute(const meta::EntityName& n, const std::string& from, ElementPtr to)$/;"	f	namespace:mtl::impl	typeref:typename:void
set_backspace_unindents	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_backspace_unindents(bool b)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_bitmap	include/mtl/win/ctrl.h	/^        void set_bitmap(HBITMAP bmp)$/;"	f	class:mtl::button	typeref:typename:void
set_bk_color	include/mtl/win/gdi.h	/^        COLORREF set_bk_color(COLORREF crColor)      { return ::SetBkColor(hdc_, crColor); }$/;"	f	class:mtl::dc	typeref:typename:COLORREF
set_bk_mode	include/mtl/win/gdi.h	/^        int set_bk_mode(int i)                       { return ::SetBkMode(hdc_, i); }$/;"	f	class:mtl::dc	typeref:typename:int
set_caret_forecol	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_caret_forecol(int col)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_caret_width	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_caret_width(int w)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_child	include/mtl/win/ctrl.h	/^        HWND set_child(HWND newChild)$/;"	f	class:mtl::tab_ctrl	typeref:typename:HWND
set_code_page	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_code_page(int cp)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_color_theme	include/mtl/win/wnd.h	/^        void set_color_theme(std::shared_ptr<color_theme>& ct)$/;"	f	class:mtl::wnd	typeref:typename:void
set_dlg_button_icon	include/mtl/win/dlg.h	/^        LRESULT set_dlg_button_icon(int id, HICON hicon)$/;"	f	class:mtl::dialog	typeref:typename:LRESULT
set_dlg_button_img	include/mtl/win/dlg.h	/^        LRESULT set_dlg_button_img(int id, HBITMAP bmp)$/;"	f	class:mtl::dialog	typeref:typename:LRESULT
set_dlg_item_checked	include/mtl/win/dlg.h	/^        void  set_dlg_item_checked(int id, int state = BST_CHECKED)$/;"	f	class:mtl::dialog	typeref:typename:void
set_dlg_item_font	include/mtl/win/dlg.h	/^        LRESULT set_dlg_item_font(int id, HFONT hfont)$/;"	f	class:mtl::dialog	typeref:typename:LRESULT
set_dlg_item_index	include/mtl/win/dlg.h	/^        void set_dlg_item_index(int id, int index)$/;"	f	class:mtl::dialog	typeref:typename:void
set_dlg_item_int	include/mtl/win/dlg.h	/^        LRESULT set_dlg_item_int(int id, int value)$/;"	f	class:mtl::dialog	typeref:typename:LRESULT
set_dlg_item_multi_select_index	include/mtl/win/dlg.h	/^        void set_dlg_item_multi_select_index(int id, const std::vector<int>& v)$/;"	f	class:mtl::dialog	typeref:typename:void
set_dlg_item_multi_select_index	include/mtl/win/dlg.h	/^        void set_dlg_item_multi_select_index(int id, const std::vector<std::wstring>& v)$/;"	f	class:mtl::dialog	typeref:typename:void
set_dlg_item_text	include/mtl/win/dlg.h	/^        LRESULT set_dlg_item_text(int id, const std::wstring& s)$/;"	f	class:mtl::dialog	typeref:typename:LRESULT
set_dlg_static_icon	include/mtl/win/dlg.h	/^        LRESULT set_dlg_static_icon(int id, HICON hicon)$/;"	f	class:mtl::dialog	typeref:typename:LRESULT
set_document	include/mtl/scintilla/sci.h	/^	void set_document(SCIDOC* doc)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:void
set_drop_files	include/mtl/ole/dataobj.h	/^		HRESULT set_drop_files(const std::vector<std::wstring> v)$/;"	f	class:mtl::data_transfer_object	typeref:typename:HRESULT
set_drop_target	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_drop_target(IDropTarget* dropTarget)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_eol_mode	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_eol_mode(int mode)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_filter	include/mtl/win/codlg.h	/^        void set_filter(const wchar_t* filter)$/;"	f	class:mtl::open_dlg	typeref:typename:void
set_font	include/mtl/win/wnd.h	/^        virtual wnd& set_font(HFONT font, bool repaint = false)$/;"	f	class:mtl::wnd	typeref:typename:wnd &
set_h_scroll	include/mtl/win/wnd.h	/^        void set_h_scroll(int colWidth, unsigned int nCols)$/;"	f	class:mtl::scroll_wnd	typeref:typename:void
set_host	include/mtl/script/script.h	/^		virtual HRESULT set_host(IActiveScriptSite* host)$/;"	f	class:mtl::active_script	typeref:typename:HRESULT
set_icon	include/mtl/win/wnd.h	/^        HICON set_icon(HICON icon, int type = 0)$/;"	f	class:mtl::wnd	typeref:typename:HICON
set_indent	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_indent(int w)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_keywords	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_keywords(int keySet, const std::string& keyList)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_lexer	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_lexer(int lex)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_line_indent	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_line_indent(int l, int w)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_margin_style	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_margin_style(int margin)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_margin_type	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_margin_type(int margin, int type)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_margin_width	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_margin_width(int margin, int w)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_marker	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_marker(int line, int num = 2)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_menu	include/mtl/win/wc.h	/^        void set_menu(int id)$/;"	f	class:mtl::window_class	typeref:typename:void
set_menu	include/mtl/win/wnd.h	/^        virtual wnd& set_menu(HMENU menu) $/;"	f	class:mtl::wnd	typeref:typename:wnd &
set_mode	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_mode(int lex)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_next_search_pos_	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_next_search_pos_(int i)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_overtype	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_overtype(bool b)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_read_only	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_read_only(bool b)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_root	include/mtl/ole/explorer.h	/^		virtual void set_root()$/;"	f	class:mtl::explorer_tree	typeref:typename:void
set_root	include/mtl/ole/explorer.h	/^		virtual void set_root(const std::wstring& path)$/;"	f	class:mtl::explorer_tree	typeref:typename:void
set_save_point	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_save_point()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_scroll_pos	include/mtl/win/wnd.h	/^        void set_scroll_pos(unsigned int p, int sb = SB_VERT)$/;"	f	class:mtl::scroll_wnd	typeref:typename:void
set_scroll_width	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_scroll_width(int w)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_selection	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_selection(int anchorPos, int currentPos)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_selection_end	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_selection_end(int pos)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_selection_start	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_selection_start(int pos)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_state	include/mtl/script/script.h	/^		virtual HRESULT set_state(SCRIPTSTATE state)$/;"	f	class:mtl::active_script	typeref:typename:HRESULT
set_status	include/mtl/win/ctrl.h	/^        void set_status(std::vector<std::wstring> parts)$/;"	f	class:mtl::status_bar	typeref:typename:void
set_status_txt	include/mtl/win/ctrl.h	/^        void set_status_txt( RECT& r)$/;"	f	class:mtl::status_bar	typeref:typename:void
set_style	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_style(int style, COLORREF fore, COLORREF back = 0, int size = 0, const char*/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_tab_indents	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_tab_indents(bool b)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_tab_width	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_tab_width(int w)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_text	include/mtl/persist/xml.h	/^		inline void set_text( punk<IXMLDOMElement> el, std::string val)$/;"	f	namespace:mtl::impl	typeref:typename:void
set_text	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_text(const std::string& txt)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_text	include/mtl/win/wnd.h	/^        wnd& set_text(const std::wstring& title)$/;"	f	class:mtl::wnd	typeref:typename:wnd &
set_text_color	include/mtl/win/gdi.h	/^        COLORREF set_text_color(COLORREF crColor)    { return ::SetTextColor(hdc_, crColor); }$/;"	f	class:mtl::dc	typeref:typename:COLORREF
set_use_popup	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_use_popup(bool b)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_use_tabs	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_use_tabs(bool b)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_v_scroll	include/mtl/win/wnd.h	/^        void set_v_scroll(int rowHeight, unsigned int nRows)$/;"	f	class:mtl::scroll_wnd	typeref:typename:void
set_view_eol	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_view_eol(bool b)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
set_window	include/mtl/script/script.h	/^		void set_window(HWND wnd)$/;"	f	class:mtl::active_script	typeref:typename:void
set_window_ext	include/mtl/win/gdi.h	/^        void set_window_ext(int x = 0, int y = 0) { ::SetWindowExtEx(hdc_, x, y, NULL); }$/;"	f	class:mtl::dc	typeref:typename:void
set_window_org	include/mtl/win/gdi.h	/^        void set_window_org(int x = 0, int y = 0) { ::SetWindowOrgEx(hdc_, x, y, NULL); }$/;"	f	class:mtl::dc	typeref:typename:void
set_zoom	include/mtl/scintilla/sci.h	/^	scintilla_wnd& set_zoom(int zoom)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
sfArray_	include/mtl/disp/sf_array.h	/^			SAFEARRAY* sfArray_;$/;"	m	class:mtl::details::safearray_base	typeref:typename:SAFEARRAY *
sf_array	include/mtl/disp/sf_array.h	/^		explicit sf_array(SAFEARRAY* sf)$/;"	f	class:mtl::sf_array
sf_array	include/mtl/disp/sf_array.h	/^		explicit sf_array(SAFEARRAY*&& sf)$/;"	f	class:mtl::sf_array
sf_array	include/mtl/disp/sf_array.h	/^		explicit sf_array(const std::vector<std::wstring>& v)$/;"	f	class:mtl::sf_array
sf_array	include/mtl/disp/sf_array.h	/^		sf_array()$/;"	f	class:mtl::sf_array
sf_array	include/mtl/disp/sf_array.h	/^		sf_array(const SAFEARRAYBOUND& sfb)$/;"	f	class:mtl::sf_array
sf_array	include/mtl/disp/sf_array.h	/^		sf_array(int size)$/;"	f	class:mtl::sf_array
sf_array	include/mtl/disp/sf_array.h	/^	class sf_array : public details::safearray_base$/;"	c	namespace:mtl
sf_array_init	include/mtl/disp/sf_array.h	/^		inline void sf_array_init<VT_BSTR>(details::safearray_base& sf, const std::vector<std::wstring/;"	f	namespace:mtl::details	typeref:typename:void
sf_array_init	include/mtl/disp/sf_array.h	/^		inline void sf_array_init<VT_VARIANT>(details::safearray_base& sf, const std::vector<std::wstr/;"	f	namespace:mtl::details	typeref:typename:void
sf_array_view	include/mtl/disp/sf_array.h	/^		sf_array_view(SAFEARRAY* s)$/;"	f	class:mtl::sf_array_view
sf_array_view	include/mtl/disp/sf_array.h	/^	class sf_array_view$/;"	c	namespace:mtl
sf_dim	include/mtl/disp/sf_array.h	/^		sf_dim(long SZ, long LB = 0)$/;"	f	struct:mtl::sf_dim
sf_dim	include/mtl/disp/sf_array.h	/^	struct sf_dim : public SAFEARRAYBOUND$/;"	s	namespace:mtl
sfb_	include/mtl/disp/sf_array.h	/^		details::safearray_base		sfb_;$/;"	m	class:mtl::sf_array_view	typeref:typename:details::safearray_base
share	include/mtl/win32/io.h	/^        DWORD share() const$/;"	f	class:mtl::file	typeref:typename:DWORD
share_flags	include/mtl/win32/io.h	/^        DWORD share_flags = FILE_SHARE_WRITE | FILE_SHARE_READ | FILE_SHARE_DELETE;$/;"	m	class:mtl::file	typeref:typename:DWORD
shell	include/mtl/ole/dataobj.h	/^	namespace shell{$/;"	n	namespace:mtl
shell	include/mtl/ole/shell.h	/^	namespace shell {$/;"	n	namespace:mtl
shellView_	include/mtl/ole/shell.h	/^			punk<IShellView> shellView_;$/;"	m	class:mtl::shell::folder_view	typeref:typename:punk<IShellView>
shell_folder	include/mtl/ole/shell.h	/^			punk<IShellFolder>   shell_folder;$/;"	m	class:mtl::shell::folder	typeref:typename:punk<IShellFolder>
shell_item	include/mtl/ole/shell.h	/^			shit shell_item()$/;"	f	class:mtl::shell::folder	typeref:typename:shit
shit	include/mtl/ole/shell.h	/^	typedef std::shared_ptr<shell::item> shit;$/;"	t	namespace:mtl	typeref:typename:std::shared_ptr<shell::item>
show	include/mtl/win/ctrl.h	/^        void show(int idx, bool show = true)$/;"	f	class:mtl::rebar	typeref:typename:void
show	include/mtl/win/wnd.h	/^        virtual wnd& show(UINT how = SW_SHOW) $/;"	f	class:mtl::wnd	typeref:typename:wnd &
show_annotations	include/mtl/scintilla/sci.h	/^	scintilla_wnd& show_annotations(int style)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
show_embedded_object	include/mtl/ole/host.h	/^		HRESULT show_embedded_object(REFCLSID clsid, IStorage* store)$/;"	f	class:mtl::ole_host	typeref:typename:HRESULT
show_item	include/mtl/ole/explorer.h	/^		virtual void show_item(const std::wstring& path)$/;"	f	class:mtl::explorer_tree	typeref:typename:void
show_modal	include/mtl/win/dlg.h	/^        LRESULT show_modal(int lpTemplate, HWND hWndParent)$/;"	f	class:mtl::dialog	typeref:typename:LRESULT
show_modeless	include/mtl/win/dlg.h	/^        HWND show_modeless(int lpTemplate, HWND hWndParent)$/;"	f	class:mtl::dialog	typeref:typename:HWND
show_path	include/mtl/ole/shell.h	/^			bool show_path(const std::wstring& path)$/;"	f	class:mtl::shell::folder_view	typeref:typename:bool
signaled	include/mtl/ole/async.h	/^            bool signaled = false;$/;"	m	class:mtl::details::call_object	typeref:typename:bool
simple_callback	include/mtl/edge/chrome.h	/^		class simple_callback : public implements<T(I)>$/;"	c	namespace:mtl::detail
sink	include/mtl/sdk.h	/^    class sink<T(Args...)>$/;"	c	namespace:mtl
sink	include/mtl/sdk.h	/^    class sink<void(Args...)>$/;"	c	namespace:mtl
sinks_	include/mtl/ole/cp.h	/^		std::map<DWORD, punk<IUnknown>> sinks_;$/;"	m	class:mtl::connection_point	typeref:typename:std::map<DWORD,punk<IUnknown>>
site_	include/mtl/ole/control.h	/^		punk<IOleInPlaceSite>			site_;$/;"	m	class:mtl::control	typeref:typename:punk<IOleInPlaceSite>
size	include/mtl/disp/sf_array.h	/^			long size(int index = 0) const$/;"	f	class:mtl::details::safearray_base	typeref:typename:long
size	include/mtl/disp/sf_array.h	/^		long size()$/;"	f	class:mtl::sf_array_view	typeref:typename:long
size	include/mtl/disp/variant.h	/^			static constexpr size_t			 size()$/;"	f	struct:mtl::details::vt_traits	typeref:typename:size_t
size	include/mtl/disp/variant.h	/^			static constexpr size_t      size()$/;"	f	struct:mtl::details::vt_traits	typeref:typename:size_t
size	include/mtl/disp/variant.h	/^			static constexpr size_t     size()$/;"	f	struct:mtl::details::vt_traits	typeref:typename:size_t
size	include/mtl/disp/variant.h	/^			static constexpr size_t    size() { return 0; }$/;"	f	struct:mtl::details::vt_traits	typeref:typename:size_t
size	include/mtl/persist/stream.h	/^        size_t size()$/;"	f	class:mtl::stream	typeref:typename:size_t
size	include/mtl/persist/stream.h	/^        size_t size()$/;"	f	class:mtl::stream_view	typeref:typename:size_t
size	include/mtl/persist/stream.h	/^        void size(size_t s)$/;"	f	class:mtl::stream	typeref:typename:void
size	include/mtl/persist/stream.h	/^        void size(size_t s)$/;"	f	class:mtl::stream_view	typeref:typename:void
size	include/mtl/win/gdi.h	/^        std::wstring size()$/;"	f	class:mtl::font_desc	typeref:typename:std::wstring
size	include/mtl/win32/io.h	/^        unsigned long long size() const$/;"	f	class:mtl::file	typeref:typename:unsigned long long
size	include/mtl/win32/mem.h	/^            size_t size()$/;"	f	class:mtl::global::lock	typeref:typename:size_t
size	include/mtl/win32/mem.h	/^        size_t size() const$/;"	f	class:mtl::co_mem	typeref:typename:size_t
size	include/mtl/win32/mem.h	/^        size_t size() const$/;"	f	class:mtl::co_str	typeref:typename:size_t
size	include/mtl/win32/mem.h	/^        size_t size()$/;"	f	class:mtl::global	typeref:typename:size_t
size	include/mtl/win32/mem.h	/^        unsigned long long size() const$/;"	f	class:mtl::file_info	typeref:typename:unsigned long long
size	include/mtl/win32/mem.h	/^        unsigned long long size()$/;"	f	class:mtl::memory_mapped_file	typeref:typename:unsigned long long
size	include/mtl/win32/uni.h	/^		size_t size() const$/;"	f	class:mtl::buffer	typeref:typename:size_t
size_	include/mtl/win32/mem.h	/^        size_t size_;$/;"	m	class:mtl::co_mem	typeref:typename:size_t
sizel_	include/mtl/ole/control.h	/^		SIZEL							sizel_;$/;"	m	class:mtl::control	typeref:typename:SIZEL
sleep	include/mtl/win32/box.h	/^    inline void sleep(int ms = 20)$/;"	f	namespace:mtl	typeref:typename:void
slurp	include/mtl/win32/io.h	/^    bool slurp($/;"	f	namespace:mtl	typeref:typename:bool
slurp	include/mtl/win32/io.h	/^    std::string slurp($/;"	f	namespace:mtl	typeref:typename:std::string
sniff	include/mtl/win/enc.h	/^	inline file_encoding sniff(const char* raw_bytes, size_t len)$/;"	f	namespace:mtl	typeref:typename:file_encoding
source_	include/mtl/sdk.h	/^        event<T(Args...)>* source_;$/;"	m	class:mtl::sink	typeref:typename:event<T (Args...)> *
source_	include/mtl/sdk.h	/^        event<void(Args...)>* source_;$/;"	m	class:mtl::sink	typeref:typename:event<void (Args...)> *
spacing	include/mtl/win/ctrl.h	/^        tool_bar& spacing(int w, int h)$/;"	f	class:mtl::tool_bar	typeref:typename:tool_bar &
special_folder	include/mtl/ole/shell.h	/^			shit special_folder(int csidl)$/;"	f	class:mtl::shell::folder	typeref:typename:shit
spit	include/mtl/win32/io.h	/^    bool spit(const std::wstring& file_name, const std::string data)$/;"	f	namespace:mtl	typeref:typename:bool
spit	include/mtl/win32/io.h	/^    bool spit(const std::wstring& file_name, const std::string data, std::function<void(DWORD)> /;"	f	namespace:mtl	typeref:typename:bool
split	include/mtl/util/str.h	/^    inline std::vector<std::string> split(const std::string& s, char delim)$/;"	f	namespace:mtl	typeref:typename:std::vector<std::string>
split	include/mtl/util/str.h	/^    inline std::vector<std::string> split(const std::string& s, char delim, std::vector<std::str/;"	f	namespace:mtl	typeref:typename:std::vector<std::string>
split	include/mtl/util/str.h	/^    inline std::vector<std::string> split(const std::string& s, std::string delim)$/;"	f	namespace:mtl	typeref:typename:std::vector<std::string>
split	include/mtl/util/str.h	/^    inline std::vector<std::wstring> split(const std::wstring& s, std::wstring delim)$/;"	f	namespace:mtl	typeref:typename:std::vector<std::wstring>
split	include/mtl/util/str.h	/^    inline std::vector<std::wstring> split(const std::wstring& s, wchar_t delim)$/;"	f	namespace:mtl	typeref:typename:std::vector<std::wstring>
split	include/mtl/util/str.h	/^    inline std::vector<std::wstring> split(const std::wstring& s, wchar_t delim, std::vector<std/;"	f	namespace:mtl	typeref:typename:std::vector<std::wstring>
splitter	include/mtl/win/layout.h	/^		splitter()$/;"	f	class:mtl::splitter
splitter	include/mtl/win/layout.h	/^	class splitter : public window<splitter>$/;"	c	namespace:mtl
splitter_layout	include/mtl/win/layout.h	/^	class splitter_layout :  public layout$/;"	c	namespace:mtl
splitter_layout	include/mtl/win/layout.h	/^	inline splitter_layout::splitter_layout(HWND w1, HWND w2, HWND w3)$/;"	f	class:mtl::splitter_layout
stack_object	include/mtl/obj/impl.h	/^	class stack_object$/;"	c	namespace:mtl
startFolder_	include/mtl/win/codlg.h	/^        const GUID& startFolder_;$/;"	m	class:mtl::pick_folder	typeref:typename:const GUID &
state	include/mtl/win/ctrl.h	/^        LRESULT state(int cmd)$/;"	f	class:mtl::tool_bar	typeref:typename:LRESULT
state	include/mtl/win/ctrl.h	/^        LRESULT state(int cmd, int state)$/;"	f	class:mtl::tool_bar	typeref:typename:LRESULT
status	include/mtl/win/gdi.h	/^        void status(bool status)$/;"	f	class:mtl::menu_item	typeref:typename:void
statusRect_	include/mtl/win/ctrl.h	/^        RECT statusRect_;$/;"	m	class:mtl::status_bar	typeref:typename:RECT
status_	include/mtl/win/ctrl.h	/^        std::vector<std::wstring> status_;$/;"	m	class:mtl::status_bar	typeref:typename:std::vector<std::wstring>
status_bar	include/mtl/win/ctrl.h	/^    class status_bar : public ctrl<status_bar>$/;"	c	namespace:mtl
stg_medium	include/mtl/persist/stgm.h	/^		stg_medium()$/;"	f	class:mtl::stg_medium
stg_medium	include/mtl/persist/stgm.h	/^		stg_medium(HGLOBAL hglob, IUnknown* pUnk = 0)$/;"	f	class:mtl::stg_medium
stg_medium	include/mtl/persist/stgm.h	/^		stg_medium(STGMEDIUM&& rhs)$/;"	f	class:mtl::stg_medium
stg_medium	include/mtl/persist/stgm.h	/^		stg_medium(const STGMEDIUM& rhs)$/;"	f	class:mtl::stg_medium
stg_medium	include/mtl/persist/stgm.h	/^		stg_medium(const T& t, int opt = GMEM_MOVEABLE | GMEM_NODISCARD, IUnknown* pUnk = 0)$/;"	f	class:mtl::stg_medium
stg_medium	include/mtl/persist/stgm.h	/^		stg_medium(const std::string& s, int opt = GMEM_MOVEABLE | GMEM_NODISCARD, IUnknown* pUnk = 0)$/;"	f	class:mtl::stg_medium
stg_medium	include/mtl/persist/stgm.h	/^		stg_medium(const std::wstring& s, int opt = GMEM_MOVEABLE | GMEM_NODISCARD, IUnknown* pUnk = 0/;"	f	class:mtl::stg_medium
stg_medium	include/mtl/persist/stgm.h	/^		stg_medium(void* v, size_t size, int opt = GMEM_MOVEABLE | GMEM_NODISCARD, IUnknown* pUnk = 0)$/;"	f	class:mtl::stg_medium
stg_medium	include/mtl/persist/stgm.h	/^	class stg_medium : public STGMEDIUM$/;"	c	namespace:mtl
stock_icon	include/mtl/ole/shell.h	/^		inline HICON stock_icon(SHSTOCKICONID id)$/;"	f	namespace:mtl::shell	typeref:typename:HICON
stop	include/mtl/edge/chrome.h	/^		void stop()$/;"	f	class:mtl::html_wnd	typeref:typename:void
stop	include/mtl/win32/box.h	/^        void stop()$/;"	f	class:mtl::thread_box	typeref:typename:void
stop	include/mtl/win32/monitor.h	/^		void stop()$/;"	f	class:mtl::monitor	typeref:typename:void
stop_	include/mtl/win32/box.h	/^        bool   stop_ = false;$/;"	m	class:mtl::thread_box	typeref:typename:bool
stopped	include/mtl/win32/box.h	/^        bool stopped()$/;"	f	class:mtl::thread_box	typeref:typename:bool
storable	include/mtl/persist/persist.h	/^    class storable {};$/;"	c	namespace:mtl
storage	include/mtl/persist/stream.h	/^        storage()$/;"	f	class:mtl::storage
storage	include/mtl/persist/stream.h	/^    class storage$/;"	c	namespace:mtl
storage_	include/mtl/persist/stream.h	/^        IStorage* storage_;$/;"	m	class:mtl::storage_view	typeref:typename:IStorage *
storage_	include/mtl/persist/stream.h	/^        punk<IStorage> storage_;$/;"	m	class:mtl::storage	typeref:typename:punk<IStorage>
storage_view	include/mtl/persist/stream.h	/^        storage_view(IStorage* s)$/;"	f	class:mtl::storage_view
storage_view	include/mtl/persist/stream.h	/^    class storage_view$/;"	c	namespace:mtl
str	include/mtl/disp/bstr.h	/^		std::wstring str() const$/;"	f	class:mtl::bstr	typeref:typename:std::wstring
str	include/mtl/disp/bstr.h	/^		std::wstring str() const$/;"	f	class:mtl::bstr_view	typeref:typename:std::wstring
str	include/mtl/ole/img.h	/^            std::string str; $/;"	m	struct:mtl::ui::item	typeref:typename:std::string
str	include/mtl/util/path.h	/^    std::wstring str() const$/;"	f	class:mtl::path	typeref:typename:std::wstring
str	include/mtl/win32/io.h	/^            std::string str(int size)$/;"	f	class:mtl::detail::ReadOverLap	typeref:typename:std::string
str	include/mtl/win32/mem.h	/^        std::wstring str()$/;"	f	class:mtl::co_str	typeref:typename:std::wstring
str_	include/mtl/disp/bstr.h	/^		BSTR str_;$/;"	m	class:mtl::bstr_view	typeref:typename:BSTR
str_	include/mtl/disp/bstr.h	/^		BSTR& str_;$/;"	m	class:mtl::b_move	typeref:typename:BSTR &
str_	include/mtl/disp/bstr.h	/^		const BSTR& str_;$/;"	m	class:mtl::b_copy	typeref:typename:const BSTR &
str_	include/mtl/disp/bstr.h	/^		const wchar_t* str_ = nullptr;$/;"	m	class:mtl::ole_char	typeref:typename:const wchar_t *
str_	include/mtl/win32/mem.h	/^        wchar_t* str_ = nullptr;$/;"	m	class:mtl::co_str	typeref:typename:wchar_t *
stream	include/mtl/persist/stream.h	/^        stream()$/;"	f	class:mtl::stream
stream	include/mtl/persist/stream.h	/^        stream(const std::string& data)$/;"	f	class:mtl::stream
stream	include/mtl/persist/stream.h	/^        stream(int id, const std::wstring& type)$/;"	f	class:mtl::stream
stream	include/mtl/persist/stream.h	/^        stream(mtl::path path, DWORD mode = STGM_READWRITE )$/;"	f	class:mtl::stream
stream	include/mtl/persist/stream.h	/^    class stream$/;"	c	namespace:mtl
stream_	include/mtl/obj/marshall.h	/^		IStream* stream_ = nullptr;$/;"	m	class:mtl::proxy	typeref:typename:IStream *
stream_	include/mtl/persist/stream.h	/^        IStream* stream_ = nullptr;$/;"	m	class:mtl::stream_view	typeref:typename:IStream *
stream_	include/mtl/persist/stream.h	/^        punk<IStream> stream_;$/;"	m	class:mtl::stream	typeref:typename:punk<IStream>
stream_view	include/mtl/persist/stream.h	/^        stream_view()$/;"	f	class:mtl::stream_view
stream_view	include/mtl/persist/stream.h	/^        stream_view(IStream* s)$/;"	f	class:mtl::stream_view
stream_view	include/mtl/persist/stream.h	/^    class stream_view$/;"	c	namespace:mtl
streamable	include/mtl/persist/persist.h	/^    class streamable {};$/;"	c	namespace:mtl
stretch_blit	include/mtl/win/gdi.h	/^    inline void dc::stretch_blit(HBITMAP bitmap, int x, int y, int w, int h, int flags)$/;"	f	class:mtl::dc	typeref:typename:void
string	include/mtl/ole/dataobj.h	/^		std::string string(CLIPFORMAT cf)$/;"	f	class:mtl::dataobj_view	typeref:typename:std::string
string	include/mtl/ole/dataobj.h	/^		std::string string(format_etc& fe)$/;"	f	class:mtl::dataobj_view	typeref:typename:std::string
string2Xml	include/mtl/persist/xml.h	/^		inline void string2Xml(const meta::EntityName& n, const std::string& from, ElementPtr to)$/;"	f	namespace:mtl::impl	typeref:typename:void
string2id	include/mtl/ole/img.h	/^        std::map<std::wstring, int> string2id;$/;"	m	class:mtl::ui	typeref:typename:std::map<std::wstring,int>
string_to_guid	include/mtl/sdk.h	/^    inline GUID string_to_guid(const std::wstring& str)$/;"	f	namespace:mtl	typeref:typename:GUID
stringify	include/mtl/persist/json.h	/^		inline const std::string stringify(json value)$/;"	f	namespace:mtl::JSON	typeref:typename:const std::string
strip_root	include/mtl/util/path.h	/^	const path strip_root() const$/;"	f	class:mtl::path	typeref:typename:const path
strip_to_root	include/mtl/util/path.h	/^    const path strip_to_root() const$/;"	f	class:mtl::path	typeref:typename:const path
strret_	include/mtl/ole/shell.h	/^			STRRET							strret_;$/;"	m	class:mtl::shell::folder	typeref:typename:STRRET
style	include/mtl/scintilla/sci.h	/^		std::vector<XmlStyle> style;$/;"	m	struct:mtl::XmlStyleSet	typeref:typename:std::vector<XmlStyle>
style	include/mtl/win/gdi.h	/^        std::wstring style()$/;"	f	class:mtl::font_desc	typeref:typename:std::wstring
style	include/mtl/win/layout.h	/^		enum class style {$/;"	g	class:mtl::layout
style	include/mtl/win/layout.h	/^		layout::style style;$/;"	m	struct:mtl::widget	typeref:typename:layout::style
style	include/mtl/win/wnd.h	/^        virtual LONG style() const$/;"	f	class:mtl::wnd	typeref:typename:LONG
styleSet	include/mtl/scintilla/sci.h	/^		std::vector<XmlStyleSet> styleSet;$/;"	m	struct:mtl::XmlStyleSets	typeref:typename:std::vector<XmlStyleSet>
style_set_back	include/mtl/scintilla/sci.h	/^	scintilla_wnd& style_set_back(int style, int col)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
style_set_bold	include/mtl/scintilla/sci.h	/^	scintilla_wnd& style_set_bold(int style, bool bold)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
style_set_eol_filled	include/mtl/scintilla/sci.h	/^	scintilla_wnd& style_set_eol_filled(int style, bool filled)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
style_set_font	include/mtl/scintilla/sci.h	/^	scintilla_wnd& style_set_font(int style, const std::string& font)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
style_set_fore	include/mtl/scintilla/sci.h	/^	scintilla_wnd& style_set_fore(int style, int col)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
style_set_italic	include/mtl/scintilla/sci.h	/^	scintilla_wnd& style_set_italic(int style, bool bold)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
style_set_size	include/mtl/scintilla/sci.h	/^	scintilla_wnd& style_set_size(int style, int size)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
subMenu	include/mtl/win/gdi.h	/^        HMENU subMenu = nullptr;$/;"	m	class:mtl::menu_item	typeref:typename:HMENU
subMenus	include/mtl/win/gdi.h	/^        std::map<int, menu> subMenus;$/;"	m	class:mtl::menu	typeref:typename:std::map<int,menu>
sub_folder	include/mtl/ole/shell.h	/^			shell::folder sub_folder(LPITEMIDLIST pidl)$/;"	f	class:mtl::shell::folder	typeref:typename:shell::folder
sub_menu	include/mtl/win/gdi.h	/^        menu sub_menu(int id)$/;"	f	class:mtl::menu	typeref:typename:menu
subclass	include/mtl/win/ctrl.h	/^        void subclass()$/;"	f	class:mtl::ctrl	typeref:typename:void
subclass	include/mtl/win/ctrl.h	/^        void subclass(HWND hwnd)$/;"	f	class:mtl::ctrl	typeref:typename:void
submenu	include/mtl/win/gdi.h	/^        menu submenu(int pos)$/;"	f	class:mtl::menu	typeref:typename:menu
submit	include/mtl/win32/box.h	/^        void submit( task_t t)$/;"	f	class:mtl::thread_box	typeref:typename:void
submit	include/mtl/win32/box.h	/^        void submit(const task_t& t)$/;"	f	class:mtl::thread_box	typeref:typename:void
support_error_info	include/mtl/disp/disp.h	/^class support_error_info<void(Args...)> : public ISupportErrorInfo$/;"	c	namespace:mtl
supports_error_info	include/mtl/disp/disp.h	/^	HRESULT supports_error_info(REFIID riid)$/;"	f	class:mtl::support_error_info	typeref:typename:HRESULT
sync	include/mtl/ole/async.h	/^            punk<ISynchronize> sync;$/;"	m	class:mtl::details::call_object	typeref:typename:punk<ISynchronize>
sync	include/mtl/win/dlg.h	/^            typename std::enable_if<I == sizeof...(Tp), void>::type sync(std::tuple<Tp...>& t)$/;"	f	class:mtl::details::Bindings	typeref:typename:std::enable_if<I==sizeof...(Tp),void>::type
sync	include/mtl/win/dlg.h	/^            void sync() override$/;"	f	class:mtl::details::Bindings	typeref:typename:void
sync	include/mtl/win/dlg.h	/^            void sync()$/;"	f	class:mtl::details::Binder	typeref:typename:void
syntax	include/mtl/scintilla/sci.h	/^		std::string syntax;$/;"	m	struct:mtl::XmlStyleSet	typeref:typename:std::string
sys_time	include/mtl/win32/mem.h	/^        static std::wstring sys_time(const FILETIME& FileTime)$/;"	f	class:mtl::file_info	typeref:typename:std::wstring
system_default_codepage	include/mtl/win/enc.h	/^	inline const codepage& system_default_codepage()$/;"	f	namespace:mtl	typeref:typename:const codepage &
t_	include/mtl/win32/mem.h	/^            T t_ = nullptr;$/;"	m	class:mtl::global::lock	typeref:typename:T
tab	include/mtl/win/ctrl.h	/^            tab()$/;"	f	class:mtl::tab_ctrl::tab
tab	include/mtl/win/ctrl.h	/^            tab(const std::wstring& t)$/;"	f	class:mtl::tab_ctrl::tab
tab	include/mtl/win/ctrl.h	/^            tab(const std::wstring& t, const std::wstring& tt)$/;"	f	class:mtl::tab_ctrl::tab
tab	include/mtl/win/ctrl.h	/^            tab(const std::wstring& t, const std::wstring& tt, const std::wstring& i, int idx = /;"	f	class:mtl::tab_ctrl::tab
tab	include/mtl/win/ctrl.h	/^        class tab$/;"	c	class:mtl::tab_ctrl
tab_ctrl	include/mtl/win/ctrl.h	/^        tab_ctrl()$/;"	f	class:mtl::tab_ctrl
tab_ctrl	include/mtl/win/ctrl.h	/^    class tab_ctrl : public ctrl<tab_ctrl>$/;"	c	namespace:mtl
tab_rect	include/mtl/win/ctrl.h	/^        RECT tab_rect(int index)$/;"	f	class:mtl::tab_ctrl	typeref:typename:RECT
take_ownership	include/mtl/punk.h	/^        void take_ownership(I* i)$/;"	f	class:mtl::punk	typeref:typename:void
task	include/mtl/win32/box.h	/^    void task( std::function<void()> fun, Args&& ... args)$/;"	f	namespace:mtl	typeref:typename:void
task_t	include/mtl/win32/box.h	/^        using task_t = std::function<void()>;$/;"	t	class:mtl::thread_box
task_t	include/mtl/win32/box.h	/^        using task_t = std::function<void(Args...)>;$/;"	t	class:mtl::thread_box
textBrush_	include/mtl/win/wnd.h	/^        HBRUSH textBrush_;$/;"	m	class:mtl::color_theme	typeref:typename:HBRUSH
textColor_	include/mtl/win/wnd.h	/^        COLORREF						textColor_ = RGB(0x35, 0x39, 0x44);$/;"	m	class:mtl::color_theme	typeref:typename:COLORREF
text_brush	include/mtl/win/wnd.h	/^        HBRUSH text_brush() { return textBrush_; }$/;"	f	class:mtl::color_theme	typeref:typename:HBRUSH
text_color	include/mtl/win/wnd.h	/^        COLORREF text_color() { return textColor_; }$/;"	f	class:mtl::color_theme	typeref:typename:COLORREF
text_color	include/mtl/win/wnd.h	/^        color_theme& text_color(COLORREF c)$/;"	f	class:mtl::color_theme	typeref:typename:color_theme &
text_extent	include/mtl/win/gdi.h	/^        SIZE text_extent( const std::wstring& str )$/;"	f	class:mtl::dc	typeref:typename:SIZE
text_out	include/mtl/win/gdi.h	/^        BOOL text_out(int x, int y, std::wstring t)  { return ::TextOut(hdc_, x, y, t.c_str(), (/;"	f	class:mtl::dc	typeref:typename:BOOL
text_width	include/mtl/win/gdi.h	/^        int text_width(const std::wstring& str)$/;"	f	class:mtl::dc	typeref:typename:int
the_bitmap_cache	include/mtl/ole/img.h	/^    inline bitmap_cache& the_bitmap_cache()$/;"	f	namespace:mtl	typeref:typename:bitmap_cache &
the_codepages	include/mtl/win/enc.h	/^		inline codepages& the_codepages()$/;"	f	namespace:mtl::details	typeref:typename:codepages &
the_codepages_enumeration	include/mtl/win/enc.h	/^		inline codepages_enumeration& the_codepages_enumeration()$/;"	f	namespace:mtl::details	typeref:typename:codepages_enumeration &
the_com_module	include/mtl/win32/module.h	/^	inline com_module& the_com_module()$/;"	f	namespace:mtl	typeref:typename:com_module &
theme	include/mtl/ole/img.h	/^        std::shared_ptr<color_theme> theme;$/;"	m	class:mtl::menu_builder	typeref:typename:std::shared_ptr<color_theme>
theme	include/mtl/win/gdi.h	/^        std::shared_ptr<color_theme> theme()$/;"	f	class:mtl::menu	typeref:typename:std::shared_ptr<color_theme>
theme	include/mtl/win/gdi.h	/^        std::shared_ptr<color_theme> theme;$/;"	m	class:mtl::menu_item	typeref:typename:std::shared_ptr<color_theme>
then	include/mtl/ole/async.h	/^            void then(F f)$/;"	f	class:mtl::details::async_com_holder	typeref:typename:void
then	include/mtl/ole/async.h	/^            void then(std::function<void(I*)> cb)$/;"	f	class:mtl::details::call_object	typeref:typename:void
then	include/mtl/sdk.h	/^        sink<T(Args...)>& then(std::function<void(Args...)> cb)$/;"	f	class:mtl::sink	typeref:typename:sink<T (Args...)> &
then	include/mtl/sdk.h	/^        sink<void(Args...)>& then(std::function<void(Args...)> cb)$/;"	f	class:mtl::sink	typeref:typename:sink<void (Args...)> &
thread_box	include/mtl/win32/box.h	/^        thread_box()$/;"	f	class:mtl::thread_box
thread_box	include/mtl/win32/box.h	/^    class thread_box<void()>$/;"	c	namespace:mtl
thread_box	include/mtl/win32/box.h	/^    class thread_box<void(Args...)>$/;"	c	namespace:mtl
tile_horizontal	include/mtl/win/mdi.h	/^        void tile_horizontal()$/;"	f	class:mtl::mdi_frame	typeref:typename:void
tile_vertical	include/mtl/win/mdi.h	/^        void tile_vertical()$/;"	f	class:mtl::mdi_frame	typeref:typename:void
time_t_to_file_time	include/mtl/win32/io.h	/^    inline void time_t_to_file_time(time_t t, FILETIME& ft)$/;"	f	namespace:mtl	typeref:typename:void
timeout	include/mtl/win/wnd.h	/^        UINT_PTR timeout(int milisecs, std::function<void()> cb)$/;"	f	class:mtl::timer	typeref:typename:UINT_PTR
timer	include/mtl/win/wnd.h	/^        timer()$/;"	f	class:mtl::timer
timer	include/mtl/win/wnd.h	/^        timer(int milisecs, std::function<void()> cb)$/;"	f	class:mtl::timer
timer	include/mtl/win/wnd.h	/^        timer(timer&& rhs) noexcept$/;"	f	class:mtl::timer
timer	include/mtl/win/wnd.h	/^    class timer$/;"	c	namespace:mtl
timerProc	include/mtl/win/wnd.h	/^        static void timerProc($/;"	f	class:mtl::timer	typeref:typename:void
timer_	include/mtl/win/ctrl.h	/^        timer                       timer_;$/;"	m	class:mtl::tab_ctrl	typeref:typename:timer
timers	include/mtl/win/wnd.h	/^        static std::map<UINT_PTR, std::function<void()>>& timers()$/;"	f	class:mtl::timer	typeref:typename:std::map<UINT_PTR,std::function<void ()>> &
title	include/mtl/win/ctrl.h	/^            std::wstring title;$/;"	m	class:mtl::tab_ctrl::tab	typeref:typename:std::wstring
toJson	include/mtl/persist/json.h	/^		inline void toJson(const char* name, const json& from, json& to)$/;"	f	namespace:meta::impl	typeref:typename:void
toJson	include/mtl/persist/json.h	/^		inline void toJson(const char* name, const long long int& from, json& to)$/;"	f	namespace:meta::impl	typeref:typename:void
toJson	include/mtl/persist/json.h	/^		inline void toJson(const char* name, const std::string& from, json& to)$/;"	f	namespace:meta::impl	typeref:typename:void
toJson	include/mtl/persist/json.h	/^		inline void toJson(const char* name, json& from, json& to)$/;"	f	namespace:meta::impl	typeref:typename:void
toJson	include/mtl/persist/json.h	/^		inline void toJson(const char* name, std::string& from, json& to)$/;"	f	namespace:meta::impl	typeref:typename:void
toJson	include/mtl/persist/json.h	/^		void toJson(const char* n, T& from, json& to, typename std::enable_if<std::is_class<T>::value>/;"	f	namespace:meta::impl	typeref:typename:void
toJson	include/mtl/persist/json.h	/^		void toJson(const char* n, const T& from, json& to, typename std::enable_if<std::is_class<T>::/;"	f	namespace:meta::impl	typeref:typename:void
toJson	include/mtl/persist/json.h	/^		void toJson(const char* name, const T& from, json& to, typename std::enable_if<std::is_arithme/;"	f	namespace:meta::impl	typeref:typename:void
toJson	include/mtl/persist/json.h	/^		void toJson(const char* name, const std::vector<T>& from, json& to)$/;"	f	namespace:meta::impl	typeref:typename:void
toJson	include/mtl/persist/json.h	/^		void toJson(const char* name, std::vector<T>& from, json& to)$/;"	f	namespace:meta::impl	typeref:typename:void
toJson	include/mtl/persist/json.h	/^	inline json toJson(const json& t)$/;"	f	namespace:meta	typeref:typename:json
toJson	include/mtl/persist/json.h	/^	inline json toJson(json& t)$/;"	f	namespace:meta	typeref:typename:json
toJson	include/mtl/persist/json.h	/^	json toJson(T& t)$/;"	f	namespace:meta	typeref:typename:json
toJson	include/mtl/persist/json.h	/^	json toJson(const T& t)$/;"	f	namespace:meta	typeref:typename:json
toJson	include/mtl/persist/json.h	/^	json toJson(const std::vector<T>& t)$/;"	f	namespace:meta	typeref:typename:json
toJson	include/mtl/persist/json.h	/^	json toJson(std::vector<T>& t)$/;"	f	namespace:meta	typeref:typename:json
toString	include/mtl/win32/uni.h	/^		std::basic_string<T> toString(size_t len = std::basic_string<T>::npos) const$/;"	f	class:mtl::buffer	typeref:typename:std::basic_string<T>
toXml	include/mtl/persist/expat.h	/^        inline void toXml(const meta::EntityName& n, ::mtl::bstr from, patex::xml::ElementPtr to/;"	f	namespace:meta::impl	typeref:typename:void
toXml	include/mtl/persist/expat.h	/^        inline void toXml(const meta::EntityName& n, ::mtl::punk<IDispatch> from, patex::xml::El/;"	f	namespace:meta::impl	typeref:typename:void
toXml	include/mtl/persist/expat.h	/^        inline void toXml(const meta::EntityName& n, ::mtl::punk<IUnknown> from, patex::xml::Ele/;"	f	namespace:meta::impl	typeref:typename:void
toXml	include/mtl/persist/expat.h	/^        inline void toXml(const meta::EntityName& n, ::mtl::variant from, patex::xml::ElementPtr/;"	f	namespace:meta::impl	typeref:typename:void
toXml	include/mtl/persist/xml.h	/^		inline void toXml(const meta::EntityName& n, bstr from, ElementPtr to)$/;"	f	namespace:mtl::impl	typeref:typename:void
toXml	include/mtl/persist/xml.h	/^		inline void toXml(const meta::EntityName& n, const std::string& from, ElementPtr to)$/;"	f	namespace:mtl::impl	typeref:typename:void
toXml	include/mtl/persist/xml.h	/^		inline void toXml(const meta::EntityName& n, std::string& from, ElementPtr to)$/;"	f	namespace:mtl::impl	typeref:typename:void
toXml	include/mtl/persist/xml.h	/^		inline void toXml(const meta::EntityName& n, variant from, ElementPtr to)$/;"	f	namespace:mtl::impl	typeref:typename:void
toXml	include/mtl/persist/xml.h	/^		void toXml(const meta::EntityName& n, T& from, ElementPtr to, typename std::enable_if<std::is_/;"	f	namespace:mtl::impl	typeref:typename:void
toXml	include/mtl/persist/xml.h	/^		void toXml(const meta::EntityName& n, const T& from, ElementPtr to, typename std::enable_if<st/;"	f	namespace:mtl::impl	typeref:typename:void
toXml	include/mtl/persist/xml.h	/^		void toXml(const meta::EntityName& n, const std::vector<T>& from, ElementPtr to)$/;"	f	namespace:mtl::impl	typeref:typename:void
toXml	include/mtl/persist/xml.h	/^		void toXml(const meta::EntityName& n, punk<T> from, ElementPtr to)$/;"	f	namespace:mtl::impl	typeref:typename:void
toXml	include/mtl/persist/xml.h	/^		void toXml(const meta::EntityName& n, std::vector<T>& from, ElementPtr to)$/;"	f	namespace:mtl::impl	typeref:typename:void
toXml	include/mtl/persist/xml.h	/^	punk<IXMLDOMDocument> toXml(T& t)$/;"	f	namespace:mtl	typeref:typename:punk<IXMLDOMDocument>
toXml	include/mtl/persist/xml.h	/^	punk<IXMLDOMDocument> toXml(const T& t)$/;"	f	namespace:mtl	typeref:typename:punk<IXMLDOMDocument>
toXml	include/mtl/persist/xml.h	/^	void toXml(T& from, ElementPtr to, typename std::enable_if<std::is_class<T>::value>::type*)$/;"	f	namespace:mtl	typeref:typename:void
toXml	include/mtl/persist/xml.h	/^	void toXml(const T& from, ElementPtr to, typename std::enable_if<std::is_class<T>::value>::type/;"	f	namespace:mtl	typeref:typename:void
toXml	include/mtl/persist/xml.h	/^	void toXml(const std::vector<T>& from, ElementPtr to)$/;"	f	namespace:mtl	typeref:typename:void
toXml	include/mtl/persist/xml.h	/^	void toXml(std::vector<T>& from, ElementPtr to)$/;"	f	namespace:mtl	typeref:typename:void
to_string	include/mtl/disp/bstr.h	/^		std::string to_string(int cp = CP_UTF8) const$/;"	f	class:mtl::bstr	typeref:typename:std::string
to_string	include/mtl/disp/variant.h	/^		std::string to_string(int cp = CP_UTF8) const$/;"	f	class:mtl::variant	typeref:typename:std::string
to_string	include/mtl/disp/variant.h	/^	inline std::string variant_view::to_string(int cp) const$/;"	f	class:mtl::variant_view	typeref:typename:std::string
to_string	include/mtl/win32/mem.h	/^        std::string to_string()$/;"	f	class:mtl::global	typeref:typename:std::string
to_string	include/mtl/win32/uni.h	/^	inline std::string to_string(const std::wstring& in, long cp = CP_UTF8)$/;"	f	namespace:mtl	typeref:typename:std::string
to_string	include/mtl/win32/uni.h	/^	inline std::string to_string(const wchar_t* str, int nchars = -1, long cp = CP_UTF8)$/;"	f	namespace:mtl	typeref:typename:std::string
to_wstring	include/mtl/disp/variant.h	/^		std::wstring to_wstring() const$/;"	f	class:mtl::variant	typeref:typename:std::wstring
to_wstring	include/mtl/disp/variant.h	/^	inline std::wstring variant_view::to_wstring() const$/;"	f	class:mtl::variant_view	typeref:typename:std::wstring
to_wstring	include/mtl/win32/mem.h	/^        std::wstring to_wstring()$/;"	f	class:mtl::global	typeref:typename:std::wstring
to_wstring	include/mtl/win32/uni.h	/^	inline std::wstring to_wstring(const char* str, int nchars = -1, long cp = CP_UTF8)$/;"	f	namespace:mtl	typeref:typename:std::wstring
to_wstring	include/mtl/win32/uni.h	/^	inline std::wstring to_wstring(const std::string& in, long cp = CP_UTF8)$/;"	f	namespace:mtl	typeref:typename:std::wstring
toggle_marker	include/mtl/scintilla/sci.h	/^	bool toggle_marker(int line)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:bool
tool_bar	include/mtl/win/ctrl.h	/^    class tool_bar : public ctrl<tool_bar>$/;"	c	namespace:mtl
tool_tip	include/mtl/win/ctrl.h	/^    class tool_tip : public ctrl<tool_tip>$/;"	c	namespace:mtl
tooltip	include/mtl/win/ctrl.h	/^            std::wstring tooltip;$/;"	m	class:mtl::tab_ctrl::tab	typeref:typename:std::wstring
tooltip	include/mtl/win/ctrl.h	/^        tool_tip                                                   tooltip;$/;"	m	class:mtl::tab_ctrl	typeref:typename:tool_tip
track_popup	include/mtl/win/gdi.h	/^        int track_popup(HWND wnd, int flags = TPM_LEFTALIGN | TPM_RETURNCMD)$/;"	f	class:mtl::menu	typeref:typename:int
transparent_blit	include/mtl/win/gdi.h	/^    inline void dc::transparent_blit(HBITMAP bitmap, int x, int y, int w, int h, COLORREF transp/;"	f	class:mtl::dc	typeref:typename:void
tree_	include/mtl/ole/explorer.h	/^		punk<INameSpaceTreeControl>					tree_;$/;"	m	class:mtl::explorer_tree	typeref:typename:punk<INameSpaceTreeControl>
trim	include/mtl/win32/uni.h	/^	inline std::string trim(const std::string& in)$/;"	f	namespace:mtl	typeref:typename:std::string
trim	include/mtl/win32/uni.h	/^	inline std::wstring trim(const std::wstring& in)$/;"	f	namespace:mtl	typeref:typename:std::wstring
type	include/mtl/disp/disp.h	/^		using type = T;$/;"	t	class:mtl::dual	typeref:typename:T
type	include/mtl/disp/variant.h	/^			typedef BSTR      type;$/;"	t	struct:mtl::details::vt_traits	typeref:typename:BSTR
type	include/mtl/disp/variant.h	/^			typedef BYTE      type;$/;"	t	struct:mtl::details::vt_traits	typeref:typename:BYTE
type	include/mtl/disp/variant.h	/^			typedef CHAR      type;$/;"	t	struct:mtl::details::vt_traits	typeref:typename:CHAR
type	include/mtl/disp/variant.h	/^			typedef DOUBLE     type;$/;"	t	struct:mtl::details::vt_traits	typeref:typename:DOUBLE
type	include/mtl/disp/variant.h	/^			typedef FLOAT      type;$/;"	t	struct:mtl::details::vt_traits	typeref:typename:FLOAT
type	include/mtl/disp/variant.h	/^			typedef INT       type;$/;"	t	struct:mtl::details::vt_traits	typeref:typename:INT
type	include/mtl/disp/variant.h	/^			typedef LONG      type;$/;"	t	struct:mtl::details::vt_traits	typeref:typename:LONG
type	include/mtl/disp/variant.h	/^			typedef LONGLONG  type;$/;"	t	struct:mtl::details::vt_traits	typeref:typename:LONGLONG
type	include/mtl/disp/variant.h	/^			typedef SHORT     type;$/;"	t	struct:mtl::details::vt_traits	typeref:typename:SHORT
type	include/mtl/disp/variant.h	/^			typedef UINT      type;$/;"	t	struct:mtl::details::vt_traits	typeref:typename:UINT
type	include/mtl/disp/variant.h	/^			typedef ULONG      type;$/;"	t	struct:mtl::details::vt_traits	typeref:typename:ULONG
type	include/mtl/disp/variant.h	/^			typedef ULONGLONG  type;$/;"	t	struct:mtl::details::vt_traits	typeref:typename:ULONGLONG
type	include/mtl/disp/variant.h	/^			typedef USHORT     type;$/;"	t	struct:mtl::details::vt_traits	typeref:typename:USHORT
type	include/mtl/disp/variant.h	/^			typedef VARIANT_BOOL     type;$/;"	t	struct:mtl::details::vt_traits	typeref:typename:VARIANT_BOOL
type	include/mtl/disp/variant.h	/^			typedef void* type;$/;"	t	struct:mtl::details::vt_traits	typeref:typename:void *
type	include/mtl/edge/chrome.h	/^			using type = decltype(&L::operator());$/;"	t	function:mtl::detail::make_callback
type	include/mtl/win/codlg.h	/^        UINT type()$/;"	f	class:mtl::file_dialog	typeref:typename:UINT
type	include/mtl/win32/mem.h	/^        using type = T;$/;"	t	class:mtl::co_mem	typeref:typename:T
typeInfo_	include/mtl/disp/disp.h	/^		ITypeInfo* typeInfo_ = nullptr;$/;"	m	class:mtl::dispatch	typeref:typename:ITypeInfo *
typeLib_	include/mtl/disp/disp.h	/^		ITypeLib* typeLib_ = nullptr;$/;"	m	class:mtl::dispatch	typeref:typename:ITypeLib *
type_size	include/mtl/win32/mem.h	/^        const size_t type_size = sizeof(T);$/;"	m	class:mtl::co_mem	typeref:typename:const size_t
ubound	include/mtl/disp/sf_array.h	/^			long ubound(int index = 0) const$/;"	f	class:mtl::details::safearray_base	typeref:typename:long
ui	include/mtl/ole/img.h	/^    class ui$/;"	c	namespace:mtl
uiActivate	include/mtl/ole/control.h	/^		virtual HRESULT uiActivate()$/;"	f	class:mtl::control	typeref:typename:HRESULT
uiActive_	include/mtl/ole/control.h	/^		bool							uiActive_ = false;$/;"	m	class:mtl::control	typeref:typename:bool
uiDeactivate	include/mtl/ole/control.h	/^		virtual HRESULT uiDeactivate()$/;"	f	class:mtl::control	typeref:typename:HRESULT
uiWnd_	include/mtl/ole/control.h	/^		punk<IOleInPlaceUIWindow>		uiWnd_;$/;"	m	class:mtl::control	typeref:typename:punk<IOleInPlaceUIWindow>
ui_thread	include/mtl/win32/box.h	/^    inline thread_box<void()>& ui_thread()$/;"	f	namespace:mtl	typeref:typename:thread_box<void ()> &
uid	include/mtl/obj/marshall.h	/^		std::wstring uid;$/;"	m	class:mtl::rotten	typeref:typename:std::wstring
unaccessData	include/mtl/disp/sf_array.h	/^			HRESULT unaccessData()$/;"	f	class:mtl::details::safearray_base	typeref:typename:HRESULT
undo	include/mtl/scintilla/sci.h	/^	scintilla_wnd& undo()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
unix2dos	include/mtl/win/enc.h	/^	inline std::string unix2dos(const std::string& in)$/;"	f	namespace:mtl	typeref:typename:std::string
unknown_collection	include/mtl/obj/collection.h	/^    class unknown_collection : public collection<punk<IUnknown>, T, I, LIBID, MAJOR, MINOR >$/;"	c	namespace:mtl
unks_	include/mtl/obj/enum.h	/^		std::vector<punk<IUnknown>> unks_;$/;"	m	class:mtl::enum_unknown	typeref:typename:std::vector<punk<IUnknown>>
unks_	include/mtl/ole/cp.h	/^		std::vector<punk<IConnectionPoint>> unks_;$/;"	m	class:mtl::enum_connection_point	typeref:typename:std::vector<punk<IConnectionPoint>>
unlock	include/mtl/win32/module.h	/^		virtual long unlock()$/;"	f	class:mtl::com_module	typeref:typename:long
unregister	include/mtl/sdk.h	/^        static void unregister(const std::wstring& id)$/;"	f	class:mtl::event	typeref:typename:void
unwrap	include/mtl/obj/marshall.h	/^	punk<I> proxy<I>::unwrap()$/;"	f	class:mtl::proxy	typeref:typename:punk<I>
unwrap	include/mtl/obj/marshall.h	/^	void proxy<I>::unwrap(I** i)$/;"	f	class:mtl::proxy	typeref:typename:void
unwrap	include/mtl/win/wnd.h	/^    W* unwrap(HWND hWnd)$/;"	f	namespace:mtl	typeref:typename:W *
up_dir	include/mtl/ole/shell.h	/^			void up_dir()$/;"	f	class:mtl::shell::folder_view	typeref:typename:void
update	include/mtl/win/gdi.h	/^        void update()$/;"	f	class:mtl::menu	typeref:typename:void
update	include/mtl/win/gdi.h	/^        void update(menu_item& item)$/;"	f	class:mtl::menu	typeref:typename:void
update	include/mtl/win/wnd.h	/^        virtual wnd& update() $/;"	f	class:mtl::wnd	typeref:typename:wnd &
update	include/mtl/win/wnd.h	/^        void update()$/;"	f	class:mtl::color_theme	typeref:typename:void
use_markers	include/mtl/scintilla/sci.h	/^	scintilla_wnd& use_markers(bool b)$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
userdata	include/mtl/edge/chrome.h	/^		std::wstring userdata;$/;"	m	class:mtl::chrome_edge	typeref:typename:std::wstring
uses	include/mtl/sdk.h	/^		uses(Args&& ... args)$/;"	f	class:mtl::uses
uses	include/mtl/sdk.h	/^	class uses$/;"	c	namespace:mtl
vEmpty	include/mtl/disp/variant.h	/^	class vEmpty : public details::concreteVariant<VT_EMPTY> {};$/;"	c	namespace:mtl
vError	include/mtl/disp/variant.h	/^	class vError : public details::concreteVariant<VT_ERROR> {};$/;"	c	namespace:mtl
vNull	include/mtl/disp/variant.h	/^	class vNull  : public details::concreteVariant<VT_NULL>  {};$/;"	c	namespace:mtl
v_	include/mtl/disp/variant.h	/^		VARIANT& v_;$/;"	m	class:mtl::variant_view	typeref:typename:VARIANT &
val_	include/mtl/win/dlg.h	/^        T val_;$/;"	m	class:mtl::dlg_selection	typeref:typename:T
val_	include/mtl/win/dlg.h	/^        T val_;$/;"	m	class:mtl::dlg_value	typeref:typename:T
value	include/mtl/disp/variant.h	/^			static BSTR value(const VARIANT* v) { return ::SysAllocStringLen( *(v->pbstrVal), ::SysString/;"	f	struct:mtl::details::var_traits	typeref:typename:BSTR
value	include/mtl/disp/variant.h	/^			static BSTR value(const VARIANT* v) { return ::SysAllocStringLen(v->bstrVal, ::SysStringLen(v/;"	f	struct:mtl::details::var_traits	typeref:typename:BSTR
value	include/mtl/disp/variant.h	/^			static BYTE value(const VARIANT* v) { return *(v->pbVal); }$/;"	f	struct:mtl::details::var_traits	typeref:typename:BYTE
value	include/mtl/disp/variant.h	/^			static BYTE value(const VARIANT* v) { return v->bVal; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:BYTE
value	include/mtl/disp/variant.h	/^			static CHAR value(const VARIANT* v) { return *(v->pcVal); }$/;"	f	struct:mtl::details::var_traits	typeref:typename:CHAR
value	include/mtl/disp/variant.h	/^			static CHAR value(const VARIANT* v) { return v->cVal; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:CHAR
value	include/mtl/disp/variant.h	/^			static DOUBLE value(const VARIANT* v) { return *(v->pdblVal); }$/;"	f	struct:mtl::details::var_traits	typeref:typename:DOUBLE
value	include/mtl/disp/variant.h	/^			static DOUBLE value(const VARIANT* v) { return v->dblVal; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:DOUBLE
value	include/mtl/disp/variant.h	/^			static FLOAT value(const VARIANT* v) { return *(v->pfltVal); }$/;"	f	struct:mtl::details::var_traits	typeref:typename:FLOAT
value	include/mtl/disp/variant.h	/^			static FLOAT value(const VARIANT* v) { return v->fltVal; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:FLOAT
value	include/mtl/disp/variant.h	/^			static IDispatch* value(const VARIANT* v) { return *(v->ppdispVal); }$/;"	f	struct:mtl::details::var_traits	typeref:typename:IDispatch *
value	include/mtl/disp/variant.h	/^			static IDispatch* value(const VARIANT* v) { return v->pdispVal; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:IDispatch *
value	include/mtl/disp/variant.h	/^			static INT value(const VARIANT* v)  { return v->lVal; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:INT
value	include/mtl/disp/variant.h	/^			static INT value(const VARIANT* v) { return *(v->plVal); }$/;"	f	struct:mtl::details::var_traits	typeref:typename:INT
value	include/mtl/disp/variant.h	/^			static IUnknown* value(const VARIANT* v)	{ return *(v->ppunkVal); }$/;"	f	struct:mtl::details::var_traits	typeref:typename:IUnknown *
value	include/mtl/disp/variant.h	/^			static IUnknown* value(const VARIANT* v)  { return v->punkVal; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:IUnknown *
value	include/mtl/disp/variant.h	/^			static LONG value(const VARIANT* v) { return *(v->plVal); }$/;"	f	struct:mtl::details::var_traits	typeref:typename:LONG
value	include/mtl/disp/variant.h	/^			static LONG value(const VARIANT* v) { return v->lVal; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:LONG
value	include/mtl/disp/variant.h	/^			static LONGLONG value(const VARIANT* v) { return *(v->pllVal); }$/;"	f	struct:mtl::details::var_traits	typeref:typename:LONGLONG
value	include/mtl/disp/variant.h	/^			static LONGLONG value(const VARIANT* v) { return v->llVal; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:LONGLONG
value	include/mtl/disp/variant.h	/^			static UINT value(const VARIANT* v) { return *(v->pulVal); }$/;"	f	struct:mtl::details::var_traits	typeref:typename:UINT
value	include/mtl/disp/variant.h	/^			static UINT value(const VARIANT* v) { return v->ulVal; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:UINT
value	include/mtl/disp/variant.h	/^			static ULONG value(const VARIANT* v) { return *(v->pulVal); }$/;"	f	struct:mtl::details::var_traits	typeref:typename:ULONG
value	include/mtl/disp/variant.h	/^			static ULONG value(const VARIANT* v) { return v->ulVal; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:ULONG
value	include/mtl/disp/variant.h	/^			static ULONGLONG value(const VARIANT* v)	{ return *(v->pullVal); }$/;"	f	struct:mtl::details::var_traits	typeref:typename:ULONGLONG
value	include/mtl/disp/variant.h	/^			static ULONGLONG value(const VARIANT* v)  { return v->ullVal; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:ULONGLONG
value	include/mtl/disp/variant.h	/^			static USHORT value(const VARIANT* v) { return *(v->puiVal); }$/;"	f	struct:mtl::details::var_traits	typeref:typename:USHORT
value	include/mtl/disp/variant.h	/^			static USHORT value(const VARIANT* v) { return v->uiVal; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:USHORT
value	include/mtl/disp/variant.h	/^			static VARIANT* value(const VARIANT* v)   { return 0; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARIANT *
value	include/mtl/disp/variant.h	/^			static VARIANT_BOOL value(const VARIANT* v)	  { return v->boolVal; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARIANT_BOOL
value	include/mtl/disp/variant.h	/^			static VARIANT_BOOL* value(const VARIANT* v)	{ return v->pboolVal; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARIANT_BOOL *
value	include/mtl/disp/variant.h	/^			static bool value(const VARIANT* v)			{ return v->boolVal == VARIANT_TRUE; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:bool
value	include/mtl/disp/variant.h	/^			static bool value(const VARIANT* v) { return *(v->pboolVal) == VARIANT_TRUE; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:bool
value	include/mtl/disp/variant.h	/^			static bstr value(const VARIANT* v) { return bstr(b_copy(*(v->pbstrVal))); }$/;"	f	struct:mtl::details::var_traits	typeref:typename:bstr
value	include/mtl/disp/variant.h	/^			static bstr value(const VARIANT* v) { return bstr(b_copy(v->bstrVal)); }$/;"	f	struct:mtl::details::var_traits	typeref:typename:bstr
value	include/mtl/disp/variant.h	/^			static std::wstring value(const VARIANT* v) { return std::wstring(*(v->pbstrVal), ::SysString/;"	f	struct:mtl::details::var_traits	typeref:typename:std::wstring
value	include/mtl/disp/variant.h	/^			static std::wstring value(const VARIANT* v) { return std::wstring(v->bstrVal,::SysStringLen(v/;"	f	struct:mtl::details::var_traits	typeref:typename:std::wstring
value	include/mtl/win/dlg.h	/^    T& dlg_selection<I, T>::value()$/;"	f	class:mtl::dlg_selection	typeref:typename:T &
value	include/mtl/win/dlg.h	/^    T& dlg_value<I, T>::value()$/;"	f	class:mtl::dlg_value	typeref:typename:T &
value	include/mtl/win/dlg.h	/^    void dlg_selection<I, T>::value(const T& t)$/;"	f	class:mtl::dlg_selection	typeref:typename:void
value	include/mtl/win/dlg.h	/^    void dlg_value<I, T>::value(const T& t)$/;"	f	class:mtl::dlg_value	typeref:typename:void
value	include/mtl/win32/arg.h	/^        std::wstring value(const std::wstring& key)$/;"	f	class:mtl::options	typeref:typename:std::wstring
valueOf	include/mtl/disp/variant.h	/^	T& variant_view::valueOf() const$/;"	f	class:mtl::variant_view	typeref:typename:T &
value_of	include/mtl/disp/variant.h	/^		T value_of() const$/;"	f	class:mtl::variant	typeref:typename:T
value_t	include/mtl/persist/xml.h	/^				using value_t = std::remove_reference_t<typename std::remove_reference_t<decltype(m)>::sette/;"	t	function:mtl::impl::fromXml::__anona650a5b40502
varResult_	include/mtl/script/script.h	/^		variant								varResult_;$/;"	m	class:mtl::active_script	typeref:typename:variant
var_traits	include/mtl/disp/variant.h	/^		struct var_traits {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<BSTR*> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<BSTR> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<BYTE*> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<BYTE> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<CHAR*> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<CHAR> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<DOUBLE*> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<DOUBLE> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<FLOAT*> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<FLOAT> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<IDispatch**> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<IDispatch*> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<INT*> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<INT> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<IUnknown**> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<IUnknown*> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<LONG*> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<LONG> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<LONGLONG*> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<LONGLONG> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<UINT*> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<UINT> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<ULONG*> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<ULONG> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<ULONGLONG*> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<ULONGLONG> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<USHORT*> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<USHORT> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<VARIANT_BOOL*> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<VARIANT_BOOL> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<b_copy> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<b_move> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<bool*> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<bool> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<bstr*> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<bstr> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<std::wstring*> {$/;"	s	namespace:mtl::details
var_traits	include/mtl/disp/variant.h	/^		struct var_traits<std::wstring> {$/;"	s	namespace:mtl::details
variant	include/mtl/disp/variant.h	/^		explicit variant(BSTR* b)			{ ::VariantInit(this); vt = VT_BYREF | VT_BSTR; pbstrVal = b; }$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(CY cy)				 { ::VariantInit(this); vt = VT_CY;	  cyVal = cy; }$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(CY* cy)			{ ::VariantInit(this); vt = VT_BYREF | VT_CY;	pcyVal = cy; }$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(IDispatch* di)$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(IDispatch** di)$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(IUnknown* iu)$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(IUnknown** iu)$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(SAFEARRAY* sfa)	{ ::VariantInit(this); vt = VT_ARRAY | VT; parray = sfa; }$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(SAFEARRAY** sfa)	{ ::VariantInit(this); vt = VT_ARRAY | VT | VT_BYREF; pparra/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(VARENUM vt)$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(VARIANT&& v2)$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(VARIANT* vr)		{ ::VariantInit(this); vt = VT_BYREF | VT_VARIANT;  pvarVal = v/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(VARIANT*&& v2)$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(VARIANT_BOOL b)	 { ::VariantInit(this); vt = VT_BOOL; boolVal = b; }$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(VARIANT_BOOL* b)	{ ::VariantInit(this); vt = VT_BYREF | VT_BOOL; pboolVal = b/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(b_move&& b)		 { ::VariantInit(this); vt = VT_BSTR; bstrVal = b.data(); b.str_/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(bool b)			 { ::VariantInit(this); vt = VT_BOOL; boolVal = b ? VARIANT_TRUE : /;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(bstr&& b)			 { ::VariantInit(this); vt = VT_BSTR; bstrVal = *b; b.bstr_ = 0; /;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(char c)			{ ::VariantInit(this); vt = VT_I1;					cVal = c; }$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(const VARIANT& v2)$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(const VARIANT* v2)$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(const b_copy& b)	 { ::VariantInit(this); vt = VT_BSTR; bstrVal = ::SysAllocSt/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(const bstr& b)		 { ::VariantInit(this); vt = VT_BSTR; bstrVal = ::SysAllocStr/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(const char c[N], int cp = CP_UTF8)$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(const char* c, int cp = CP_UTF8)$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(const ole_char& str)$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(const wchar_t (&wc)[N])$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(double d)			 { ::VariantInit(this); vt = VT_R8;	  dblVal = d; }$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(double* d)			{ ::VariantInit(this); vt = VT_BYREF | VT_R8;	pdblVal = d; }$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(float f)			 { ::VariantInit(this); vt = VT_R4;	  fltVal = f; }$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(float* f)			{ ::VariantInit(this); vt = VT_BYREF | VT_R4;	pfltVal = f; }$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(int i)				{ ::VariantInit(this); vt = VT_I4;					intVal = i; }$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(int* i)			{ ::VariantInit(this); vt = VT_BYREF | VT_I4;		pintVal = i; }$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(long l)			 { ::VariantInit(this); vt = VT_I4;	  lVal = l; }$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(long* l)			{ ::VariantInit(this); vt = VT_BYREF | VT_I4;	plVal = l; }$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(unsigned int i)	{ ::VariantInit(this); vt = VT_UI4;					uintVal = i; }$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(unsigned int* i)	{ ::VariantInit(this); vt = VT_BYREF | VT_UI4;		puintVal = i/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(unsigned long l)	{ ::VariantInit(this); vt = VT_UI4;					ulVal = l; }$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(unsigned long* l)	{ ::VariantInit(this); vt = VT_BYREF | VT_UI4;		pulVal = l;/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		explicit variant(void* vo)			{ ::VariantInit(this); vt = VT_BYREF;				byref = vo; }$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		variant() { ::VariantInit(this); }$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		variant(const variant& v2)$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^		variant(variant&& v2)$/;"	f	class:mtl::variant
variant	include/mtl/disp/variant.h	/^	class variant : public VARIANT$/;"	c	namespace:mtl
variant_collection	include/mtl/obj/collection.h	/^    class variant_collection : public collection<variant,T,I,LIBID,MAJOR,MINOR>$/;"	c	namespace:mtl
variant_view	include/mtl/disp/variant.h	/^		explicit variant_view(VARIANT& v)$/;"	f	class:mtl::variant_view
variant_view	include/mtl/disp/variant.h	/^		explicit variant_view(VARIANT* v)$/;"	f	class:mtl::variant_view
variant_view	include/mtl/disp/variant.h	/^	class variant_view$/;"	c	namespace:mtl
vars_	include/mtl/obj/enum.h	/^		std::vector<variant> vars_;$/;"	m	class:mtl::enum_variant	typeref:typename:std::vector<variant>
vector_from_data_object	include/mtl/ole/dataobj.h	/^	inline std::vector<std::wstring> vector_from_data_object(IDataObject* ido)$/;"	f	namespace:mtl	typeref:typename:std::vector<std::wstring>
verticalScrollInfo_	include/mtl/win/wnd.h	/^        SCROLLINFO verticalScrollInfo_;$/;"	m	class:mtl::scroll_wnd	typeref:typename:SCROLLINFO
viewMenuIndex_	include/mtl/win/mdi.h	/^        int viewMenuIndex_ = -1;$/;"	m	class:mtl::mdi_child	typeref:typename:int
viewWnd_	include/mtl/ole/shell.h	/^			HWND viewWnd_ = nullptr;$/;"	m	class:mtl::shell::folder_view	typeref:typename:HWND
view_	include/mtl/win32/mem.h	/^        void*               view_;$/;"	m	class:mtl::memory_mapped_file	typeref:typename:void *
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt()					{ return VT_BOOL | VT_BYREF; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt()				  { return VT_BOOL; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt()				{ return VT_BOOL; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt()		      { return VT_EMPTY; };$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt()		{ return VT_BOOL | VT_BYREF; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt()		{ return VT_DISPATCH | VT_BYREF; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt()		{ return VT_DISPATCH; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt()		{ return VT_UI8 | VT_BYREF; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt()		{ return VT_UI8; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt()		{ return VT_UNKNOWN | VT_BYREF; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt()		{ return VT_UNKNOWN; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt()	{ return VT_UI2; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt()     { return VT_I8; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt()   { return VT_R8 | VT_BYREF; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt()   { return VT_R8; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt()  { return VT_R4 | VT_BYREF; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt()  { return VT_R4; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt()  { return VT_UI4 | VT_BYREF; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt()  { return VT_UI4; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt() { return VT_BSTR | VT_BYREF; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt() { return VT_BSTR | VT_BYREF;; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt() { return VT_BSTR; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt() { return VT_I1 | VT_BYREF; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt() { return VT_I1; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt() { return VT_I4 | VT_BYREF; } \/\/ changed from VT_INT$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt() { return VT_I4 | VT_BYREF; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt() { return VT_I4; } \/\/ changed from VT_INT$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt() { return VT_I4; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt() { return VT_I8 | VT_BYREF; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt() { return VT_UI1 | VT_BYREF; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt() { return VT_UI1; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt() { return VT_UI2 | VT_BYREF; }$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt() { return VT_UI4 | VT_BYREF; } \/\/ changed from VT_UINT$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^			static constexpr VARTYPE vt() { return VT_UI4; } \/\/ changed from VT_UINT$/;"	f	struct:mtl::details::var_traits	typeref:typename:VARTYPE
vt	include/mtl/disp/variant.h	/^		VARTYPE vt() const$/;"	f	class:mtl::variant_view	typeref:typename:VARTYPE
vt_traits	include/mtl/disp/variant.h	/^		struct vt_traits$/;"	s	namespace:mtl::details
vt_traits	include/mtl/disp/variant.h	/^		struct vt_traits<VT_BOOL>$/;"	s	namespace:mtl::details
vt_traits	include/mtl/disp/variant.h	/^		struct vt_traits<VT_BSTR>$/;"	s	namespace:mtl::details
vt_traits	include/mtl/disp/variant.h	/^		struct vt_traits<VT_I1>$/;"	s	namespace:mtl::details
vt_traits	include/mtl/disp/variant.h	/^		struct vt_traits<VT_I2>$/;"	s	namespace:mtl::details
vt_traits	include/mtl/disp/variant.h	/^		struct vt_traits<VT_I4>$/;"	s	namespace:mtl::details
vt_traits	include/mtl/disp/variant.h	/^		struct vt_traits<VT_I8>$/;"	s	namespace:mtl::details
vt_traits	include/mtl/disp/variant.h	/^		struct vt_traits<VT_INT>$/;"	s	namespace:mtl::details
vt_traits	include/mtl/disp/variant.h	/^		struct vt_traits<VT_R4>$/;"	s	namespace:mtl::details
vt_traits	include/mtl/disp/variant.h	/^		struct vt_traits<VT_R8>$/;"	s	namespace:mtl::details
vt_traits	include/mtl/disp/variant.h	/^		struct vt_traits<VT_UI1>$/;"	s	namespace:mtl::details
vt_traits	include/mtl/disp/variant.h	/^		struct vt_traits<VT_UI2>$/;"	s	namespace:mtl::details
vt_traits	include/mtl/disp/variant.h	/^		struct vt_traits<VT_UI4>$/;"	s	namespace:mtl::details
vt_traits	include/mtl/disp/variant.h	/^		struct vt_traits<VT_UI8>$/;"	s	namespace:mtl::details
vt_traits	include/mtl/disp/variant.h	/^		struct vt_traits<VT_UINT>$/;"	s	namespace:mtl::details
w	include/mtl/win/ctrl.h	/^        int w = 0;$/;"	m	class:mtl::combo_box_ex	typeref:typename:int
w	include/mtl/win/ctrl.h	/^        int w = 32;$/;"	m	class:mtl::tool_bar	typeref:typename:int
wPadding	include/mtl/win/ctrl.h	/^        int wPadding = 5;$/;"	m	class:mtl::tool_bar	typeref:typename:int
w_	include/mtl/ole/img.h	/^        int w_ = 32;$/;"	m	class:mtl::menu_builder	typeref:typename:int
wait	include/mtl/win32/box.h	/^        bool wait(Args ... args, int ms = INFINITE)$/;"	f	class:mtl::thread_box	typeref:typename:bool
wait	include/mtl/win32/box.h	/^        bool wait(int ms = INFINITE)$/;"	f	class:mtl::thread_box	typeref:typename:bool
wait_handle	include/mtl/win32/box.h	/^        HANDLE wait_handle()$/;"	f	class:mtl::thread_box	typeref:typename:HANDLE
watch	include/mtl/win32/monitor.h	/^		void watch(const std::wstring& p)$/;"	f	class:mtl::monitor	typeref:typename:void
wbuff	include/mtl/win32/uni.h	/^	typedef buffer<wchar_t> wbuff;$/;"	t	namespace:mtl	typeref:typename:buffer<wchar_t>
wc	include/mtl/win/wc.h	/^    window_class<T>& wc()$/;"	f	namespace:mtl	typeref:typename:window_class<T> &
webViewController	include/mtl/edge/chrome.h	/^		punk< ICoreWebView2Controller> webViewController;$/;"	m	class:mtl::html_wnd	typeref:typename:punk<ICoreWebView2Controller>
webview	include/mtl/edge/chrome.h	/^		punk< ICoreWebView2> webview;$/;"	m	class:mtl::html_wnd	typeref:typename:punk<ICoreWebView2>
webview_controller_callback	include/mtl/edge/chrome.h	/^		class webview_controller_callback :$/;"	c	namespace:mtl::detail
weight	include/mtl/win/gdi.h	/^       std::wstring weight()$/;"	f	class:mtl::font_desc	typeref:typename:std::wstring
what	include/mtl/persist/json.h	/^			const char* what() const noexcept$/;"	f	class:mtl::JSON::ParseEx	typeref:typename:const char *
what_	include/mtl/win/codlg.h	/^        wbuff what_;$/;"	m	class:mtl::search_dlg	typeref:typename:wbuff
wheelDelta_	include/mtl/win/wnd.h	/^        short wheelDelta_;$/;"	m	class:mtl::scroll_wnd	typeref:typename:short
when	include/mtl/sdk.h	/^        sink<T(Args...)>& when(T code)$/;"	f	class:mtl::sink	typeref:typename:sink<T (Args...)> &
widget	include/mtl/win/layout.h	/^		widget() {}$/;"	f	struct:mtl::widget
widget	include/mtl/win/layout.h	/^		widget(HWND wnd, layout::style s = mtl::layout::style::NONE)$/;"	f	struct:mtl::widget
widget	include/mtl/win/layout.h	/^		widget(column_layout&& l, ::RECT&& p)$/;"	f	struct:mtl::widget
widget	include/mtl/win/layout.h	/^		widget(const widget& rhs)$/;"	f	struct:mtl::widget
widget	include/mtl/win/layout.h	/^		widget(default_layout&& l, layout::style s)$/;"	f	struct:mtl::widget
widget	include/mtl/win/layout.h	/^		widget(row_layout&& l, ::RECT&& p)$/;"	f	struct:mtl::widget
widget	include/mtl/win/layout.h	/^		widget(splitter_layout&& l, layout::style s = mtl::layout::style::NONE)$/;"	f	struct:mtl::widget
widget	include/mtl/win/layout.h	/^		widget(widget&& rhs)$/;"	f	struct:mtl::widget
widget	include/mtl/win/layout.h	/^	struct widget$/;"	s	namespace:mtl
widgets_	include/mtl/win/layout.h	/^		std::vector<widget> widgets_;$/;"	m	class:mtl::layout	typeref:typename:std::vector<widget>
width	include/mtl/win/ctrl.h	/^        int width = 24;$/;"	m	class:mtl::image_list	typeref:typename:int
width	include/mtl/win/ctrl.h	/^        int width()$/;"	f	class:mtl::tool_bar	typeref:typename:int
width	include/mtl/win/ctrl.h	/^        void width(int w)$/;"	f	class:mtl::combo_box	typeref:typename:void
window	include/mtl/win/wnd.h	/^        window()$/;"	f	class:mtl::window
window	include/mtl/win/wnd.h	/^    class window : public wnd$/;"	c	namespace:mtl
windowMenuIndex_	include/mtl/win/mdi.h	/^        int windowMenuIndex_ = -1;$/;"	m	class:mtl::mdi_frame	typeref:typename:int
windowProc	include/mtl/win/mdi.h	/^        static LRESULT CALLBACK windowProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam/;"	f	class:mtl::mdi_child	typeref:typename:LRESULT CALLBACK
windowProc	include/mtl/win/wc.h	/^        static LRESULT CALLBACK windowProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam/;"	f	class:mtl::window_class	typeref:typename:LRESULT CALLBACK
windowProcedure	include/mtl/win/ctrl.h	/^        static LRESULT CALLBACK windowProcedure(HWND hWnd, UINT message, WPARAM wParam, LPARAM l/;"	f	class:mtl::ctrl	typeref:typename:LRESULT CALLBACK
window_class	include/mtl/scintilla/sci.h	/^class window_class<scintilla_wnd>$/;"	c	namespace:mtl
window_class	include/mtl/win/ctrl.h	/^    class window_class<button>$/;"	c	namespace:mtl
window_class	include/mtl/win/ctrl.h	/^    class window_class<combo_box>$/;"	c	namespace:mtl
window_class	include/mtl/win/ctrl.h	/^    class window_class<combo_box_ex>$/;"	c	namespace:mtl
window_class	include/mtl/win/ctrl.h	/^    class window_class<edit_ctrl>$/;"	c	namespace:mtl
window_class	include/mtl/win/ctrl.h	/^    class window_class<rebar>$/;"	c	namespace:mtl
window_class	include/mtl/win/ctrl.h	/^    class window_class<status_bar>$/;"	c	namespace:mtl
window_class	include/mtl/win/ctrl.h	/^    class window_class<tab_ctrl>$/;"	c	namespace:mtl
window_class	include/mtl/win/ctrl.h	/^    class window_class<tool_bar>$/;"	c	namespace:mtl
window_class	include/mtl/win/ctrl.h	/^    class window_class<tool_tip>$/;"	c	namespace:mtl
window_class	include/mtl/win/wc.h	/^        window_class()$/;"	f	class:mtl::window_class
window_class	include/mtl/win/wc.h	/^    class window_class : public WNDCLASSEXW$/;"	c	namespace:mtl
window_rect	include/mtl/win/wnd.h	/^        RECT window_rect() const$/;"	f	class:mtl::wnd	typeref:typename:RECT
with_	include/mtl/win/codlg.h	/^        wbuff with_;$/;"	m	class:mtl::search_dlg	typeref:typename:wbuff
wm_accellerator	include/mtl/win/wnd.h	/^        virtual LRESULT wm_accellerator(int id)$/;"	f	class:mtl::window	typeref:typename:LRESULT
wm_close	include/mtl/win/wnd.h	/^        virtual LRESULT wm_close()$/;"	f	class:mtl::window	typeref:typename:LRESULT
wm_command	include/mtl/win/ctrl.h	/^        virtual LRESULT wm_command(int id, int code) override$/;"	f	class:mtl::button	typeref:typename:LRESULT
wm_command	include/mtl/win/ctrl.h	/^        virtual LRESULT wm_command(int id, int code) override$/;"	f	class:mtl::tool_bar	typeref:typename:LRESULT
wm_command	include/mtl/win/ctrl.h	/^        virtual LRESULT wm_command(int id, int code)$/;"	f	class:mtl::ctrl	typeref:typename:LRESULT
wm_command	include/mtl/win/wnd.h	/^        virtual LRESULT wm_command(int id)$/;"	f	class:mtl::window	typeref:typename:LRESULT
wm_control	include/mtl/win/wnd.h	/^        virtual LRESULT wm_control(UINT message, WPARAM wParam, LPARAM lParam)$/;"	f	class:mtl::window	typeref:typename:LRESULT
wm_create	include/mtl/ole/explorer.h	/^		virtual LRESULT wm_create() override$/;"	f	class:mtl::explorer_tree	typeref:typename:LRESULT
wm_create	include/mtl/win/ctrl.h	/^        virtual LRESULT wm_create() override$/;"	f	class:mtl::ctrl	typeref:typename:LRESULT
wm_create	include/mtl/win/wnd.h	/^        virtual LRESULT wm_create() override$/;"	f	class:mtl::window	typeref:typename:LRESULT
wm_create	include/mtl/win/wnd.h	/^        virtual LRESULT wm_create()$/;"	f	class:mtl::wnd	typeref:typename:LRESULT
wm_ctl_color	include/mtl/win/wnd.h	/^        virtual LRESULT wm_ctl_color(HDC hdc, HWND ctrl) $/;"	f	class:mtl::wnd	typeref:typename:LRESULT
wm_custom_draw	include/mtl/win/ctrl.h	/^        virtual LRESULT wm_custom_draw(NMCUSTOMDRAW* cd) override$/;"	f	class:mtl::tool_bar	typeref:typename:LRESULT
wm_custom_draw	include/mtl/win/ctrl.h	/^        virtual LRESULT wm_custom_draw(NMCUSTOMDRAW* cd)$/;"	f	class:mtl::ctrl	typeref:typename:LRESULT
wm_destroy	include/mtl/edge/chrome.h	/^		LRESULT wm_destroy() override$/;"	f	class:mtl::html_wnd	typeref:typename:LRESULT
wm_destroy	include/mtl/ole/control.h	/^		virtual LRESULT wm_destroy() override$/;"	f	class:mtl::control	typeref:typename:LRESULT
wm_destroy	include/mtl/ole/explorer.h	/^		virtual LRESULT wm_destroy() override$/;"	f	class:mtl::explorer_tree	typeref:typename:LRESULT
wm_destroy	include/mtl/win/wnd.h	/^        virtual LRESULT wm_destroy() override$/;"	f	class:mtl::window	typeref:typename:LRESULT
wm_destroy	include/mtl/win/wnd.h	/^        virtual LRESULT wm_destroy()$/;"	f	class:mtl::wnd	typeref:typename:LRESULT
wm_dpi_changed	include/mtl/win/wnd.h	/^        virtual LRESULT wm_dpi_changed(RECT* r)$/;"	f	class:mtl::window	typeref:typename:LRESULT
wm_draw	include/mtl/win/mdi.h	/^        virtual LRESULT wm_draw(HDC dc, RECT& r) override$/;"	f	class:mtl::mdi_frame	typeref:typename:LRESULT
wm_draw	include/mtl/win/wnd.h	/^        virtual LRESULT wm_draw(HDC hdc, RECT& bounds)$/;"	f	class:mtl::window	typeref:typename:LRESULT
wm_draw_item	include/mtl/win/ctrl.h	/^        virtual LRESULT wm_draw_item(LPDRAWITEMSTRUCT dis) override$/;"	f	class:mtl::tab_ctrl	typeref:typename:LRESULT
wm_draw_item	include/mtl/win/ctrl.h	/^        virtual LRESULT wm_draw_item(LPDRAWITEMSTRUCT dis)$/;"	f	class:mtl::ctrl	typeref:typename:LRESULT
wm_draw_item	include/mtl/win/gdi.h	/^    inline LRESULT menu_item::wm_draw_item(LPDRAWITEMSTRUCT dis)$/;"	f	class:mtl::menu_item	typeref:typename:LRESULT
wm_erase_background	include/mtl/ole/explorer.h	/^		virtual LRESULT wm_erase_background(WPARAM wParam) override$/;"	f	class:mtl::explorer_tree	typeref:typename:LRESULT
wm_erase_background	include/mtl/ole/host.h	/^		virtual LRESULT wm_erase_background(WPARAM wParam) override$/;"	f	class:mtl::ole_host	typeref:typename:LRESULT
wm_erase_background	include/mtl/win/wnd.h	/^        virtual LRESULT wm_erase_background(WPARAM wParam)$/;"	f	class:mtl::window	typeref:typename:LRESULT
wm_h_scroll	include/mtl/win/wnd.h	/^        void virtual wm_h_scroll(unsigned int pos) {};$/;"	f	class:mtl::scroll_wnd	typeref:typename:void
wm_layout	include/mtl/win/wnd.h	/^        virtual LRESULT wm_layout(RECT& r)$/;"	f	class:mtl::window	typeref:typename:LRESULT
wm_measure_item	include/mtl/win/gdi.h	/^    inline LRESULT menu_item::wm_measure_item(MEASUREITEMSTRUCT* mis)$/;"	f	class:mtl::menu_item	typeref:typename:LRESULT
wm_nc_destroy	include/mtl/edge/chrome.h	/^		LRESULT wm_nc_destroy() override$/;"	f	class:mtl::html_wnd	typeref:typename:LRESULT
wm_nc_destroy	include/mtl/win/mdi.h	/^        virtual LRESULT wm_nc_destroy() override$/;"	f	class:mtl::mdi_child	typeref:typename:LRESULT
wm_nc_destroy	include/mtl/win/wnd.h	/^        virtual LRESULT wm_nc_destroy() override$/;"	f	class:mtl::window	typeref:typename:LRESULT
wm_nc_destroy	include/mtl/win/wnd.h	/^        virtual LRESULT wm_nc_destroy()$/;"	f	class:mtl::wnd	typeref:typename:LRESULT
wm_notify	include/mtl/win/ctrl.h	/^        virtual LRESULT wm_notify(int id, NMHDR* nmhdr) override$/;"	f	class:mtl::tab_ctrl	typeref:typename:LRESULT
wm_notify	include/mtl/win/ctrl.h	/^        virtual LRESULT wm_notify(int id, NMHDR* nmhdr) override$/;"	f	class:mtl::tool_bar	typeref:typename:LRESULT
wm_notify	include/mtl/win/ctrl.h	/^        virtual LRESULT wm_notify(int id, NMHDR* nmhdr)$/;"	f	class:mtl::ctrl	typeref:typename:LRESULT
wm_object_notify	include/mtl/win/ctrl.h	/^        virtual void wm_object_notify(NMOBJECTNOTIFY* notify)$/;"	f	class:mtl::tab_ctrl	typeref:typename:void
wm_paint	include/mtl/win/wnd.h	/^        virtual LRESULT wm_paint()$/;"	f	class:mtl::window	typeref:typename:LRESULT
wm_paint_handler	include/mtl/win/ctrl.h	/^        INT_PTR wm_paint_handler()$/;"	f	class:mtl::tab_ctrl	typeref:typename:INT_PTR
wm_search	include/mtl/edge/chrome.h	/^		LRESULT wm_search(FINDREPLACE* fi) override$/;"	f	class:mtl::html_wnd	typeref:typename:LRESULT
wm_search	include/mtl/win/wnd.h	/^        virtual LRESULT wm_search(FINDREPLACE* fr)$/;"	f	class:mtl::window	typeref:typename:LRESULT
wm_size	include/mtl/edge/chrome.h	/^		LRESULT wm_size(RECT& clientRect) override$/;"	f	class:mtl::html_wnd	typeref:typename:LRESULT
wm_size	include/mtl/ole/explorer.h	/^		virtual LRESULT wm_size(RECT& clientRect) override$/;"	f	class:mtl::explorer_tree	typeref:typename:LRESULT
wm_size	include/mtl/win/ctrl.h	/^        virtual LRESULT wm_size(RECT& clientRect) override$/;"	f	class:mtl::tab_ctrl	typeref:typename:LRESULT
wm_size	include/mtl/win/ctrl.h	/^        virtual LRESULT wm_size(RECT& rc) override$/;"	f	class:mtl::ctrl	typeref:typename:LRESULT
wm_size	include/mtl/win/ctrl.h	/^        virtual LRESULT wm_size(RECT& rc) override$/;"	f	class:mtl::status_bar	typeref:typename:LRESULT
wm_size	include/mtl/win/mdi.h	/^        virtual LRESULT wm_size(RECT& clientRect) override$/;"	f	class:mtl::mdi_child	typeref:typename:LRESULT
wm_size	include/mtl/win/mdi.h	/^        virtual LRESULT wm_size(RECT& clientRect) override$/;"	f	class:mtl::mdi_frame	typeref:typename:LRESULT
wm_size	include/mtl/win/wnd.h	/^        virtual LRESULT wm_size(RECT& clientRect)$/;"	f	class:mtl::window	typeref:typename:LRESULT
wm_size	include/mtl/win/wnd.h	/^        virtual LRESULT wm_size(RECT& clientRect)$/;"	f	class:mtl::wnd	typeref:typename:LRESULT
wm_v_scroll	include/mtl/win/wnd.h	/^        void virtual wm_v_scroll(unsigned int pos) {};$/;"	f	class:mtl::scroll_wnd	typeref:typename:void
wnd	include/mtl/win/wnd.h	/^    class wnd$/;"	c	namespace:mtl
wndProc	include/mtl/ole/host.h	/^		virtual LRESULT wndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)$/;"	f	class:mtl::ole_host	typeref:typename:LRESULT
wndProc	include/mtl/ole/shell.h	/^			LRESULT wndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)$/;"	f	class:mtl::shell::folder_view	typeref:typename:LRESULT
wndProc	include/mtl/scintilla/sci.h	/^	virtual LRESULT wndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) override$/;"	f	class:mtl::scintilla_wnd	typeref:typename:LRESULT
wndProc	include/mtl/win/ctrl.h	/^        virtual LRESULT wndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam) override$/;"	f	class:mtl::tab_ctrl	typeref:typename:LRESULT
wndProc	include/mtl/win/ctrl.h	/^        virtual LRESULT wndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)$/;"	f	class:mtl::ctrl	typeref:typename:LRESULT
wndProc	include/mtl/win/dlg.h	/^        LRESULT wndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)$/;"	f	class:mtl::dialog	typeref:typename:LRESULT
wndProc	include/mtl/win/layout.h	/^	inline LRESULT splitter::wndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)$/;"	f	class:mtl::splitter	typeref:typename:LRESULT
wndProc	include/mtl/win/mdi.h	/^        virtual LRESULT wndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) override$/;"	f	class:mtl::mdi_child	typeref:typename:LRESULT
wndProc	include/mtl/win/mdi.h	/^        virtual LRESULT wndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)$/;"	f	class:mtl::mdi_frame	typeref:typename:LRESULT
wndProc	include/mtl/win/wnd.h	/^        LRESULT virtual wndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)$/;"	f	class:mtl::scroll_wnd	typeref:typename:LRESULT
wndProc	include/mtl/win/wnd.h	/^        virtual LRESULT wndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)$/;"	f	class:mtl::window	typeref:typename:LRESULT
wndProc	include/mtl/win/wnd.h	/^        virtual LRESULT wndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)$/;"	f	class:mtl::wnd	typeref:typename:LRESULT
wnd_dc	include/mtl/win/gdi.h	/^        wnd_dc() : hWnd_(::GetDesktopWindow())$/;"	f	class:mtl::wnd_dc
wnd_dc	include/mtl/win/gdi.h	/^        wnd_dc(HWND hwnd) :hWnd_(hwnd)$/;"	f	class:mtl::wnd_dc
wnd_dc	include/mtl/win/gdi.h	/^    class wnd_dc : public dc$/;"	c	namespace:mtl
work_area	include/mtl/win/wnd.h	/^    inline RECT work_area(HWND wnd)$/;"	f	namespace:mtl	typeref:typename:RECT
wpath	include/mtl/util/path.h	/^    std::wstring wpath() const$/;"	f	class:mtl::path	typeref:typename:std::wstring
write	include/mtl/persist/stream.h	/^        void write(const std::string& str)$/;"	f	class:mtl::stream	typeref:typename:void
write	include/mtl/persist/stream.h	/^        void write(const std::string& str)$/;"	f	class:mtl::stream_view	typeref:typename:void
write	include/mtl/win32/pipe.h	/^        bool write(const std::string& data)$/;"	f	class:mtl::named_pipe	typeref:typename:bool
write	include/mtl/win32/pipe.h	/^        bool write(const std::string& data, std::function<void(bool)> cb)$/;"	f	class:mtl::async_named_pipe	typeref:typename:bool
write	include/mtl/win32/pipe.h	/^        bool write(const std::wstring& file, const std::string& data)$/;"	f	class:mtl::elevator	typeref:typename:bool
write	include/mtl/win32/pipe.h	/^        void write(const std::wstring& file, const std::string& data, std::function<void(bool)> /;"	f	class:mtl::elevator	typeref:typename:void
written	include/mtl/win32/io.h	/^            size_t written = 0;$/;"	m	class:mtl::detail::WriteOverLap	typeref:typename:size_t
written	include/mtl/win32/pipe.h	/^            size_t written = 0;$/;"	m	class:mtl::detail::PipeWriteOverlap	typeref:typename:size_t
wstring	include/mtl/ole/dataobj.h	/^		std::wstring wstring(CLIPFORMAT cf)$/;"	f	class:mtl::dataobj_view	typeref:typename:std::wstring
wstring	include/mtl/ole/dataobj.h	/^		std::wstring wstring(format_etc& fe)$/;"	f	class:mtl::dataobj_view	typeref:typename:std::wstring
xmlStyleSets	include/mtl/scintilla/sci.h	/^	XmlStyleSets xmlStyleSets;$/;"	m	class:mtl::scintilla_wnd	typeref:typename:XmlStyleSets
zoom_in	include/mtl/scintilla/sci.h	/^	scintilla_wnd& zoom_in()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
zoom_out	include/mtl/scintilla/sci.h	/^	scintilla_wnd& zoom_out()$/;"	f	class:mtl::scintilla_wnd	typeref:typename:scintilla_wnd &
~Binding	include/mtl/win/dlg.h	/^            virtual ~Binding() {}$/;"	f	class:mtl::details::Binding
~MTA	include/mtl/punk.h	/^        ~MTA()$/;"	f	class:mtl::MTA
~OLE	include/mtl/punk.h	/^        ~OLE()$/;"	f	class:mtl::OLE
~STA	include/mtl/punk.h	/^        ~STA()$/;"	f	class:mtl::STA
~SciDoc	include/mtl/scintilla/sci.h	/^		~SciDoc()$/;"	f	class:mtl::scintilla_wnd::SciDoc
~accelerators	include/mtl/win32/box.h	/^        ~accelerators()$/;"	f	class:mtl::accelerators
~active_script	include/mtl/script/script.h	/^		virtual ~active_script() {}$/;"	f	class:mtl::active_script
~aggregate	include/mtl/obj/impl.h	/^		~aggregate()$/;"	f	class:mtl::aggregate
~async_named_pipe	include/mtl/win32/pipe.h	/^        ~async_named_pipe()$/;"	f	class:mtl::async_named_pipe
~bitmap	include/mtl/ole/img.h	/^        ~bitmap()$/;"	f	class:mtl::bitmap
~brush	include/mtl/win/gdi.h	/^        ~brush()$/;"	f	class:mtl::brush
~bstr	include/mtl/disp/bstr.h	/^		~bstr()$/;"	f	class:mtl::bstr
~call_object	include/mtl/ole/async.h	/^            ~call_object()$/;"	f	class:mtl::details::call_object
~chrome_edge	include/mtl/edge/chrome.h	/^		~chrome_edge()$/;"	f	class:mtl::chrome_edge
~client_site	include/mtl/ole/host.h	/^		~client_site()$/;"	f	class:mtl::client_site
~co_mem	include/mtl/win32/mem.h	/^        ~co_mem()$/;"	f	class:mtl::co_mem
~co_str	include/mtl/win32/mem.h	/^        ~co_str()$/;"	f	class:mtl::co_str
~color_theme	include/mtl/win/wnd.h	/^        ~color_theme()$/;"	f	class:mtl::color_theme
~com_module	include/mtl/win32/module.h	/^		virtual ~com_module()$/;"	f	class:mtl::com_module
~compatible_dc	include/mtl/win/gdi.h	/^        ~compatible_dc()$/;"	f	class:mtl::compatible_dc
~connection_point_impl	include/mtl/ole/cp.h	/^		~connection_point_impl()$/;"	f	class:mtl::connection_point_impl
~control	include/mtl/ole/control.h	/^		~control()$/;"	f	class:mtl::control
~ctrl	include/mtl/win/ctrl.h	/^        ~ctrl()$/;"	f	class:mtl::ctrl
~data_transfer_object	include/mtl/ole/dataobj.h	/^		virtual ~data_transfer_object() {}$/;"	f	class:mtl::data_transfer_object
~dc	include/mtl/win/gdi.h	/^        virtual ~dc()$/;"	f	class:mtl::dc
~dispatch	include/mtl/disp/disp.h	/^		~dispatch()$/;"	f	class:mtl::dispatch
~drop_src_base	include/mtl/ole/dataobj.h	/^		virtual ~drop_src_base() {}$/;"	f	class:mtl::drop_src_base
~drop_target_base	include/mtl/ole/dataobj.h	/^		virtual ~drop_target_base() {}$/;"	f	class:mtl::drop_target_base
~event	include/mtl/sdk.h	/^        ~event()$/;"	f	class:mtl::event
~explorer_tree	include/mtl/ole/explorer.h	/^		~explorer_tree()$/;"	f	class:mtl::explorer_tree
~file	include/mtl/win32/io.h	/^        ~file()$/;"	f	class:mtl::file
~folder	include/mtl/ole/shell.h	/^			~folder()$/;"	f	class:mtl::shell::folder
~folder_view	include/mtl/ole/shell.h	/^			~folder_view()$/;"	f	class:mtl::shell::folder_view
~font	include/mtl/win/gdi.h	/^        ~font()$/;"	f	class:mtl::font
~git	include/mtl/obj/marshall.h	/^		~git()$/;"	f	class:mtl::git
~global	include/mtl/win32/mem.h	/^        ~global()$/;"	f	class:mtl::global
~html_wnd	include/mtl/edge/chrome.h	/^		~html_wnd()$/;"	f	class:mtl::html_wnd
~icon	include/mtl/win/gdi.h	/^        ~icon()$/;"	f	class:mtl::icon
~image_list	include/mtl/win/ctrl.h	/^        ~image_list()$/;"	f	class:mtl::image_list
~inplace_frame	include/mtl/ole/host.h	/^		~inplace_frame()$/;"	f	class:mtl::inplace_frame
~item	include/mtl/ole/shell.h	/^		inline item::~item()$/;"	f	class:mtl::shell::item
~layout	include/mtl/win/layout.h	/^		virtual ~layout() {}$/;"	f	class:mtl::layout
~library	include/mtl/sdk.h	/^		virtual ~library() {}$/;"	f	class:mtl::library
~library_impl	include/mtl/sdk.h	/^		~library_impl()$/;"	f	class:mtl::library_impl
~local_server	include/mtl/obj/localserver.h	/^		~local_server()$/;"	f	class:mtl::local_server
~lock	include/mtl/win/clipboard.h	/^			~lock()$/;"	f	class:mtl::clipboard::lock
~lock	include/mtl/win32/mem.h	/^            ~lock()$/;"	f	class:mtl::global::lock
~memory_mapped_file	include/mtl/win32/mem.h	/^        ~memory_mapped_file()$/;"	f	class:mtl::memory_mapped_file
~menu	include/mtl/win/gdi.h	/^        ~menu()$/;"	f	class:mtl::menu
~monitor	include/mtl/win32/monitor.h	/^		~monitor()$/;"	f	class:mtl::monitor
~named_pipe	include/mtl/win32/pipe.h	/^        ~named_pipe()$/;"	f	class:mtl::named_pipe
~ole_inplace_active_obj	include/mtl/ole/control.h	/^			virtual ~ole_inplace_active_obj()$/;"	f	class:mtl::control::ole_inplace_active_obj
~owner_drawn	include/mtl/win/wnd.h	/^        virtual ~owner_drawn() {}$/;"	f	class:mtl::owner_drawn
~paint_dc	include/mtl/win/gdi.h	/^        ~paint_dc()$/;"	f	class:mtl::paint_dc
~path	include/mtl/util/path.h	/^    ~path() {};$/;"	f	class:mtl::path
~punk	include/mtl/punk.h	/^        virtual ~punk()$/;"	f	class:mtl::punk
~rotten	include/mtl/obj/marshall.h	/^		~rotten()$/;"	f	class:mtl::rotten
~safearray_base	include/mtl/disp/sf_array.h	/^			virtual ~safearray_base()$/;"	f	class:mtl::details::safearray_base
~sf_array	include/mtl/disp/sf_array.h	/^		~sf_array()$/;"	f	class:mtl::sf_array
~sf_array_view	include/mtl/disp/sf_array.h	/^		~sf_array_view()$/;"	f	class:mtl::sf_array_view
~sink	include/mtl/sdk.h	/^        ~sink()$/;"	f	class:mtl::sink
~stg_medium	include/mtl/persist/stgm.h	/^		~stg_medium()$/;"	f	class:mtl::stg_medium
~storage_view	include/mtl/persist/stream.h	/^        ~storage_view()$/;"	f	class:mtl::storage_view
~stream	include/mtl/persist/stream.h	/^        ~stream()$/;"	f	class:mtl::stream
~stream_view	include/mtl/persist/stream.h	/^        ~stream_view()$/;"	f	class:mtl::stream_view
~tab_ctrl	include/mtl/win/ctrl.h	/^        virtual ~tab_ctrl() {}$/;"	f	class:mtl::tab_ctrl
~thread_box	include/mtl/win32/box.h	/^        ~thread_box()$/;"	f	class:mtl::thread_box
~timer	include/mtl/win/wnd.h	/^        ~timer()$/;"	f	class:mtl::timer
~variant	include/mtl/disp/variant.h	/^		~variant() { ::VariantClear(this); }$/;"	f	class:mtl::variant
~window_class	include/mtl/win/wc.h	/^        ~window_class()$/;"	f	class:mtl::window_class
~wnd	include/mtl/win/wnd.h	/^        virtual ~wnd()$/;"	f	class:mtl::wnd
~wnd_dc	include/mtl/win/gdi.h	/^        ~wnd_dc()$/;"	f	class:mtl::wnd_dc
